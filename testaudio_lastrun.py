#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This experiment was created using PsychoPy3 Experiment Builder (v2024.2.4),
    on 六月 12, 2025, at 14:13
If you publish work using this script the most relevant publication is:

    Peirce J, Gray JR, Simpson S, MacAskill M, Höchenberger R, Sogo H, Kastman E, Lindeløv JK. (2019) 
        PsychoPy2: Experiments in behavior made easy Behav Res 51: 195. 
        https://doi.org/10.3758/s13428-018-01193-y

"""

# --- Import packages ---
from psychopy import locale_setup
from psychopy import prefs
from psychopy import plugins
plugins.activatePlugins()
prefs.hardware['audioLib'] = 'ptb'
prefs.hardware['audioLatencyMode'] = '3'
from psychopy import sound, gui, visual, core, data, event, logging, clock, colors, layout, hardware
from psychopy.tools import environmenttools
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER, priority)

import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle, choice as randchoice
import os  # handy system and path functions
import sys  # to get file system encoding

import psychopy.iohub as io
from psychopy.hardware import keyboard

# --- Setup global variables (available in all functions) ---
# create a device manager to handle hardware (keyboards, mice, mirophones, speakers, etc.)
deviceManager = hardware.DeviceManager()
# ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
# store info about the experiment session
psychopyVersion = '2024.2.4'
expName = '测试'  # from the Builder filename that created this script
# information about this experiment
expInfo = {
    'participant': f"{randint(0, 999999):06.0f}",
    'session': '001',
    'date|hid': data.getDateStr(),
    'expName|hid': expName,
    'psychopyVersion|hid': psychopyVersion,
}

# --- Define some variables which will change depending on pilot mode ---
'''
To run in pilot mode, either use the run/pilot toggle in Builder, Coder and Runner, 
or run the experiment with `--pilot` as an argument. To change what pilot 
#mode does, check out the 'Pilot mode' tab in preferences.
'''
# work out from system args whether we are running in pilot mode
PILOTING = core.setPilotModeFromArgs()
# start off with values from experiment settings
_fullScr = True
_winSize = (1024, 768)
# if in pilot mode, apply overrides according to preferences
if PILOTING:
    # force windowed mode
    if prefs.piloting['forceWindowed']:
        _fullScr = False
        # set window size
        _winSize = prefs.piloting['forcedWindowSize']

def showExpInfoDlg(expInfo):
    """
    Show participant info dialog.
    Parameters
    ==========
    expInfo : dict
        Information about this experiment.
    
    Returns
    ==========
    dict
        Information about this experiment.
    """
    # show participant info dialog
    dlg = gui.DlgFromDict(
        dictionary=expInfo, sortKeys=False, title=expName, alwaysOnTop=True
    )
    if dlg.OK == False:
        core.quit()  # user pressed cancel
    # return expInfo
    return expInfo


def setupData(expInfo, dataDir=None):
    """
    Make an ExperimentHandler to handle trials and saving.
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    dataDir : Path, str or None
        Folder to save the data to, leave as None to create a folder in the current directory.    
    Returns
    ==========
    psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    """
    # remove dialog-specific syntax from expInfo
    for key, val in expInfo.copy().items():
        newKey, _ = data.utils.parsePipeSyntax(key)
        expInfo[newKey] = expInfo.pop(key)
    
    # data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
    if dataDir is None:
        dataDir = _thisDir
    filename = u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])
    # make sure filename is relative to dataDir
    if os.path.isabs(filename):
        dataDir = os.path.commonprefix([dataDir, filename])
        filename = os.path.relpath(filename, dataDir)
    
    # an ExperimentHandler isn't essential but helps with data saving
    thisExp = data.ExperimentHandler(
        name=expName, version='',
        extraInfo=expInfo, runtimeInfo=None,
        originPath='C:\\Users\\我的电脑\\Desktop\\testaudio\\testaudio_lastrun.py',
        savePickle=True, saveWideText=True,
        dataFileName=dataDir + os.sep + filename, sortColumns='time'
    )
    thisExp.setPriority('thisRow.t', priority.CRITICAL)
    thisExp.setPriority('expName', priority.LOW)
    # return experiment handler
    return thisExp


def setupLogging(filename):
    """
    Setup a log file and tell it what level to log at.
    
    Parameters
    ==========
    filename : str or pathlib.Path
        Filename to save log file and data files as, doesn't need an extension.
    
    Returns
    ==========
    psychopy.logging.LogFile
        Text stream to receive inputs from the logging system.
    """
    # set how much information should be printed to the console / app
    if PILOTING:
        logging.console.setLevel(
            prefs.piloting['pilotConsoleLoggingLevel']
        )
    else:
        logging.console.setLevel('warning')
    # save a log file for detail verbose info
    logFile = logging.LogFile(filename+'.log')
    if PILOTING:
        logFile.setLevel(
            prefs.piloting['pilotLoggingLevel']
        )
    else:
        logFile.setLevel(
            logging.getLevel('info')
        )
    
    return logFile


def setupWindow(expInfo=None, win=None):
    """
    Setup the Window
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    win : psychopy.visual.Window
        Window to setup - leave as None to create a new window.
    
    Returns
    ==========
    psychopy.visual.Window
        Window in which to run this experiment.
    """
    if PILOTING:
        logging.debug('Fullscreen settings ignored as running in pilot mode.')
    
    if win is None:
        # if not given a window to setup, make one
        win = visual.Window(
            size=_winSize, fullscr=_fullScr, screen=0,
            winType='pyglet', allowGUI=False, allowStencil=False,
            monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
            backgroundImage='', backgroundFit='none',
            blendMode='avg', useFBO=True,
            units='height',
            checkTiming=False  # we're going to do this ourselves in a moment
        )
    else:
        # if we have a window, just set the attributes which are safe to set
        win.color = [0,0,0]
        win.colorSpace = 'rgb'
        win.backgroundImage = ''
        win.backgroundFit = 'none'
        win.units = 'height'
    if expInfo is not None:
        # get/measure frame rate if not already in expInfo
        if win._monitorFrameRate is None:
            win._monitorFrameRate = win.getActualFrameRate(infoMsg='Attempting to measure frame rate of screen, please wait...')
        expInfo['frameRate'] = win._monitorFrameRate
    win.hideMessage()
    # show a visual indicator if we're in piloting mode
    if PILOTING and prefs.piloting['showPilotingIndicator']:
        win.showPilotingIndicator()
    
    return win


def setupDevices(expInfo, thisExp, win):
    """
    Setup whatever devices are available (mouse, keyboard, speaker, eyetracker, etc.) and add them to 
    the device manager (deviceManager)
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window in which to run this experiment.
    Returns
    ==========
    bool
        True if completed successfully.
    """
    # --- Setup input devices ---
    ioConfig = {}
    
    # Setup iohub keyboard
    ioConfig['Keyboard'] = dict(use_keymap='psychopy')
    
    # Setup iohub experiment
    ioConfig['Experiment'] = dict(filename=thisExp.dataFileName)
    
    # Start ioHub server
    ioServer = io.launchHubServer(window=win, **ioConfig)
    
    # store ioServer object in the device manager
    deviceManager.ioServer = ioServer
    
    # create a default keyboard (e.g. to check for escape)
    if deviceManager.getDevice('defaultKeyboard') is None:
        deviceManager.addDevice(
            deviceClass='keyboard', deviceName='defaultKeyboard', backend='iohub'
        )
    if deviceManager.getDevice('key_resp_') is None:
        # initialise key_resp_
        key_resp_ = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_',
        )
    # create speaker 'sound_apple0'
    deviceManager.addDevice(
        deviceName='sound_apple0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_apple0') is None:
        # initialise key_resp_apple0
        key_resp_apple0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_apple0',
        )
    # create speaker 'sound_apple1'
    deviceManager.addDevice(
        deviceName='sound_apple1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_apple1') is None:
        # initialise key_resp_apple1
        key_resp_apple1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_apple1',
        )
    # create speaker 'sound_xiaomi1'
    deviceManager.addDevice(
        deviceName='sound_xiaomi1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_xiaomi1') is None:
        # initialise key_resp_xiaomi1
        key_resp_xiaomi1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_xiaomi1',
        )
    # create speaker 'sound_xiaomi0'
    deviceManager.addDevice(
        deviceName='sound_xiaomi0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_xiaomi0') is None:
        # initialise key_xiaomi0
        key_xiaomi0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_xiaomi0',
        )
    if deviceManager.getDevice('key_resp_ins') is None:
        # initialise key_resp_ins
        key_resp_ins = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_ins',
        )
    # create speaker 'sound_zhuozi'
    deviceManager.addDevice(
        deviceName='sound_zhuozi',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_zhuozi') is None:
        # initialise key_resp_zhuozi
        key_resp_zhuozi = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_zhuozi',
        )
    # create speaker 'sound_qingshu0'
    deviceManager.addDevice(
        deviceName='sound_qingshu0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_2qingshu0') is None:
        # initialise key_resp_2qingshu0
        key_resp_2qingshu0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_2qingshu0',
        )
    # create speaker 'sound_caoyuan'
    deviceManager.addDevice(
        deviceName='sound_caoyuan',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_caoyuan') is None:
        # initialise key_resp_caoyuan
        key_resp_caoyuan = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_caoyuan',
        )
    # create speaker 'sound_heimei0'
    deviceManager.addDevice(
        deviceName='sound_heimei0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_heimei0') is None:
        # initialise key_resp_heimei0
        key_resp_heimei0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_heimei0',
        )
    # create speaker 'sound_weicheng1'
    deviceManager.addDevice(
        deviceName='sound_weicheng1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_weicheng1') is None:
        # initialise key_resp_weicheng1
        key_resp_weicheng1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_weicheng1',
        )
    # create speaker 'sound_hongniu0'
    deviceManager.addDevice(
        deviceName='sound_hongniu0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_hongniu0') is None:
        # initialise key_resp_hongniu0
        key_resp_hongniu0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_hongniu0',
        )
    # create speaker 'sound_shiren'
    deviceManager.addDevice(
        deviceName='sound_shiren',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shiren') is None:
        # initialise key_resp_shiren
        key_resp_shiren = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shiren',
        )
    # create speaker 'sound_hongqi1'
    deviceManager.addDevice(
        deviceName='sound_hongqi1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_hongqi1') is None:
        # initialise key_resp_hongqi1
        key_resp_hongqi1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_hongqi1',
        )
    # create speaker 'sound_diannao'
    deviceManager.addDevice(
        deviceName='sound_diannao',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_diannao') is None:
        # initialise key_resp_diannao
        key_resp_diannao = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_diannao',
        )
    # create speaker 'sound_qingshu1'
    deviceManager.addDevice(
        deviceName='sound_qingshu1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_3') is None:
        # initialise key_resp_3
        key_resp_3 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_3',
        )
    # create speaker 'sound_niunai'
    deviceManager.addDevice(
        deviceName='sound_niunai',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_niunai') is None:
        # initialise key_resp_niunai
        key_resp_niunai = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_niunai',
        )
    # create speaker 'sound_baoma1'
    deviceManager.addDevice(
        deviceName='sound_baoma1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baoma1') is None:
        # initialise key_resp_baoma1
        key_resp_baoma1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baoma1',
        )
    # create speaker 'sound_jiaofu0'
    deviceManager.addDevice(
        deviceName='sound_jiaofu0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_jiaofu0') is None:
        # initialise key_resp_jiaofu0
        key_resp_jiaofu0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_jiaofu0',
        )
    # create speaker 'sound_yintian0'
    deviceManager.addDevice(
        deviceName='sound_yintian0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_yintian0') is None:
        # initialise key_resp_yintian0
        key_resp_yintian0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_yintian0',
        )
    # create speaker 'sound_chaguan0'
    deviceManager.addDevice(
        deviceName='sound_chaguan0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_chaguan0') is None:
        # initialise key_resp_chaguan0
        key_resp_chaguan0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_chaguan0',
        )
    # create speaker 'sound_shuye'
    deviceManager.addDevice(
        deviceName='sound_shuye',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shuye') is None:
        # initialise key_resp_shuye
        key_resp_shuye = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shuye',
        )
    # create speaker 'sound_baixiang0'
    deviceManager.addDevice(
        deviceName='sound_baixiang0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baixiang0') is None:
        # initialise key_resp_baixiang0
        key_resp_baixiang0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baixiang0',
        )
    # create speaker 'sound_sinian1'
    deviceManager.addDevice(
        deviceName='sound_sinian1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_sinian1') is None:
        # initialise key_resp_sinian1
        key_resp_sinian1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_sinian1',
        )
    # create speaker 'sound_chengshi'
    deviceManager.addDevice(
        deviceName='sound_chengshi',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_chengshi') is None:
        # initialise key_resp_chengshi
        key_resp_chengshi = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_chengshi',
        )
    # create speaker 'sound_sinian'
    deviceManager.addDevice(
        deviceName='sound_sinian',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_sinian0') is None:
        # initialise key_resp_sinian0
        key_resp_sinian0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_sinian0',
        )
    # create speaker 'sound_xiaoshuo'
    deviceManager.addDevice(
        deviceName='sound_xiaoshuo',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_xiaoshuo') is None:
        # initialise key_resp_xiaoshuo
        key_resp_xiaoshuo = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_xiaoshuo',
        )
    # create speaker 'sound_fuqin0'
    deviceManager.addDevice(
        deviceName='sound_fuqin0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_fuqin0') is None:
        # initialise key_resp_fuqin0
        key_resp_fuqin0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_fuqin0',
        )
    # create speaker 'sound_guangming1'
    deviceManager.addDevice(
        deviceName='sound_guangming1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_guangming1') is None:
        # initialise key_resp_guangming1
        key_resp_guangming1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_guangming1',
        )
    # create speaker 'sound_baimao0'
    deviceManager.addDevice(
        deviceName='sound_baimao0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baimao0') is None:
        # initialise key_resp_baimao0
        key_resp_baimao0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baimao0',
        )
    # create speaker 'sound_xiongdi1'
    deviceManager.addDevice(
        deviceName='sound_xiongdi1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_xiongdi1') is None:
        # initialise key_resp_xiongdi1
        key_resp_xiongdi1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_xiongdi1',
        )
    # create speaker 'sound_lianxiang1'
    deviceManager.addDevice(
        deviceName='sound_lianxiang1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_lianxiang1') is None:
        # initialise key_resp_lianxiang1
        key_resp_lianxiang1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_lianxiang1',
        )
    # create speaker 'sound_chaguan1'
    deviceManager.addDevice(
        deviceName='sound_chaguan1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_chaguan1') is None:
        # initialise key_resp_chaguan1
        key_resp_chaguan1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_chaguan1',
        )
    # create speaker 'sound_mifan'
    deviceManager.addDevice(
        deviceName='sound_mifan',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_mifan') is None:
        # initialise key_resp_mifan
        key_resp_mifan = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_mifan',
        )
    # create speaker 'sound_baimao1'
    deviceManager.addDevice(
        deviceName='sound_baimao1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baimao1') is None:
        # initialise key_resp_baimao1
        key_resp_baimao1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baimao1',
        )
    # create speaker 'sound_yanjing'
    deviceManager.addDevice(
        deviceName='sound_yanjing',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_yanjing') is None:
        # initialise key_resp_yanjing
        key_resp_yanjing = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_yanjing',
        )
    # create speaker 'sound_tiankong'
    deviceManager.addDevice(
        deviceName='sound_tiankong',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_tiankong') is None:
        # initialise key_resp_tiankong
        key_resp_tiankong = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_tiankong',
        )
    # create speaker 'sound_luotuo1'
    deviceManager.addDevice(
        deviceName='sound_luotuo1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_luotuo1') is None:
        # initialise key_resp_luotuo1
        key_resp_luotuo1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_luotuo1',
        )
    # create speaker 'sound_fuqin1'
    deviceManager.addDevice(
        deviceName='sound_fuqin1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_fuqin1') is None:
        # initialise key_resp_fuqin1
        key_resp_fuqin1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_fuqin1',
        )
    # create speaker 'sound_luotuo0'
    deviceManager.addDevice(
        deviceName='sound_luotuo0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_luotuo0') is None:
        # initialise key_resp_luotuo0
        key_resp_luotuo0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_luotuo0',
        )
    # create speaker 'sound_weicheng0'
    deviceManager.addDevice(
        deviceName='sound_weicheng0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_weicheng0') is None:
        # initialise key_resp_weicheng0
        key_resp_weicheng0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_weicheng0',
        )
    # create speaker 'sound_chuanghu'
    deviceManager.addDevice(
        deviceName='sound_chuanghu',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_chuanghu') is None:
        # initialise key_resp_chuanghu
        key_resp_chuanghu = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_chuanghu',
        )
    # create speaker 'sound_mutou'
    deviceManager.addDevice(
        deviceName='sound_mutou',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_mutou') is None:
        # initialise key_resp_mutou
        key_resp_mutou = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_mutou',
        )
    # create speaker 'sound_jiemei'
    deviceManager.addDevice(
        deviceName='sound_jiemei',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_jiemei') is None:
        # initialise key_resp_jiemei
        key_resp_jiemei = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_jiemei',
        )
    # create speaker 'sound_huahi1'
    deviceManager.addDevice(
        deviceName='sound_huahi1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_huahai1') is None:
        # initialise key_resp_huahai1
        key_resp_huahai1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_huahai1',
        )
    # create speaker 'sound_lixiang0'
    deviceManager.addDevice(
        deviceName='sound_lixiang0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_lixiang0') is None:
        # initialise key_resp_lixiang0
        key_resp_lixiang0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_lixiang0',
        )
    # create speaker 'sound_heimei1'
    deviceManager.addDevice(
        deviceName='sound_heimei1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_heimei1') is None:
        # initialise key_resp_heimei1
        key_resp_heimei1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_heimei1',
        )
    # create speaker 'sound_yintian1'
    deviceManager.addDevice(
        deviceName='sound_yintian1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_yintian1') is None:
        # initialise key_resp_yintian1
        key_resp_yintian1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_yintian1',
        )
    # create speaker 'sound_danche0'
    deviceManager.addDevice(
        deviceName='sound_danche0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_danche0') is None:
        # initialise key_resp_danche0
        key_resp_danche0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_danche0',
        )
    # create speaker 'sound_baoma0'
    deviceManager.addDevice(
        deviceName='sound_baoma0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baoma0') is None:
        # initialise key_resp_baoma0
        key_resp_baoma0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baoma0',
        )
    # create speaker 'sound_huahai0'
    deviceManager.addDevice(
        deviceName='sound_huahai0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_huahai0') is None:
        # initialise key_resp_huahai0
        key_resp_huahai0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_huahai0',
        )
    # create speaker 'sound_lixiang1'
    deviceManager.addDevice(
        deviceName='sound_lixiang1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_lixiang1') is None:
        # initialise key_resp_lixiang1
        key_resp_lixiang1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_lixiang1',
        )
    # create speaker 'sound_beiying0'
    deviceManager.addDevice(
        deviceName='sound_beiying0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_beiying0') is None:
        # initialise key_resp_beiying0
        key_resp_beiying0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_beiying0',
        )
    # create speaker 'sound_lianxiang0'
    deviceManager.addDevice(
        deviceName='sound_lianxiang0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_lianxiang0') is None:
        # initialise key_resp_lianxiang0
        key_resp_lianxiang0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_lianxiang0',
        )
    # create speaker 'sound_gongfu1'
    deviceManager.addDevice(
        deviceName='sound_gongfu1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_gongfu1') is None:
        # initialise key_resp_gongfu1
        key_resp_gongfu1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_gongfu1',
        )
    # create speaker 'sound_miantiao'
    deviceManager.addDevice(
        deviceName='sound_miantiao',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_miantiao') is None:
        # initialise key_resp_miantiao
        key_resp_miantiao = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_miantiao',
        )
    # create speaker 'sound_heimao'
    deviceManager.addDevice(
        deviceName='sound_heimao',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_heimao') is None:
        # initialise key_resp_heimao
        key_resp_heimao = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_heimao',
        )
    # create speaker 'sound_beiying1'
    deviceManager.addDevice(
        deviceName='sound_beiying1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_beiying1') is None:
        # initialise key_resp_beiying1
        key_resp_beiying1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_beiying1',
        )
    # create speaker 'sound_danche1'
    deviceManager.addDevice(
        deviceName='sound_danche1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_danche1') is None:
        # initialise key_resp_danche1
        key_resp_danche1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_danche1',
        )
    # create speaker 'sound_dianying'
    deviceManager.addDevice(
        deviceName='sound_dianying',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_dianying') is None:
        # initialise key_resp_dianying
        key_resp_dianying = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_dianying',
        )
    # create speaker 'sound_shitou'
    deviceManager.addDevice(
        deviceName='sound_shitou',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shitou') is None:
        # initialise key_resp_shitou
        key_resp_shitou = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shitou',
        )
    # create speaker 'sound_xiongdi0'
    deviceManager.addDevice(
        deviceName='sound_xiongdi0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_xiongdi0') is None:
        # initialise key_resp_xiongdi0
        key_resp_xiongdi0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_xiongdi0',
        )
    # create speaker 'sound_senlin'
    deviceManager.addDevice(
        deviceName='sound_senlin',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_senlin') is None:
        # initialise key_resp_senlin
        key_resp_senlin = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_senlin',
        )
    # create speaker 'sound_hongqi_0'
    deviceManager.addDevice(
        deviceName='sound_hongqi_0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_hongqi_0') is None:
        # initialise key_resp_hongqi_0
        key_resp_hongqi_0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_hongqi_0',
        )
    # create speaker 'sound_shenhai0'
    deviceManager.addDevice(
        deviceName='sound_shenhai0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shenhai0') is None:
        # initialise key_resp_shenhai0
        key_resp_shenhai0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shenhai0',
        )
    # create speaker 'sound_feihe0'
    deviceManager.addDevice(
        deviceName='sound_feihe0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_feihe0') is None:
        # initialise key_resp_feihe0
        key_resp_feihe0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_feihe0',
        )
    # create speaker 'sound_shenhai1'
    deviceManager.addDevice(
        deviceName='sound_shenhai1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shenhai1') is None:
        # initialise key_resp_shenhai1
        key_resp_shenhai1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shenhai1',
        )
    # create speaker 'sound_shouji'
    deviceManager.addDevice(
        deviceName='sound_shouji',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_shouji') is None:
        # initialise key_resp_shouji
        key_resp_shouji = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_shouji',
        )
    # create speaker 'sound_hongniu1'
    deviceManager.addDevice(
        deviceName='sound_hongniu1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_hongniu1') is None:
        # initialise key_resp_hongniu1
        key_resp_hongniu1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_hongniu1',
        )
    # create speaker 'sound_guangming0'
    deviceManager.addDevice(
        deviceName='sound_guangming0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_guangming0') is None:
        # initialise key_resp_guangming0
        key_resp_guangming0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_guangming0',
        )
    # create speaker 'sound_qiche'
    deviceManager.addDevice(
        deviceName='sound_qiche',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_qiche') is None:
        # initialise key_resp_qiche
        key_resp_qiche = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_qiche',
        )
    # create speaker 'sound_gongfu0'
    deviceManager.addDevice(
        deviceName='sound_gongfu0',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_gongfu0') is None:
        # initialise key_resp_gongfu0
        key_resp_gongfu0 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_gongfu0',
        )
    # create speaker 'soundyusan'
    deviceManager.addDevice(
        deviceName='soundyusan',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_respyusan') is None:
        # initialise key_respyusan
        key_respyusan = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_respyusan',
        )
    # create speaker 'sound_jiaofu1'
    deviceManager.addDevice(
        deviceName='sound_jiaofu1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_jiaofu1') is None:
        # initialise key_resp_jiaofu1
        key_resp_jiaofu1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_jiaofu1',
        )
    # create speaker 'sound_baixiang_1'
    deviceManager.addDevice(
        deviceName='sound_baixiang_1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_baixiang_1') is None:
        # initialise key_resp_baixiang_1
        key_resp_baixiang_1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_baixiang_1',
        )
    # create speaker 'sound_canguan'
    deviceManager.addDevice(
        deviceName='sound_canguan',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_canguan') is None:
        # initialise key_resp_canguan
        key_resp_canguan = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_canguan',
        )
    # create speaker 'sound_feihe1'
    deviceManager.addDevice(
        deviceName='sound_feihe1',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_resp_feihe1') is None:
        # initialise key_resp_feihe1
        key_resp_feihe1 = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_resp_feihe1',
        )
    # return True if completed successfully
    return True

def pauseExperiment(thisExp, win=None, timers=[], playbackComponents=[]):
    """
    Pause this experiment, preventing the flow from advancing to the next routine until resumed.
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window for this experiment.
    timers : list, tuple
        List of timers to reset once pausing is finished.
    playbackComponents : list, tuple
        List of any components with a `pause` method which need to be paused.
    """
    # if we are not paused, do nothing
    if thisExp.status != PAUSED:
        return
    
    # start a timer to figure out how long we're paused for
    pauseTimer = core.Clock()
    # pause any playback components
    for comp in playbackComponents:
        comp.pause()
    # make sure we have a keyboard
    defaultKeyboard = deviceManager.getDevice('defaultKeyboard')
    if defaultKeyboard is None:
        defaultKeyboard = deviceManager.addKeyboard(
            deviceClass='keyboard',
            deviceName='defaultKeyboard',
            backend='ioHub',
        )
    # run a while loop while we wait to unpause
    while thisExp.status == PAUSED:
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=['escape']):
            endExperiment(thisExp, win=win)
        # sleep 1ms so other threads can execute
        clock.time.sleep(0.001)
    # if stop was requested while paused, quit
    if thisExp.status == FINISHED:
        endExperiment(thisExp, win=win)
    # resume any playback components
    for comp in playbackComponents:
        comp.play()
    # reset any timers
    for timer in timers:
        timer.addTime(-pauseTimer.getTime())


def run(expInfo, thisExp, win, globalClock=None, thisSession=None):
    """
    Run the experiment flow.
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    psychopy.visual.Window
        Window in which to run this experiment.
    globalClock : psychopy.core.clock.Clock or None
        Clock to get global time from - supply None to make a new one.
    thisSession : psychopy.session.Session or None
        Handle of the Session object this experiment is being run from, if any.
    """
    # mark experiment as started
    thisExp.status = STARTED
    # make sure window is set to foreground to prevent losing focus
    win.winHandle.activate()
    # make sure variables created by exec are available globally
    exec = environmenttools.setExecEnvironment(globals())
    # get device handles from dict of input devices
    ioServer = deviceManager.ioServer
    # get/create a default keyboard (e.g. to check for escape)
    defaultKeyboard = deviceManager.getDevice('defaultKeyboard')
    if defaultKeyboard is None:
        deviceManager.addDevice(
            deviceClass='keyboard', deviceName='defaultKeyboard', backend='ioHub'
        )
    eyetracker = deviceManager.getDevice('eyetracker')
    # make sure we're running in the directory for this experiment
    os.chdir(_thisDir)
    # get filename from ExperimentHandler for convenience
    filename = thisExp.dataFileName
    frameTolerance = 0.001  # how close to onset before 'same' frame
    endExpNow = False  # flag for 'escape' or other condition => quit the exp
    # get frame duration from frame rate in expInfo
    if 'frameRate' in expInfo and expInfo['frameRate'] is not None:
        frameDur = 1.0 / round(expInfo['frameRate'])
    else:
        frameDur = 1.0 / 60.0  # could not measure, so guess
    
    # Start Code - component code to be run after the window creation
    
    # --- Initialize components for Routine "introductions_1" ---
    text_introductions = visual.TextStim(win=win, name='text_introductions',
        text='请仔细听句子\n判断目标词\n 普通名词（按←）\n 专有名词（按→）\n准备好了请按“空格”',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    key_resp_ = keyboard.Keyboard(deviceName='key_resp_')
    
    # --- Initialize components for Routine "apple0" ---
    text_apple0 = visual.TextStim(win=win, name='text_apple0',
        text='苹果',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_apple0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_apple0',    name='sound_apple0'
    )
    sound_apple0.setVolume(1.0)
    text = visual.TextStim(win=win, name='text',
        text='请听句子...',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_2 = visual.TextStim(win=win, name='text_2',
        text='普通名词“←”\n专有名词“→”',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_apple0 = keyboard.Keyboard(deviceName='key_resp_apple0')
    
    # --- Initialize components for Routine "apple1" ---
    text_apple1 = visual.TextStim(win=win, name='text_apple1',
        text='苹果',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_apple1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_apple1',    name='sound_apple1'
    )
    sound_apple1.setVolume(1.0)
    text_3 = visual.TextStim(win=win, name='text_3',
        text='请听句子...',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_4 = visual.TextStim(win=win, name='text_4',
        text='普通名词“←”\n专有名词“→”',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_apple1 = keyboard.Keyboard(deviceName='key_resp_apple1')
    
    # --- Initialize components for Routine "xiaomi1" ---
    text_xiaomi1 = visual.TextStim(win=win, name='text_xiaomi1',
        text='小米',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_xiaomi1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_xiaomi1',    name='sound_xiaomi1'
    )
    sound_xiaomi1.setVolume(1.0)
    text_5 = visual.TextStim(win=win, name='text_5',
        text='请听句子...',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_6 = visual.TextStim(win=win, name='text_6',
        text='普通名词“←”\n专有名词“→”',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_xiaomi1 = keyboard.Keyboard(deviceName='key_resp_xiaomi1')
    
    # --- Initialize components for Routine "trial_xiaomi0" ---
    text_xiaomi0 = visual.TextStim(win=win, name='text_xiaomi0',
        text='小米',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_xiaomi0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_xiaomi0',    name='sound_xiaomi0'
    )
    sound_xiaomi0.setVolume(1.0)
    text_9 = visual.TextStim(win=win, name='text_9',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_10 = visual.TextStim(win=win, name='text_10',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_xiaomi0 = keyboard.Keyboard(deviceName='key_xiaomi0')
    
    # --- Initialize components for Routine "introductions_2" ---
    instructions2 = visual.TextStim(win=win, name='instructions2',
        text='正式开始\n准备好后按“空格”继续',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    key_resp_ins = keyboard.Keyboard(deviceName='key_resp_ins')
    
    # --- Initialize components for Routine "trial_zhuozi" ---
    text_zhuozi = visual.TextStim(win=win, name='text_zhuozi',
        text='桌子',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_zhuozi = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_zhuozi',    name='sound_zhuozi'
    )
    sound_zhuozi.setVolume(1.0)
    text_7 = visual.TextStim(win=win, name='text_7',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_8 = visual.TextStim(win=win, name='text_8',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_zhuozi = keyboard.Keyboard(deviceName='key_resp_zhuozi')
    
    # --- Initialize components for Routine "trial_qingshu0" ---
    text_qingshu0 = visual.TextStim(win=win, name='text_qingshu0',
        text='情书',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_qingshu0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_qingshu0',    name='sound_qingshu0'
    )
    sound_qingshu0.setVolume(1.0)
    text_11 = visual.TextStim(win=win, name='text_11',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_12 = visual.TextStim(win=win, name='text_12',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_2qingshu0 = keyboard.Keyboard(deviceName='key_resp_2qingshu0')
    
    # --- Initialize components for Routine "trial_caoyuan" ---
    caoyuan = visual.TextStim(win=win, name='caoyuan',
        text='草原',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_caoyuan = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_caoyuan',    name='sound_caoyuan'
    )
    sound_caoyuan.setVolume(1.0)
    text_161 = visual.TextStim(win=win, name='text_161',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_162 = visual.TextStim(win=win, name='text_162',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_caoyuan = keyboard.Keyboard(deviceName='key_resp_caoyuan')
    
    # --- Initialize components for Routine "trial_heimei0" ---
    text_heimei0 = visual.TextStim(win=win, name='text_heimei0',
        text='黑莓',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_heimei0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_heimei0',    name='sound_heimei0'
    )
    sound_heimei0.setVolume(1.0)
    text_149 = visual.TextStim(win=win, name='text_149',
        text='请听句子...',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_150 = visual.TextStim(win=win, name='text_150',
        text='普通名词“←”\n专有名词“→”',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_heimei0 = keyboard.Keyboard(deviceName='key_resp_heimei0')
    
    # --- Initialize components for Routine "trial_weicheng1" ---
    text_weicheng1 = visual.TextStim(win=win, name='text_weicheng1',
        text='围城',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_weicheng1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_weicheng1',    name='sound_weicheng1'
    )
    sound_weicheng1.setVolume(1.0)
    text_13 = visual.TextStim(win=win, name='text_13',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_14 = visual.TextStim(win=win, name='text_14',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_weicheng1 = keyboard.Keyboard(deviceName='key_resp_weicheng1')
    
    # --- Initialize components for Routine "trial_hongniu0" ---
    text_hongniu0 = visual.TextStim(win=win, name='text_hongniu0',
        text='红牛',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_hongniu0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_hongniu0',    name='sound_hongniu0'
    )
    sound_hongniu0.setVolume(1.0)
    text_15 = visual.TextStim(win=win, name='text_15',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_16 = visual.TextStim(win=win, name='text_16',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_hongniu0 = keyboard.Keyboard(deviceName='key_resp_hongniu0')
    
    # --- Initialize components for Routine "trial_shiren" ---
    text_shiren = visual.TextStim(win=win, name='text_shiren',
        text='诗人',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shiren = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shiren',    name='sound_shiren'
    )
    sound_shiren.setVolume(1.0)
    text_19 = visual.TextStim(win=win, name='text_19',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_20 = visual.TextStim(win=win, name='text_20',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shiren = keyboard.Keyboard(deviceName='key_resp_shiren')
    
    # --- Initialize components for Routine "trial_hongqi1" ---
    text_hongqi1 = visual.TextStim(win=win, name='text_hongqi1',
        text='红旗',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_hongqi1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_hongqi1',    name='sound_hongqi1'
    )
    sound_hongqi1.setVolume(1.0)
    text_1ruodian1 = visual.TextStim(win=win, name='text_1ruodian1',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_18 = visual.TextStim(win=win, name='text_18',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_hongqi1 = keyboard.Keyboard(deviceName='key_resp_hongqi1')
    
    # --- Initialize components for Routine "trial_diannao" ---
    text_diannao = visual.TextStim(win=win, name='text_diannao',
        text='电脑',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_diannao = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_diannao',    name='sound_diannao'
    )
    sound_diannao.setVolume(1.0)
    text_21 = visual.TextStim(win=win, name='text_21',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_22 = visual.TextStim(win=win, name='text_22',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_diannao = keyboard.Keyboard(deviceName='key_resp_diannao')
    
    # --- Initialize components for Routine "trial_qingshu1" ---
    text_qingshu1 = visual.TextStim(win=win, name='text_qingshu1',
        text='情书',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_qingshu1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_qingshu1',    name='sound_qingshu1'
    )
    sound_qingshu1.setVolume(1.0)
    text_23 = visual.TextStim(win=win, name='text_23',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_24 = visual.TextStim(win=win, name='text_24',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_3 = keyboard.Keyboard(deviceName='key_resp_3')
    
    # --- Initialize components for Routine "trial_niunai" ---
    text_niunai = visual.TextStim(win=win, name='text_niunai',
        text='牛奶',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_niunai = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_niunai',    name='sound_niunai'
    )
    sound_niunai.setVolume(1.0)
    text_25 = visual.TextStim(win=win, name='text_25',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_26 = visual.TextStim(win=win, name='text_26',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_niunai = keyboard.Keyboard(deviceName='key_resp_niunai')
    
    # --- Initialize components for Routine "trial_baoma1" ---
    text_baoma1 = visual.TextStim(win=win, name='text_baoma1',
        text='宝马',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baoma1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baoma1',    name='sound_baoma1'
    )
    sound_baoma1.setVolume(1.0)
    text_27 = visual.TextStim(win=win, name='text_27',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_28 = visual.TextStim(win=win, name='text_28',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baoma1 = keyboard.Keyboard(deviceName='key_resp_baoma1')
    
    # --- Initialize components for Routine "trial_jiaofu0" ---
    text_jiaofu0 = visual.TextStim(win=win, name='text_jiaofu0',
        text='教父',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_jiaofu0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_jiaofu0',    name='sound_jiaofu0'
    )
    sound_jiaofu0.setVolume(1.0)
    text_29 = visual.TextStim(win=win, name='text_29',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_30 = visual.TextStim(win=win, name='text_30',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_jiaofu0 = keyboard.Keyboard(deviceName='key_resp_jiaofu0')
    
    # --- Initialize components for Routine "trial_yintian0" ---
    text_yintian0 = visual.TextStim(win=win, name='text_yintian0',
        text='阴天',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_yintian0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_yintian0',    name='sound_yintian0'
    )
    sound_yintian0.setVolume(1.0)
    text_33 = visual.TextStim(win=win, name='text_33',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_34 = visual.TextStim(win=win, name='text_34',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_yintian0 = keyboard.Keyboard(deviceName='key_resp_yintian0')
    
    # --- Initialize components for Routine "trial_chaguan0" ---
    text_chaguan0 = visual.TextStim(win=win, name='text_chaguan0',
        text='茶馆',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_chaguan0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_chaguan0',    name='sound_chaguan0'
    )
    sound_chaguan0.setVolume(1.0)
    text_35 = visual.TextStim(win=win, name='text_35',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_36 = visual.TextStim(win=win, name='text_36',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_chaguan0 = keyboard.Keyboard(deviceName='key_resp_chaguan0')
    
    # --- Initialize components for Routine "trial_shuye" ---
    shuye = visual.TextStim(win=win, name='shuye',
        text='树叶',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shuye = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shuye',    name='sound_shuye'
    )
    sound_shuye.setVolume(1.0)
    text_163 = visual.TextStim(win=win, name='text_163',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_164 = visual.TextStim(win=win, name='text_164',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shuye = keyboard.Keyboard(deviceName='key_resp_shuye')
    
    # --- Initialize components for Routine "trial_baixiang0" ---
    text_baixiang0 = visual.TextStim(win=win, name='text_baixiang0',
        text='白象',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baixiang0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baixiang0',    name='sound_baixiang0'
    )
    sound_baixiang0.setVolume(1.0)
    text_37 = visual.TextStim(win=win, name='text_37',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_38 = visual.TextStim(win=win, name='text_38',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baixiang0 = keyboard.Keyboard(deviceName='key_resp_baixiang0')
    
    # --- Initialize components for Routine "trial_sinian1" ---
    text_sinian1 = visual.TextStim(win=win, name='text_sinian1',
        text='思念',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_sinian1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_sinian1',    name='sound_sinian1'
    )
    sound_sinian1.setVolume(1.0)
    text_39 = visual.TextStim(win=win, name='text_39',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_40 = visual.TextStim(win=win, name='text_40',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_sinian1 = keyboard.Keyboard(deviceName='key_resp_sinian1')
    
    # --- Initialize components for Routine "trial_chengshi" ---
    text_chengshi = visual.TextStim(win=win, name='text_chengshi',
        text='城市',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_chengshi = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_chengshi',    name='sound_chengshi'
    )
    sound_chengshi.setVolume(1.0)
    text_151 = visual.TextStim(win=win, name='text_151',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_152 = visual.TextStim(win=win, name='text_152',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_chengshi = keyboard.Keyboard(deviceName='key_resp_chengshi')
    
    # --- Initialize components for Routine "trial_sinian0" ---
    text_sinian0 = visual.TextStim(win=win, name='text_sinian0',
        text='思念',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_sinian = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_sinian',    name='sound_sinian'
    )
    sound_sinian.setVolume(1.0)
    text_41 = visual.TextStim(win=win, name='text_41',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_42 = visual.TextStim(win=win, name='text_42',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_sinian0 = keyboard.Keyboard(deviceName='key_resp_sinian0')
    
    # --- Initialize components for Routine "trial_xiaoshuo" ---
    text_xiaoshuo = visual.TextStim(win=win, name='text_xiaoshuo',
        text='小说',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_xiaoshuo = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_xiaoshuo',    name='sound_xiaoshuo'
    )
    sound_xiaoshuo.setVolume(1.0)
    text_43 = visual.TextStim(win=win, name='text_43',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_44 = visual.TextStim(win=win, name='text_44',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_xiaoshuo = keyboard.Keyboard(deviceName='key_resp_xiaoshuo')
    
    # --- Initialize components for Routine "trial_fuqin0" ---
    text_fuqin0 = visual.TextStim(win=win, name='text_fuqin0',
        text='父亲',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_fuqin0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_fuqin0',    name='sound_fuqin0'
    )
    sound_fuqin0.setVolume(1.0)
    text_45 = visual.TextStim(win=win, name='text_45',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_46 = visual.TextStim(win=win, name='text_46',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_fuqin0 = keyboard.Keyboard(deviceName='key_resp_fuqin0')
    
    # --- Initialize components for Routine "trial_guangming1" ---
    text_guangming1 = visual.TextStim(win=win, name='text_guangming1',
        text='光明',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_guangming1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_guangming1',    name='sound_guangming1'
    )
    sound_guangming1.setVolume(1.0)
    text_47 = visual.TextStim(win=win, name='text_47',
        text='请听句子...',
        font='SImHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_48 = visual.TextStim(win=win, name='text_48',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_guangming1 = keyboard.Keyboard(deviceName='key_resp_guangming1')
    
    # --- Initialize components for Routine "trial_baimao0" ---
    text_baimao0 = visual.TextStim(win=win, name='text_baimao0',
        text='白猫',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baimao0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baimao0',    name='sound_baimao0'
    )
    sound_baimao0.setVolume(1.0)
    text_49 = visual.TextStim(win=win, name='text_49',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_50 = visual.TextStim(win=win, name='text_50',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baimao0 = keyboard.Keyboard(deviceName='key_resp_baimao0')
    
    # --- Initialize components for Routine "trial_xiongdi1" ---
    text_xiongdi1 = visual.TextStim(win=win, name='text_xiongdi1',
        text='兄弟',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_xiongdi1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_xiongdi1',    name='sound_xiongdi1'
    )
    sound_xiongdi1.setVolume(1.0)
    text_51 = visual.TextStim(win=win, name='text_51',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_52 = visual.TextStim(win=win, name='text_52',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_xiongdi1 = keyboard.Keyboard(deviceName='key_resp_xiongdi1')
    
    # --- Initialize components for Routine "trial_lianxiang1" ---
    text_lianxiang1 = visual.TextStim(win=win, name='text_lianxiang1',
        text='联想',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_lianxiang1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_lianxiang1',    name='sound_lianxiang1'
    )
    sound_lianxiang1.setVolume(1.0)
    text_53 = visual.TextStim(win=win, name='text_53',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_54 = visual.TextStim(win=win, name='text_54',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_lianxiang1 = keyboard.Keyboard(deviceName='key_resp_lianxiang1')
    
    # --- Initialize components for Routine "trial_chaguan1" ---
    text_chaguan1 = visual.TextStim(win=win, name='text_chaguan1',
        text='茶馆',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_chaguan1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_chaguan1',    name='sound_chaguan1'
    )
    sound_chaguan1.setVolume(1.0)
    text_55 = visual.TextStim(win=win, name='text_55',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_56 = visual.TextStim(win=win, name='text_56',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_chaguan1 = keyboard.Keyboard(deviceName='key_resp_chaguan1')
    
    # --- Initialize components for Routine "trial_mifan" ---
    text_mifan = visual.TextStim(win=win, name='text_mifan',
        text='米饭',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_mifan = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_mifan',    name='sound_mifan'
    )
    sound_mifan.setVolume(1.0)
    text_57 = visual.TextStim(win=win, name='text_57',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_58 = visual.TextStim(win=win, name='text_58',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_mifan = keyboard.Keyboard(deviceName='key_resp_mifan')
    
    # --- Initialize components for Routine "trial_baimao1" ---
    text_baimao1 = visual.TextStim(win=win, name='text_baimao1',
        text='白猫',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baimao1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baimao1',    name='sound_baimao1'
    )
    sound_baimao1.setVolume(1.0)
    text_59 = visual.TextStim(win=win, name='text_59',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_60 = visual.TextStim(win=win, name='text_60',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baimao1 = keyboard.Keyboard(deviceName='key_resp_baimao1')
    
    # --- Initialize components for Routine "trial_yanjing" ---
    text_yanjing = visual.TextStim(win=win, name='text_yanjing',
        text='眼睛',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_yanjing = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_yanjing',    name='sound_yanjing'
    )
    sound_yanjing.setVolume(1.0)
    text_61 = visual.TextStim(win=win, name='text_61',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_62 = visual.TextStim(win=win, name='text_62',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_yanjing = keyboard.Keyboard(deviceName='key_resp_yanjing')
    
    # --- Initialize components for Routine "trial_tiankong" ---
    text_tiankong = visual.TextStim(win=win, name='text_tiankong',
        text='天空',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_tiankong = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_tiankong',    name='sound_tiankong'
    )
    sound_tiankong.setVolume(1.0)
    text_63 = visual.TextStim(win=win, name='text_63',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_64 = visual.TextStim(win=win, name='text_64',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_tiankong = keyboard.Keyboard(deviceName='key_resp_tiankong')
    
    # --- Initialize components for Routine "trial_luotuo1" ---
    text_luotuo1 = visual.TextStim(win=win, name='text_luotuo1',
        text='骆驼',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_luotuo1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_luotuo1',    name='sound_luotuo1'
    )
    sound_luotuo1.setVolume(1.0)
    text_65 = visual.TextStim(win=win, name='text_65',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_66 = visual.TextStim(win=win, name='text_66',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_luotuo1 = keyboard.Keyboard(deviceName='key_resp_luotuo1')
    
    # --- Initialize components for Routine "trial_fuqin1" ---
    text_fuqin1 = visual.TextStim(win=win, name='text_fuqin1',
        text='父亲',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_fuqin1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_fuqin1',    name='sound_fuqin1'
    )
    sound_fuqin1.setVolume(1.0)
    text_67 = visual.TextStim(win=win, name='text_67',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_68 = visual.TextStim(win=win, name='text_68',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_fuqin1 = keyboard.Keyboard(deviceName='key_resp_fuqin1')
    
    # --- Initialize components for Routine "trial_luotuo0" ---
    text_luotuo0 = visual.TextStim(win=win, name='text_luotuo0',
        text='骆驼',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_luotuo0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_luotuo0',    name='sound_luotuo0'
    )
    sound_luotuo0.setVolume(1.0)
    text_69 = visual.TextStim(win=win, name='text_69',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_70 = visual.TextStim(win=win, name='text_70',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_luotuo0 = keyboard.Keyboard(deviceName='key_resp_luotuo0')
    
    # --- Initialize components for Routine "trial_weicheng0" ---
    text_weicheng0 = visual.TextStim(win=win, name='text_weicheng0',
        text='围城',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_weicheng0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_weicheng0',    name='sound_weicheng0'
    )
    sound_weicheng0.setVolume(1.0)
    text_71 = visual.TextStim(win=win, name='text_71',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_72 = visual.TextStim(win=win, name='text_72',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_weicheng0 = keyboard.Keyboard(deviceName='key_resp_weicheng0')
    
    # --- Initialize components for Routine "trial_chuanghu" ---
    text_chuanghu = visual.TextStim(win=win, name='text_chuanghu',
        text='窗户',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_chuanghu = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_chuanghu',    name='sound_chuanghu'
    )
    sound_chuanghu.setVolume(1.0)
    text_73 = visual.TextStim(win=win, name='text_73',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_74 = visual.TextStim(win=win, name='text_74',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_chuanghu = keyboard.Keyboard(deviceName='key_resp_chuanghu')
    
    # --- Initialize components for Routine "trial_mutou" ---
    text_mutou = visual.TextStim(win=win, name='text_mutou',
        text='木头',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_mutou = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_mutou',    name='sound_mutou'
    )
    sound_mutou.setVolume(1.0)
    text_79 = visual.TextStim(win=win, name='text_79',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_80 = visual.TextStim(win=win, name='text_80',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_mutou = keyboard.Keyboard(deviceName='key_resp_mutou')
    
    # --- Initialize components for Routine "trial_jiemei" ---
    text_jiemei = visual.TextStim(win=win, name='text_jiemei',
        text='姐妹',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_jiemei = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_jiemei',    name='sound_jiemei'
    )
    sound_jiemei.setVolume(1.0)
    text_81 = visual.TextStim(win=win, name='text_81',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_82 = visual.TextStim(win=win, name='text_82',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_jiemei = keyboard.Keyboard(deviceName='key_resp_jiemei')
    
    # --- Initialize components for Routine "trial_huahai1" ---
    text_huahai1 = visual.TextStim(win=win, name='text_huahai1',
        text='花海',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_huahi1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_huahi1',    name='sound_huahi1'
    )
    sound_huahi1.setVolume(1.0)
    text_83 = visual.TextStim(win=win, name='text_83',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_84 = visual.TextStim(win=win, name='text_84',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_huahai1 = keyboard.Keyboard(deviceName='key_resp_huahai1')
    
    # --- Initialize components for Routine "trial_lixiang0" ---
    text_lixiang0 = visual.TextStim(win=win, name='text_lixiang0',
        text='理想',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_lixiang0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_lixiang0',    name='sound_lixiang0'
    )
    sound_lixiang0.setVolume(1.0)
    text_85 = visual.TextStim(win=win, name='text_85',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_86 = visual.TextStim(win=win, name='text_86',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_lixiang0 = keyboard.Keyboard(deviceName='key_resp_lixiang0')
    
    # --- Initialize components for Routine "trial_heimei1" ---
    text_heimei1 = visual.TextStim(win=win, name='text_heimei1',
        text='黑莓',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_heimei1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_heimei1',    name='sound_heimei1'
    )
    sound_heimei1.setVolume(1.0)
    text_87 = visual.TextStim(win=win, name='text_87',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_88 = visual.TextStim(win=win, name='text_88',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_heimei1 = keyboard.Keyboard(deviceName='key_resp_heimei1')
    
    # --- Initialize components for Routine "trial_yintian1" ---
    text_yintian1 = visual.TextStim(win=win, name='text_yintian1',
        text='阴天',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_yintian1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_yintian1',    name='sound_yintian1'
    )
    sound_yintian1.setVolume(1.0)
    text_89 = visual.TextStim(win=win, name='text_89',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_90 = visual.TextStim(win=win, name='text_90',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_yintian1 = keyboard.Keyboard(deviceName='key_resp_yintian1')
    
    # --- Initialize components for Routine "trial_danche0" ---
    text_danche0 = visual.TextStim(win=win, name='text_danche0',
        text='单车',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_danche0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_danche0',    name='sound_danche0'
    )
    sound_danche0.setVolume(1.0)
    text_91 = visual.TextStim(win=win, name='text_91',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_92 = visual.TextStim(win=win, name='text_92',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_danche0 = keyboard.Keyboard(deviceName='key_resp_danche0')
    
    # --- Initialize components for Routine "trial_baoma0" ---
    text_baoma0 = visual.TextStim(win=win, name='text_baoma0',
        text='宝马',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baoma0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baoma0',    name='sound_baoma0'
    )
    sound_baoma0.setVolume(1.0)
    text_93 = visual.TextStim(win=win, name='text_93',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_94 = visual.TextStim(win=win, name='text_94',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baoma0 = keyboard.Keyboard(deviceName='key_resp_baoma0')
    
    # --- Initialize components for Routine "trial_huahai0" ---
    text_huahai0 = visual.TextStim(win=win, name='text_huahai0',
        text='花海',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_huahai0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_huahai0',    name='sound_huahai0'
    )
    sound_huahai0.setVolume(1.0)
    text_95 = visual.TextStim(win=win, name='text_95',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_96 = visual.TextStim(win=win, name='text_96',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_huahai0 = keyboard.Keyboard(deviceName='key_resp_huahai0')
    
    # --- Initialize components for Routine "trial_lixiang1" ---
    text_lixiang1 = visual.TextStim(win=win, name='text_lixiang1',
        text='理想',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_lixiang1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_lixiang1',    name='sound_lixiang1'
    )
    sound_lixiang1.setVolume(1.0)
    text_97 = visual.TextStim(win=win, name='text_97',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_98 = visual.TextStim(win=win, name='text_98',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_lixiang1 = keyboard.Keyboard(deviceName='key_resp_lixiang1')
    
    # --- Initialize components for Routine "trial_beiying0" ---
    text_beiying0 = visual.TextStim(win=win, name='text_beiying0',
        text='背影',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_beiying0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_beiying0',    name='sound_beiying0'
    )
    sound_beiying0.setVolume(1.0)
    text_99 = visual.TextStim(win=win, name='text_99',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_100 = visual.TextStim(win=win, name='text_100',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_beiying0 = keyboard.Keyboard(deviceName='key_resp_beiying0')
    
    # --- Initialize components for Routine "trial_lianxiang0" ---
    text_lianxiang0 = visual.TextStim(win=win, name='text_lianxiang0',
        text='联想',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_lianxiang0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_lianxiang0',    name='sound_lianxiang0'
    )
    sound_lianxiang0.setVolume(1.0)
    text_101 = visual.TextStim(win=win, name='text_101',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_102 = visual.TextStim(win=win, name='text_102',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_lianxiang0 = keyboard.Keyboard(deviceName='key_resp_lianxiang0')
    
    # --- Initialize components for Routine "trial_gongfu1" ---
    text_gongfu1 = visual.TextStim(win=win, name='text_gongfu1',
        text='功夫',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_gongfu1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_gongfu1',    name='sound_gongfu1'
    )
    sound_gongfu1.setVolume(1.0)
    text_105 = visual.TextStim(win=win, name='text_105',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_106 = visual.TextStim(win=win, name='text_106',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_gongfu1 = keyboard.Keyboard(deviceName='key_resp_gongfu1')
    
    # --- Initialize components for Routine "trial_miantiao" ---
    text_miantiao = visual.TextStim(win=win, name='text_miantiao',
        text='面条',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_miantiao = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_miantiao',    name='sound_miantiao'
    )
    sound_miantiao.setVolume(1.0)
    text_107 = visual.TextStim(win=win, name='text_107',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_108 = visual.TextStim(win=win, name='text_108',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_miantiao = keyboard.Keyboard(deviceName='key_resp_miantiao')
    
    # --- Initialize components for Routine "trial_heimao" ---
    text_heimao = visual.TextStim(win=win, name='text_heimao',
        text='黑猫',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_heimao = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_heimao',    name='sound_heimao'
    )
    sound_heimao.setVolume(1.0)
    text_109 = visual.TextStim(win=win, name='text_109',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_110 = visual.TextStim(win=win, name='text_110',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_heimao = keyboard.Keyboard(deviceName='key_resp_heimao')
    
    # --- Initialize components for Routine "trial_beiying1" ---
    text_beiying1 = visual.TextStim(win=win, name='text_beiying1',
        text='背影',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_beiying1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_beiying1',    name='sound_beiying1'
    )
    sound_beiying1.setVolume(1.0)
    text_111 = visual.TextStim(win=win, name='text_111',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_112 = visual.TextStim(win=win, name='text_112',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_beiying1 = keyboard.Keyboard(deviceName='key_resp_beiying1')
    
    # --- Initialize components for Routine "trial_danche1" ---
    text_danche1 = visual.TextStim(win=win, name='text_danche1',
        text='单车',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_danche1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_danche1',    name='sound_danche1'
    )
    sound_danche1.setVolume(1.0)
    text_113 = visual.TextStim(win=win, name='text_113',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_114 = visual.TextStim(win=win, name='text_114',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_danche1 = keyboard.Keyboard(deviceName='key_resp_danche1')
    
    # --- Initialize components for Routine "trial_dianying" ---
    text_dianying = visual.TextStim(win=win, name='text_dianying',
        text='电影',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_dianying = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_dianying',    name='sound_dianying'
    )
    sound_dianying.setVolume(1.0)
    text_115 = visual.TextStim(win=win, name='text_115',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_116 = visual.TextStim(win=win, name='text_116',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_dianying = keyboard.Keyboard(deviceName='key_resp_dianying')
    
    # --- Initialize components for Routine "trial_shitou" ---
    text_shitou = visual.TextStim(win=win, name='text_shitou',
        text='石头',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shitou = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shitou',    name='sound_shitou'
    )
    sound_shitou.setVolume(1.0)
    text_117 = visual.TextStim(win=win, name='text_117',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_118 = visual.TextStim(win=win, name='text_118',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shitou = keyboard.Keyboard(deviceName='key_resp_shitou')
    
    # --- Initialize components for Routine "trial_xiongdi0" ---
    text_xiongdi0 = visual.TextStim(win=win, name='text_xiongdi0',
        text='兄弟',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_xiongdi0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_xiongdi0',    name='sound_xiongdi0'
    )
    sound_xiongdi0.setVolume(1.0)
    text_119 = visual.TextStim(win=win, name='text_119',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_120 = visual.TextStim(win=win, name='text_120',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_xiongdi0 = keyboard.Keyboard(deviceName='key_resp_xiongdi0')
    
    # --- Initialize components for Routine "trial_senlin" ---
    text_senlin = visual.TextStim(win=win, name='text_senlin',
        text='森林',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_senlin = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_senlin',    name='sound_senlin'
    )
    sound_senlin.setVolume(1.0)
    text_123 = visual.TextStim(win=win, name='text_123',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_124 = visual.TextStim(win=win, name='text_124',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_senlin = keyboard.Keyboard(deviceName='key_resp_senlin')
    
    # --- Initialize components for Routine "trial_hongqi0" ---
    text_hongqi_0 = visual.TextStim(win=win, name='text_hongqi_0',
        text='红旗',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_hongqi_0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_hongqi_0',    name='sound_hongqi_0'
    )
    sound_hongqi_0.setVolume(1.0)
    text_153 = visual.TextStim(win=win, name='text_153',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_154 = visual.TextStim(win=win, name='text_154',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_hongqi_0 = keyboard.Keyboard(deviceName='key_resp_hongqi_0')
    
    # --- Initialize components for Routine "trial_shenhai0" ---
    text_shenhai0 = visual.TextStim(win=win, name='text_shenhai0',
        text='深海',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shenhai0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shenhai0',    name='sound_shenhai0'
    )
    sound_shenhai0.setVolume(1.0)
    text_125 = visual.TextStim(win=win, name='text_125',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_126 = visual.TextStim(win=win, name='text_126',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shenhai0 = keyboard.Keyboard(deviceName='key_resp_shenhai0')
    
    # --- Initialize components for Routine "trial_feihe0" ---
    text_feihe0 = visual.TextStim(win=win, name='text_feihe0',
        text='飞鹤',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_feihe0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_feihe0',    name='sound_feihe0'
    )
    sound_feihe0.setVolume(1.0)
    text_127 = visual.TextStim(win=win, name='text_127',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_128 = visual.TextStim(win=win, name='text_128',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_feihe0 = keyboard.Keyboard(deviceName='key_resp_feihe0')
    
    # --- Initialize components for Routine "trial_shenhai1" ---
    text_shenhai1 = visual.TextStim(win=win, name='text_shenhai1',
        text='深海',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shenhai1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shenhai1',    name='sound_shenhai1'
    )
    sound_shenhai1.setVolume(1.0)
    text_129 = visual.TextStim(win=win, name='text_129',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_130 = visual.TextStim(win=win, name='text_130',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shenhai1 = keyboard.Keyboard(deviceName='key_resp_shenhai1')
    
    # --- Initialize components for Routine "trial_shouji" ---
    text_shouji = visual.TextStim(win=win, name='text_shouji',
        text='手机',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_shouji = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_shouji',    name='sound_shouji'
    )
    sound_shouji.setVolume(1.0)
    text_165 = visual.TextStim(win=win, name='text_165',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_166 = visual.TextStim(win=win, name='text_166',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_shouji = keyboard.Keyboard(deviceName='key_resp_shouji')
    
    # --- Initialize components for Routine "trial_hongniu1" ---
    text_hongniu1 = visual.TextStim(win=win, name='text_hongniu1',
        text='红牛',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_hongniu1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_hongniu1',    name='sound_hongniu1'
    )
    sound_hongniu1.setVolume(1.0)
    text_131 = visual.TextStim(win=win, name='text_131',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_132 = visual.TextStim(win=win, name='text_132',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_hongniu1 = keyboard.Keyboard(deviceName='key_resp_hongniu1')
    
    # --- Initialize components for Routine "trial_guangming0" ---
    text_guangming0 = visual.TextStim(win=win, name='text_guangming0',
        text='光明',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_guangming0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_guangming0',    name='sound_guangming0'
    )
    sound_guangming0.setVolume(1.0)
    text_133 = visual.TextStim(win=win, name='text_133',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_134 = visual.TextStim(win=win, name='text_134',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_guangming0 = keyboard.Keyboard(deviceName='key_resp_guangming0')
    
    # --- Initialize components for Routine "trial_qiche" ---
    text_qiche = visual.TextStim(win=win, name='text_qiche',
        text='汽车',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_qiche = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_qiche',    name='sound_qiche'
    )
    sound_qiche.setVolume(1.0)
    text_135 = visual.TextStim(win=win, name='text_135',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_136 = visual.TextStim(win=win, name='text_136',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_qiche = keyboard.Keyboard(deviceName='key_resp_qiche')
    
    # --- Initialize components for Routine "trial_gongfu0" ---
    text_gongfu0 = visual.TextStim(win=win, name='text_gongfu0',
        text='功夫',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_gongfu0 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_gongfu0',    name='sound_gongfu0'
    )
    sound_gongfu0.setVolume(1.0)
    text_137 = visual.TextStim(win=win, name='text_137',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_138 = visual.TextStim(win=win, name='text_138',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_gongfu0 = keyboard.Keyboard(deviceName='key_resp_gongfu0')
    
    # --- Initialize components for Routine "trial_yusan" ---
    textyusan = visual.TextStim(win=win, name='textyusan',
        text='雨伞',
        font='Simhei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    soundyusan = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='soundyusan',    name='soundyusan'
    )
    soundyusan.setVolume(1.0)
    text_157 = visual.TextStim(win=win, name='text_157',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_158 = visual.TextStim(win=win, name='text_158',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_respyusan = keyboard.Keyboard(deviceName='key_respyusan')
    
    # --- Initialize components for Routine "trial_jiaofu1" ---
    text_jiaofu1 = visual.TextStim(win=win, name='text_jiaofu1',
        text='教父',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_jiaofu1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_jiaofu1',    name='sound_jiaofu1'
    )
    sound_jiaofu1.setVolume(1.0)
    text_141 = visual.TextStim(win=win, name='text_141',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_142 = visual.TextStim(win=win, name='text_142',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_jiaofu1 = keyboard.Keyboard(deviceName='key_resp_jiaofu1')
    
    # --- Initialize components for Routine "trial_baixiang1" ---
    text_baixiang_1 = visual.TextStim(win=win, name='text_baixiang_1',
        text='白象',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_baixiang_1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_baixiang_1',    name='sound_baixiang_1'
    )
    sound_baixiang_1.setVolume(1.0)
    text_159 = visual.TextStim(win=win, name='text_159',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_160 = visual.TextStim(win=win, name='text_160',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_baixiang_1 = keyboard.Keyboard(deviceName='key_resp_baixiang_1')
    
    # --- Initialize components for Routine "trial_canguan" ---
    text_canguan = visual.TextStim(win=win, name='text_canguan',
        text='餐馆',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_canguan = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_canguan',    name='sound_canguan'
    )
    sound_canguan.setVolume(1.0)
    text_143 = visual.TextStim(win=win, name='text_143',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_144 = visual.TextStim(win=win, name='text_144',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_canguan = keyboard.Keyboard(deviceName='key_resp_canguan')
    
    # --- Initialize components for Routine "trial_feihe1" ---
    text_feihe1 = visual.TextStim(win=win, name='text_feihe1',
        text='飞鹤',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.5, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=0.0);
    sound_feihe1 = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='sound_feihe1',    name='sound_feihe1'
    )
    sound_feihe1.setVolume(1.0)
    text_147 = visual.TextStim(win=win, name='text_147',
        text='请听句子...',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-2.0);
    text_148 = visual.TextStim(win=win, name='text_148',
        text='普通名词“←”\n专有名词“→”',
        font='SimHei',
        pos=(0, 0), draggable=False, height=0.09, wrapWidth=None, ori=0.0, 
        color='white', colorSpace='rgb', opacity=None, 
        languageStyle='LTR',
        depth=-3.0);
    key_resp_feihe1 = keyboard.Keyboard(deviceName='key_resp_feihe1')
    
    # create some handy timers
    
    # global clock to track the time since experiment started
    if globalClock is None:
        # create a clock if not given one
        globalClock = core.Clock()
    if isinstance(globalClock, str):
        # if given a string, make a clock accoridng to it
        if globalClock == 'float':
            # get timestamps as a simple value
            globalClock = core.Clock(format='float')
        elif globalClock == 'iso':
            # get timestamps in ISO format
            globalClock = core.Clock(format='%Y-%m-%d_%H:%M:%S.%f%z')
        else:
            # get timestamps in a custom format
            globalClock = core.Clock(format=globalClock)
    if ioServer is not None:
        ioServer.syncClock(globalClock)
    logging.setDefaultClock(globalClock)
    # routine timer to track time remaining of each (possibly non-slip) routine
    routineTimer = core.Clock()
    win.flip()  # flip window to reset last flip timer
    # store the exact time the global clock started
    expInfo['expStart'] = data.getDateStr(
        format='%Y-%m-%d %Hh%M.%S.%f %z', fractionalSecondDigits=6
    )
    
    # --- Prepare to start Routine "introductions_1" ---
    # create an object to store info about Routine introductions_1
    introductions_1 = data.Routine(
        name='introductions_1',
        components=[text_introductions, key_resp_],
    )
    introductions_1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    # create starting attributes for key_resp_
    key_resp_.keys = []
    key_resp_.rt = []
    _key_resp__allKeys = []
    # store start times for introductions_1
    introductions_1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    introductions_1.tStart = globalClock.getTime(format='float')
    introductions_1.status = STARTED
    thisExp.addData('introductions_1.started', introductions_1.tStart)
    introductions_1.maxDuration = None
    # keep track of which components have finished
    introductions_1Components = introductions_1.components
    for thisComponent in introductions_1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "introductions_1" ---
    introductions_1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 999.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_introductions* updates
        
        # if text_introductions is starting this frame...
        if text_introductions.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_introductions.frameNStart = frameN  # exact frame index
            text_introductions.tStart = t  # local t and not account for scr refresh
            text_introductions.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_introductions, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_introductions.started')
            # update status
            text_introductions.status = STARTED
            text_introductions.setAutoDraw(True)
        
        # if text_introductions is active this frame...
        if text_introductions.status == STARTED:
            # update params
            pass
        
        # if text_introductions is stopping this frame...
        if text_introductions.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_introductions.tStartRefresh + 999-frameTolerance:
                # keep track of stop time/frame for later
                text_introductions.tStop = t  # not accounting for scr refresh
                text_introductions.tStopRefresh = tThisFlipGlobal  # on global time
                text_introductions.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_introductions.stopped')
                # update status
                text_introductions.status = FINISHED
                text_introductions.setAutoDraw(False)
        
        # *key_resp_* updates
        waitOnFlip = False
        
        # if key_resp_ is starting this frame...
        if key_resp_.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_.frameNStart = frameN  # exact frame index
            key_resp_.tStart = t  # local t and not account for scr refresh
            key_resp_.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_.started')
            # update status
            key_resp_.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_ is stopping this frame...
        if key_resp_.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_.tStartRefresh + 999-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_.tStop = t  # not accounting for scr refresh
                key_resp_.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_.stopped')
                # update status
                key_resp_.status = FINISHED
                key_resp_.status = FINISHED
        if key_resp_.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_.getKeys(keyList=['space'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp__allKeys.extend(theseKeys)
            if len(_key_resp__allKeys):
                key_resp_.keys = _key_resp__allKeys[0].name  # just the first key pressed
                key_resp_.rt = _key_resp__allKeys[0].rt
                key_resp_.duration = _key_resp__allKeys[0].duration
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            introductions_1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in introductions_1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "introductions_1" ---
    for thisComponent in introductions_1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for introductions_1
    introductions_1.tStop = globalClock.getTime(format='float')
    introductions_1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('introductions_1.stopped', introductions_1.tStop)
    # check responses
    if key_resp_.keys in ['', [], None]:  # No response was made
        key_resp_.keys = None
    thisExp.addData('key_resp_.keys',key_resp_.keys)
    if key_resp_.keys != None:  # we had a response
        thisExp.addData('key_resp_.rt', key_resp_.rt)
        thisExp.addData('key_resp_.duration', key_resp_.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if introductions_1.maxDurationReached:
        routineTimer.addTime(-introductions_1.maxDuration)
    elif introductions_1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-999.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "apple0" ---
    # create an object to store info about Routine apple0
    apple0 = data.Routine(
        name='apple0',
        components=[text_apple0, sound_apple0, text, text_2, key_resp_apple0],
    )
    apple0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_apple0.setSound('audio/apple0.wav', secs=3.0, hamming=True)
    sound_apple0.setVolume(1.0, log=False)
    sound_apple0.seek(0)
    # create starting attributes for key_resp_apple0
    key_resp_apple0.keys = []
    key_resp_apple0.rt = []
    _key_resp_apple0_allKeys = []
    # store start times for apple0
    apple0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    apple0.tStart = globalClock.getTime(format='float')
    apple0.status = STARTED
    thisExp.addData('apple0.started', apple0.tStart)
    apple0.maxDuration = None
    # keep track of which components have finished
    apple0Components = apple0.components
    for thisComponent in apple0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "apple0" ---
    apple0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_apple0* updates
        
        # if text_apple0 is starting this frame...
        if text_apple0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_apple0.frameNStart = frameN  # exact frame index
            text_apple0.tStart = t  # local t and not account for scr refresh
            text_apple0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_apple0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_apple0.started')
            # update status
            text_apple0.status = STARTED
            text_apple0.setAutoDraw(True)
        
        # if text_apple0 is active this frame...
        if text_apple0.status == STARTED:
            # update params
            pass
        
        # if text_apple0 is stopping this frame...
        if text_apple0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_apple0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_apple0.tStop = t  # not accounting for scr refresh
                text_apple0.tStopRefresh = tThisFlipGlobal  # on global time
                text_apple0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_apple0.stopped')
                # update status
                text_apple0.status = FINISHED
                text_apple0.setAutoDraw(False)
        
        # *sound_apple0* updates
        
        # if sound_apple0 is starting this frame...
        if sound_apple0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_apple0.frameNStart = frameN  # exact frame index
            sound_apple0.tStart = t  # local t and not account for scr refresh
            sound_apple0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_apple0.started', tThisFlipGlobal)
            # update status
            sound_apple0.status = STARTED
            sound_apple0.play(when=win)  # sync with win flip
        
        # if sound_apple0 is stopping this frame...
        if sound_apple0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_apple0.tStartRefresh + 3.0-frameTolerance or sound_apple0.isFinished:
                # keep track of stop time/frame for later
                sound_apple0.tStop = t  # not accounting for scr refresh
                sound_apple0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_apple0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_apple0.stopped')
                # update status
                sound_apple0.status = FINISHED
                sound_apple0.stop()
        
        # *text* updates
        
        # if text is starting this frame...
        if text.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text.frameNStart = frameN  # exact frame index
            text.tStart = t  # local t and not account for scr refresh
            text.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text.started')
            # update status
            text.status = STARTED
            text.setAutoDraw(True)
        
        # if text is active this frame...
        if text.status == STARTED:
            # update params
            pass
        
        # if text is stopping this frame...
        if text.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text.tStop = t  # not accounting for scr refresh
                text.tStopRefresh = tThisFlipGlobal  # on global time
                text.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text.stopped')
                # update status
                text.status = FINISHED
                text.setAutoDraw(False)
        
        # *text_2* updates
        
        # if text_2 is starting this frame...
        if text_2.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_2.frameNStart = frameN  # exact frame index
            text_2.tStart = t  # local t and not account for scr refresh
            text_2.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_2, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_2.started')
            # update status
            text_2.status = STARTED
            text_2.setAutoDraw(True)
        
        # if text_2 is active this frame...
        if text_2.status == STARTED:
            # update params
            pass
        
        # if text_2 is stopping this frame...
        if text_2.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_2.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_2.tStop = t  # not accounting for scr refresh
                text_2.tStopRefresh = tThisFlipGlobal  # on global time
                text_2.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_2.stopped')
                # update status
                text_2.status = FINISHED
                text_2.setAutoDraw(False)
        
        # *key_resp_apple0* updates
        waitOnFlip = False
        
        # if key_resp_apple0 is starting this frame...
        if key_resp_apple0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_apple0.frameNStart = frameN  # exact frame index
            key_resp_apple0.tStart = t  # local t and not account for scr refresh
            key_resp_apple0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_apple0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_apple0.started')
            # update status
            key_resp_apple0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_apple0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_apple0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_apple0 is stopping this frame...
        if key_resp_apple0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_apple0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_apple0.tStop = t  # not accounting for scr refresh
                key_resp_apple0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_apple0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_apple0.stopped')
                # update status
                key_resp_apple0.status = FINISHED
                key_resp_apple0.status = FINISHED
        if key_resp_apple0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_apple0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_apple0_allKeys.extend(theseKeys)
            if len(_key_resp_apple0_allKeys):
                key_resp_apple0.keys = _key_resp_apple0_allKeys[0].name  # just the first key pressed
                key_resp_apple0.rt = _key_resp_apple0_allKeys[0].rt
                key_resp_apple0.duration = _key_resp_apple0_allKeys[0].duration
                # was this correct?
                if (key_resp_apple0.keys == str("'left'")) or (key_resp_apple0.keys == "'left'"):
                    key_resp_apple0.corr = 1
                else:
                    key_resp_apple0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_apple0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            apple0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in apple0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "apple0" ---
    for thisComponent in apple0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for apple0
    apple0.tStop = globalClock.getTime(format='float')
    apple0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('apple0.stopped', apple0.tStop)
    sound_apple0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_apple0.keys in ['', [], None]:  # No response was made
        key_resp_apple0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_apple0.corr = 1;  # correct non-response
        else:
           key_resp_apple0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_apple0.keys',key_resp_apple0.keys)
    thisExp.addData('key_resp_apple0.corr', key_resp_apple0.corr)
    if key_resp_apple0.keys != None:  # we had a response
        thisExp.addData('key_resp_apple0.rt', key_resp_apple0.rt)
        thisExp.addData('key_resp_apple0.duration', key_resp_apple0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if apple0.maxDurationReached:
        routineTimer.addTime(-apple0.maxDuration)
    elif apple0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "apple1" ---
    # create an object to store info about Routine apple1
    apple1 = data.Routine(
        name='apple1',
        components=[text_apple1, sound_apple1, text_3, text_4, key_resp_apple1],
    )
    apple1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_apple1.setSound('audio/apple1.wav', secs=3.0, hamming=True)
    sound_apple1.setVolume(1.0, log=False)
    sound_apple1.seek(0)
    # create starting attributes for key_resp_apple1
    key_resp_apple1.keys = []
    key_resp_apple1.rt = []
    _key_resp_apple1_allKeys = []
    # store start times for apple1
    apple1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    apple1.tStart = globalClock.getTime(format='float')
    apple1.status = STARTED
    thisExp.addData('apple1.started', apple1.tStart)
    apple1.maxDuration = None
    # keep track of which components have finished
    apple1Components = apple1.components
    for thisComponent in apple1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "apple1" ---
    apple1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_apple1* updates
        
        # if text_apple1 is starting this frame...
        if text_apple1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_apple1.frameNStart = frameN  # exact frame index
            text_apple1.tStart = t  # local t and not account for scr refresh
            text_apple1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_apple1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_apple1.started')
            # update status
            text_apple1.status = STARTED
            text_apple1.setAutoDraw(True)
        
        # if text_apple1 is active this frame...
        if text_apple1.status == STARTED:
            # update params
            pass
        
        # if text_apple1 is stopping this frame...
        if text_apple1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_apple1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_apple1.tStop = t  # not accounting for scr refresh
                text_apple1.tStopRefresh = tThisFlipGlobal  # on global time
                text_apple1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_apple1.stopped')
                # update status
                text_apple1.status = FINISHED
                text_apple1.setAutoDraw(False)
        
        # *sound_apple1* updates
        
        # if sound_apple1 is starting this frame...
        if sound_apple1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_apple1.frameNStart = frameN  # exact frame index
            sound_apple1.tStart = t  # local t and not account for scr refresh
            sound_apple1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_apple1.started', tThisFlipGlobal)
            # update status
            sound_apple1.status = STARTED
            sound_apple1.play(when=win)  # sync with win flip
        
        # if sound_apple1 is stopping this frame...
        if sound_apple1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_apple1.tStartRefresh + 3.0-frameTolerance or sound_apple1.isFinished:
                # keep track of stop time/frame for later
                sound_apple1.tStop = t  # not accounting for scr refresh
                sound_apple1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_apple1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_apple1.stopped')
                # update status
                sound_apple1.status = FINISHED
                sound_apple1.stop()
        
        # *text_3* updates
        
        # if text_3 is starting this frame...
        if text_3.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_3.frameNStart = frameN  # exact frame index
            text_3.tStart = t  # local t and not account for scr refresh
            text_3.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_3, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_3.started')
            # update status
            text_3.status = STARTED
            text_3.setAutoDraw(True)
        
        # if text_3 is active this frame...
        if text_3.status == STARTED:
            # update params
            pass
        
        # if text_3 is stopping this frame...
        if text_3.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_3.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_3.tStop = t  # not accounting for scr refresh
                text_3.tStopRefresh = tThisFlipGlobal  # on global time
                text_3.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_3.stopped')
                # update status
                text_3.status = FINISHED
                text_3.setAutoDraw(False)
        
        # *text_4* updates
        
        # if text_4 is starting this frame...
        if text_4.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_4.frameNStart = frameN  # exact frame index
            text_4.tStart = t  # local t and not account for scr refresh
            text_4.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_4, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_4.started')
            # update status
            text_4.status = STARTED
            text_4.setAutoDraw(True)
        
        # if text_4 is active this frame...
        if text_4.status == STARTED:
            # update params
            pass
        
        # if text_4 is stopping this frame...
        if text_4.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_4.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_4.tStop = t  # not accounting for scr refresh
                text_4.tStopRefresh = tThisFlipGlobal  # on global time
                text_4.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_4.stopped')
                # update status
                text_4.status = FINISHED
                text_4.setAutoDraw(False)
        
        # *key_resp_apple1* updates
        waitOnFlip = False
        
        # if key_resp_apple1 is starting this frame...
        if key_resp_apple1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_apple1.frameNStart = frameN  # exact frame index
            key_resp_apple1.tStart = t  # local t and not account for scr refresh
            key_resp_apple1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_apple1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_apple1.started')
            # update status
            key_resp_apple1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_apple1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_apple1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_apple1 is stopping this frame...
        if key_resp_apple1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_apple1.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_apple1.tStop = t  # not accounting for scr refresh
                key_resp_apple1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_apple1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_apple1.stopped')
                # update status
                key_resp_apple1.status = FINISHED
                key_resp_apple1.status = FINISHED
        if key_resp_apple1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_apple1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_apple1_allKeys.extend(theseKeys)
            if len(_key_resp_apple1_allKeys):
                key_resp_apple1.keys = _key_resp_apple1_allKeys[0].name  # just the first key pressed
                key_resp_apple1.rt = _key_resp_apple1_allKeys[0].rt
                key_resp_apple1.duration = _key_resp_apple1_allKeys[0].duration
                # was this correct?
                if (key_resp_apple1.keys == str("'right'")) or (key_resp_apple1.keys == "'right'"):
                    key_resp_apple1.corr = 1
                else:
                    key_resp_apple1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_apple1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            apple1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in apple1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "apple1" ---
    for thisComponent in apple1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for apple1
    apple1.tStop = globalClock.getTime(format='float')
    apple1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('apple1.stopped', apple1.tStop)
    sound_apple1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_apple1.keys in ['', [], None]:  # No response was made
        key_resp_apple1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_apple1.corr = 1;  # correct non-response
        else:
           key_resp_apple1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_apple1.keys',key_resp_apple1.keys)
    thisExp.addData('key_resp_apple1.corr', key_resp_apple1.corr)
    if key_resp_apple1.keys != None:  # we had a response
        thisExp.addData('key_resp_apple1.rt', key_resp_apple1.rt)
        thisExp.addData('key_resp_apple1.duration', key_resp_apple1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if apple1.maxDurationReached:
        routineTimer.addTime(-apple1.maxDuration)
    elif apple1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "xiaomi1" ---
    # create an object to store info about Routine xiaomi1
    xiaomi1 = data.Routine(
        name='xiaomi1',
        components=[text_xiaomi1, sound_xiaomi1, text_5, text_6, key_resp_xiaomi1],
    )
    xiaomi1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_xiaomi1.setSound('audio/xiaomi1.wav', secs=3.0, hamming=True)
    sound_xiaomi1.setVolume(1.0, log=False)
    sound_xiaomi1.seek(0)
    # create starting attributes for key_resp_xiaomi1
    key_resp_xiaomi1.keys = []
    key_resp_xiaomi1.rt = []
    _key_resp_xiaomi1_allKeys = []
    # store start times for xiaomi1
    xiaomi1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    xiaomi1.tStart = globalClock.getTime(format='float')
    xiaomi1.status = STARTED
    thisExp.addData('xiaomi1.started', xiaomi1.tStart)
    xiaomi1.maxDuration = None
    # keep track of which components have finished
    xiaomi1Components = xiaomi1.components
    for thisComponent in xiaomi1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "xiaomi1" ---
    xiaomi1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_xiaomi1* updates
        
        # if text_xiaomi1 is starting this frame...
        if text_xiaomi1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_xiaomi1.frameNStart = frameN  # exact frame index
            text_xiaomi1.tStart = t  # local t and not account for scr refresh
            text_xiaomi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_xiaomi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_xiaomi1.started')
            # update status
            text_xiaomi1.status = STARTED
            text_xiaomi1.setAutoDraw(True)
        
        # if text_xiaomi1 is active this frame...
        if text_xiaomi1.status == STARTED:
            # update params
            pass
        
        # if text_xiaomi1 is stopping this frame...
        if text_xiaomi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_xiaomi1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_xiaomi1.tStop = t  # not accounting for scr refresh
                text_xiaomi1.tStopRefresh = tThisFlipGlobal  # on global time
                text_xiaomi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_xiaomi1.stopped')
                # update status
                text_xiaomi1.status = FINISHED
                text_xiaomi1.setAutoDraw(False)
        
        # *sound_xiaomi1* updates
        
        # if sound_xiaomi1 is starting this frame...
        if sound_xiaomi1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_xiaomi1.frameNStart = frameN  # exact frame index
            sound_xiaomi1.tStart = t  # local t and not account for scr refresh
            sound_xiaomi1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_xiaomi1.started', tThisFlipGlobal)
            # update status
            sound_xiaomi1.status = STARTED
            sound_xiaomi1.play(when=win)  # sync with win flip
        
        # if sound_xiaomi1 is stopping this frame...
        if sound_xiaomi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_xiaomi1.tStartRefresh + 3.0-frameTolerance or sound_xiaomi1.isFinished:
                # keep track of stop time/frame for later
                sound_xiaomi1.tStop = t  # not accounting for scr refresh
                sound_xiaomi1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_xiaomi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_xiaomi1.stopped')
                # update status
                sound_xiaomi1.status = FINISHED
                sound_xiaomi1.stop()
        
        # *text_5* updates
        
        # if text_5 is starting this frame...
        if text_5.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_5.frameNStart = frameN  # exact frame index
            text_5.tStart = t  # local t and not account for scr refresh
            text_5.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_5, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_5.started')
            # update status
            text_5.status = STARTED
            text_5.setAutoDraw(True)
        
        # if text_5 is active this frame...
        if text_5.status == STARTED:
            # update params
            pass
        
        # if text_5 is stopping this frame...
        if text_5.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_5.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_5.tStop = t  # not accounting for scr refresh
                text_5.tStopRefresh = tThisFlipGlobal  # on global time
                text_5.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_5.stopped')
                # update status
                text_5.status = FINISHED
                text_5.setAutoDraw(False)
        
        # *text_6* updates
        
        # if text_6 is starting this frame...
        if text_6.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_6.frameNStart = frameN  # exact frame index
            text_6.tStart = t  # local t and not account for scr refresh
            text_6.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_6, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_6.started')
            # update status
            text_6.status = STARTED
            text_6.setAutoDraw(True)
        
        # if text_6 is active this frame...
        if text_6.status == STARTED:
            # update params
            pass
        
        # if text_6 is stopping this frame...
        if text_6.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_6.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_6.tStop = t  # not accounting for scr refresh
                text_6.tStopRefresh = tThisFlipGlobal  # on global time
                text_6.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_6.stopped')
                # update status
                text_6.status = FINISHED
                text_6.setAutoDraw(False)
        
        # *key_resp_xiaomi1* updates
        waitOnFlip = False
        
        # if key_resp_xiaomi1 is starting this frame...
        if key_resp_xiaomi1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_xiaomi1.frameNStart = frameN  # exact frame index
            key_resp_xiaomi1.tStart = t  # local t and not account for scr refresh
            key_resp_xiaomi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_xiaomi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_xiaomi1.started')
            # update status
            key_resp_xiaomi1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_xiaomi1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_xiaomi1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_xiaomi1 is stopping this frame...
        if key_resp_xiaomi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_xiaomi1.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_xiaomi1.tStop = t  # not accounting for scr refresh
                key_resp_xiaomi1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_xiaomi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_xiaomi1.stopped')
                # update status
                key_resp_xiaomi1.status = FINISHED
                key_resp_xiaomi1.status = FINISHED
        if key_resp_xiaomi1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_xiaomi1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_xiaomi1_allKeys.extend(theseKeys)
            if len(_key_resp_xiaomi1_allKeys):
                key_resp_xiaomi1.keys = _key_resp_xiaomi1_allKeys[0].name  # just the first key pressed
                key_resp_xiaomi1.rt = _key_resp_xiaomi1_allKeys[0].rt
                key_resp_xiaomi1.duration = _key_resp_xiaomi1_allKeys[0].duration
                # was this correct?
                if (key_resp_xiaomi1.keys == str("'right'")) or (key_resp_xiaomi1.keys == "'right'"):
                    key_resp_xiaomi1.corr = 1
                else:
                    key_resp_xiaomi1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_xiaomi1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            xiaomi1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in xiaomi1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "xiaomi1" ---
    for thisComponent in xiaomi1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for xiaomi1
    xiaomi1.tStop = globalClock.getTime(format='float')
    xiaomi1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('xiaomi1.stopped', xiaomi1.tStop)
    sound_xiaomi1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_xiaomi1.keys in ['', [], None]:  # No response was made
        key_resp_xiaomi1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_xiaomi1.corr = 1;  # correct non-response
        else:
           key_resp_xiaomi1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_xiaomi1.keys',key_resp_xiaomi1.keys)
    thisExp.addData('key_resp_xiaomi1.corr', key_resp_xiaomi1.corr)
    if key_resp_xiaomi1.keys != None:  # we had a response
        thisExp.addData('key_resp_xiaomi1.rt', key_resp_xiaomi1.rt)
        thisExp.addData('key_resp_xiaomi1.duration', key_resp_xiaomi1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if xiaomi1.maxDurationReached:
        routineTimer.addTime(-xiaomi1.maxDuration)
    elif xiaomi1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_xiaomi0" ---
    # create an object to store info about Routine trial_xiaomi0
    trial_xiaomi0 = data.Routine(
        name='trial_xiaomi0',
        components=[text_xiaomi0, sound_xiaomi0, text_9, text_10, key_xiaomi0],
    )
    trial_xiaomi0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_xiaomi0.setSound('audio/xiaomi0.wav', secs=3.0, hamming=True)
    sound_xiaomi0.setVolume(1.0, log=False)
    sound_xiaomi0.seek(0)
    # create starting attributes for key_xiaomi0
    key_xiaomi0.keys = []
    key_xiaomi0.rt = []
    _key_xiaomi0_allKeys = []
    # store start times for trial_xiaomi0
    trial_xiaomi0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_xiaomi0.tStart = globalClock.getTime(format='float')
    trial_xiaomi0.status = STARTED
    thisExp.addData('trial_xiaomi0.started', trial_xiaomi0.tStart)
    trial_xiaomi0.maxDuration = None
    # keep track of which components have finished
    trial_xiaomi0Components = trial_xiaomi0.components
    for thisComponent in trial_xiaomi0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_xiaomi0" ---
    trial_xiaomi0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_xiaomi0* updates
        
        # if text_xiaomi0 is starting this frame...
        if text_xiaomi0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_xiaomi0.frameNStart = frameN  # exact frame index
            text_xiaomi0.tStart = t  # local t and not account for scr refresh
            text_xiaomi0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_xiaomi0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_xiaomi0.started')
            # update status
            text_xiaomi0.status = STARTED
            text_xiaomi0.setAutoDraw(True)
        
        # if text_xiaomi0 is active this frame...
        if text_xiaomi0.status == STARTED:
            # update params
            pass
        
        # if text_xiaomi0 is stopping this frame...
        if text_xiaomi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_xiaomi0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_xiaomi0.tStop = t  # not accounting for scr refresh
                text_xiaomi0.tStopRefresh = tThisFlipGlobal  # on global time
                text_xiaomi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_xiaomi0.stopped')
                # update status
                text_xiaomi0.status = FINISHED
                text_xiaomi0.setAutoDraw(False)
        
        # *sound_xiaomi0* updates
        
        # if sound_xiaomi0 is starting this frame...
        if sound_xiaomi0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_xiaomi0.frameNStart = frameN  # exact frame index
            sound_xiaomi0.tStart = t  # local t and not account for scr refresh
            sound_xiaomi0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_xiaomi0.started', tThisFlipGlobal)
            # update status
            sound_xiaomi0.status = STARTED
            sound_xiaomi0.play(when=win)  # sync with win flip
        
        # if sound_xiaomi0 is stopping this frame...
        if sound_xiaomi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_xiaomi0.tStartRefresh + 3.0-frameTolerance or sound_xiaomi0.isFinished:
                # keep track of stop time/frame for later
                sound_xiaomi0.tStop = t  # not accounting for scr refresh
                sound_xiaomi0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_xiaomi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_xiaomi0.stopped')
                # update status
                sound_xiaomi0.status = FINISHED
                sound_xiaomi0.stop()
        
        # *text_9* updates
        
        # if text_9 is starting this frame...
        if text_9.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_9.frameNStart = frameN  # exact frame index
            text_9.tStart = t  # local t and not account for scr refresh
            text_9.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_9, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_9.started')
            # update status
            text_9.status = STARTED
            text_9.setAutoDraw(True)
        
        # if text_9 is active this frame...
        if text_9.status == STARTED:
            # update params
            pass
        
        # if text_9 is stopping this frame...
        if text_9.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_9.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_9.tStop = t  # not accounting for scr refresh
                text_9.tStopRefresh = tThisFlipGlobal  # on global time
                text_9.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_9.stopped')
                # update status
                text_9.status = FINISHED
                text_9.setAutoDraw(False)
        
        # *text_10* updates
        
        # if text_10 is starting this frame...
        if text_10.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_10.frameNStart = frameN  # exact frame index
            text_10.tStart = t  # local t and not account for scr refresh
            text_10.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_10, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_10.started')
            # update status
            text_10.status = STARTED
            text_10.setAutoDraw(True)
        
        # if text_10 is active this frame...
        if text_10.status == STARTED:
            # update params
            pass
        
        # if text_10 is stopping this frame...
        if text_10.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_10.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_10.tStop = t  # not accounting for scr refresh
                text_10.tStopRefresh = tThisFlipGlobal  # on global time
                text_10.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_10.stopped')
                # update status
                text_10.status = FINISHED
                text_10.setAutoDraw(False)
        
        # *key_xiaomi0* updates
        waitOnFlip = False
        
        # if key_xiaomi0 is starting this frame...
        if key_xiaomi0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_xiaomi0.frameNStart = frameN  # exact frame index
            key_xiaomi0.tStart = t  # local t and not account for scr refresh
            key_xiaomi0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_xiaomi0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_xiaomi0.started')
            # update status
            key_xiaomi0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_xiaomi0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_xiaomi0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_xiaomi0 is stopping this frame...
        if key_xiaomi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_xiaomi0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_xiaomi0.tStop = t  # not accounting for scr refresh
                key_xiaomi0.tStopRefresh = tThisFlipGlobal  # on global time
                key_xiaomi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_xiaomi0.stopped')
                # update status
                key_xiaomi0.status = FINISHED
                key_xiaomi0.status = FINISHED
        if key_xiaomi0.status == STARTED and not waitOnFlip:
            theseKeys = key_xiaomi0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_xiaomi0_allKeys.extend(theseKeys)
            if len(_key_xiaomi0_allKeys):
                key_xiaomi0.keys = _key_xiaomi0_allKeys[0].name  # just the first key pressed
                key_xiaomi0.rt = _key_xiaomi0_allKeys[0].rt
                key_xiaomi0.duration = _key_xiaomi0_allKeys[0].duration
                # was this correct?
                if (key_xiaomi0.keys == str("'left'")) or (key_xiaomi0.keys == "'left'"):
                    key_xiaomi0.corr = 1
                else:
                    key_xiaomi0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_xiaomi0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_xiaomi0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_xiaomi0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_xiaomi0" ---
    for thisComponent in trial_xiaomi0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_xiaomi0
    trial_xiaomi0.tStop = globalClock.getTime(format='float')
    trial_xiaomi0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_xiaomi0.stopped', trial_xiaomi0.tStop)
    sound_xiaomi0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_xiaomi0.keys in ['', [], None]:  # No response was made
        key_xiaomi0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_xiaomi0.corr = 1;  # correct non-response
        else:
           key_xiaomi0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_xiaomi0.keys',key_xiaomi0.keys)
    thisExp.addData('key_xiaomi0.corr', key_xiaomi0.corr)
    if key_xiaomi0.keys != None:  # we had a response
        thisExp.addData('key_xiaomi0.rt', key_xiaomi0.rt)
        thisExp.addData('key_xiaomi0.duration', key_xiaomi0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_xiaomi0.maxDurationReached:
        routineTimer.addTime(-trial_xiaomi0.maxDuration)
    elif trial_xiaomi0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "introductions_2" ---
    # create an object to store info about Routine introductions_2
    introductions_2 = data.Routine(
        name='introductions_2',
        components=[instructions2, key_resp_ins],
    )
    introductions_2.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    # create starting attributes for key_resp_ins
    key_resp_ins.keys = []
    key_resp_ins.rt = []
    _key_resp_ins_allKeys = []
    # store start times for introductions_2
    introductions_2.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    introductions_2.tStart = globalClock.getTime(format='float')
    introductions_2.status = STARTED
    thisExp.addData('introductions_2.started', introductions_2.tStart)
    introductions_2.maxDuration = None
    # keep track of which components have finished
    introductions_2Components = introductions_2.components
    for thisComponent in introductions_2.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "introductions_2" ---
    introductions_2.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 999.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *instructions2* updates
        
        # if instructions2 is starting this frame...
        if instructions2.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            instructions2.frameNStart = frameN  # exact frame index
            instructions2.tStart = t  # local t and not account for scr refresh
            instructions2.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(instructions2, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'instructions2.started')
            # update status
            instructions2.status = STARTED
            instructions2.setAutoDraw(True)
        
        # if instructions2 is active this frame...
        if instructions2.status == STARTED:
            # update params
            pass
        
        # if instructions2 is stopping this frame...
        if instructions2.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > instructions2.tStartRefresh + 999-frameTolerance:
                # keep track of stop time/frame for later
                instructions2.tStop = t  # not accounting for scr refresh
                instructions2.tStopRefresh = tThisFlipGlobal  # on global time
                instructions2.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'instructions2.stopped')
                # update status
                instructions2.status = FINISHED
                instructions2.setAutoDraw(False)
        
        # *key_resp_ins* updates
        waitOnFlip = False
        
        # if key_resp_ins is starting this frame...
        if key_resp_ins.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_ins.frameNStart = frameN  # exact frame index
            key_resp_ins.tStart = t  # local t and not account for scr refresh
            key_resp_ins.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_ins, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_ins.started')
            # update status
            key_resp_ins.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_ins.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_ins.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_ins is stopping this frame...
        if key_resp_ins.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_ins.tStartRefresh + 999-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_ins.tStop = t  # not accounting for scr refresh
                key_resp_ins.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_ins.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_ins.stopped')
                # update status
                key_resp_ins.status = FINISHED
                key_resp_ins.status = FINISHED
        if key_resp_ins.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_ins.getKeys(keyList=['space'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_ins_allKeys.extend(theseKeys)
            if len(_key_resp_ins_allKeys):
                key_resp_ins.keys = _key_resp_ins_allKeys[0].name  # just the first key pressed
                key_resp_ins.rt = _key_resp_ins_allKeys[0].rt
                key_resp_ins.duration = _key_resp_ins_allKeys[0].duration
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            introductions_2.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in introductions_2.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "introductions_2" ---
    for thisComponent in introductions_2.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for introductions_2
    introductions_2.tStop = globalClock.getTime(format='float')
    introductions_2.tStopRefresh = tThisFlipGlobal
    thisExp.addData('introductions_2.stopped', introductions_2.tStop)
    # check responses
    if key_resp_ins.keys in ['', [], None]:  # No response was made
        key_resp_ins.keys = None
    thisExp.addData('key_resp_ins.keys',key_resp_ins.keys)
    if key_resp_ins.keys != None:  # we had a response
        thisExp.addData('key_resp_ins.rt', key_resp_ins.rt)
        thisExp.addData('key_resp_ins.duration', key_resp_ins.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if introductions_2.maxDurationReached:
        routineTimer.addTime(-introductions_2.maxDuration)
    elif introductions_2.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-999.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_zhuozi" ---
    # create an object to store info about Routine trial_zhuozi
    trial_zhuozi = data.Routine(
        name='trial_zhuozi',
        components=[text_zhuozi, sound_zhuozi, text_7, text_8, key_resp_zhuozi],
    )
    trial_zhuozi.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_zhuozi.setSound('audio/zhuozi.wav', secs=2.4, hamming=True)
    sound_zhuozi.setVolume(1.0, log=False)
    sound_zhuozi.seek(0)
    # create starting attributes for key_resp_zhuozi
    key_resp_zhuozi.keys = []
    key_resp_zhuozi.rt = []
    _key_resp_zhuozi_allKeys = []
    # store start times for trial_zhuozi
    trial_zhuozi.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_zhuozi.tStart = globalClock.getTime(format='float')
    trial_zhuozi.status = STARTED
    thisExp.addData('trial_zhuozi.started', trial_zhuozi.tStart)
    trial_zhuozi.maxDuration = None
    # keep track of which components have finished
    trial_zhuoziComponents = trial_zhuozi.components
    for thisComponent in trial_zhuozi.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_zhuozi" ---
    trial_zhuozi.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.4:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_zhuozi* updates
        
        # if text_zhuozi is starting this frame...
        if text_zhuozi.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_zhuozi.frameNStart = frameN  # exact frame index
            text_zhuozi.tStart = t  # local t and not account for scr refresh
            text_zhuozi.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_zhuozi, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_zhuozi.started')
            # update status
            text_zhuozi.status = STARTED
            text_zhuozi.setAutoDraw(True)
        
        # if text_zhuozi is active this frame...
        if text_zhuozi.status == STARTED:
            # update params
            pass
        
        # if text_zhuozi is stopping this frame...
        if text_zhuozi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_zhuozi.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_zhuozi.tStop = t  # not accounting for scr refresh
                text_zhuozi.tStopRefresh = tThisFlipGlobal  # on global time
                text_zhuozi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_zhuozi.stopped')
                # update status
                text_zhuozi.status = FINISHED
                text_zhuozi.setAutoDraw(False)
        
        # *sound_zhuozi* updates
        
        # if sound_zhuozi is starting this frame...
        if sound_zhuozi.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_zhuozi.frameNStart = frameN  # exact frame index
            sound_zhuozi.tStart = t  # local t and not account for scr refresh
            sound_zhuozi.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_zhuozi.started', tThisFlipGlobal)
            # update status
            sound_zhuozi.status = STARTED
            sound_zhuozi.play(when=win)  # sync with win flip
        
        # if sound_zhuozi is stopping this frame...
        if sound_zhuozi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_zhuozi.tStartRefresh + 2.4-frameTolerance or sound_zhuozi.isFinished:
                # keep track of stop time/frame for later
                sound_zhuozi.tStop = t  # not accounting for scr refresh
                sound_zhuozi.tStopRefresh = tThisFlipGlobal  # on global time
                sound_zhuozi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_zhuozi.stopped')
                # update status
                sound_zhuozi.status = FINISHED
                sound_zhuozi.stop()
        
        # *text_7* updates
        
        # if text_7 is starting this frame...
        if text_7.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_7.frameNStart = frameN  # exact frame index
            text_7.tStart = t  # local t and not account for scr refresh
            text_7.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_7, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_7.started')
            # update status
            text_7.status = STARTED
            text_7.setAutoDraw(True)
        
        # if text_7 is active this frame...
        if text_7.status == STARTED:
            # update params
            pass
        
        # if text_7 is stopping this frame...
        if text_7.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_7.tStartRefresh + 3.4-frameTolerance:
                # keep track of stop time/frame for later
                text_7.tStop = t  # not accounting for scr refresh
                text_7.tStopRefresh = tThisFlipGlobal  # on global time
                text_7.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_7.stopped')
                # update status
                text_7.status = FINISHED
                text_7.setAutoDraw(False)
        
        # *text_8* updates
        
        # if text_8 is starting this frame...
        if text_8.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            text_8.frameNStart = frameN  # exact frame index
            text_8.tStart = t  # local t and not account for scr refresh
            text_8.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_8, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_8.started')
            # update status
            text_8.status = STARTED
            text_8.setAutoDraw(True)
        
        # if text_8 is active this frame...
        if text_8.status == STARTED:
            # update params
            pass
        
        # if text_8 is stopping this frame...
        if text_8.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_8.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_8.tStop = t  # not accounting for scr refresh
                text_8.tStopRefresh = tThisFlipGlobal  # on global time
                text_8.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_8.stopped')
                # update status
                text_8.status = FINISHED
                text_8.setAutoDraw(False)
        
        # *key_resp_zhuozi* updates
        waitOnFlip = False
        
        # if key_resp_zhuozi is starting this frame...
        if key_resp_zhuozi.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            key_resp_zhuozi.frameNStart = frameN  # exact frame index
            key_resp_zhuozi.tStart = t  # local t and not account for scr refresh
            key_resp_zhuozi.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_zhuozi, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_zhuozi.started')
            # update status
            key_resp_zhuozi.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_zhuozi.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_zhuozi.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_zhuozi is stopping this frame...
        if key_resp_zhuozi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_zhuozi.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_zhuozi.tStop = t  # not accounting for scr refresh
                key_resp_zhuozi.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_zhuozi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_zhuozi.stopped')
                # update status
                key_resp_zhuozi.status = FINISHED
                key_resp_zhuozi.status = FINISHED
        if key_resp_zhuozi.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_zhuozi.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_zhuozi_allKeys.extend(theseKeys)
            if len(_key_resp_zhuozi_allKeys):
                key_resp_zhuozi.keys = _key_resp_zhuozi_allKeys[0].name  # just the first key pressed
                key_resp_zhuozi.rt = _key_resp_zhuozi_allKeys[0].rt
                key_resp_zhuozi.duration = _key_resp_zhuozi_allKeys[0].duration
                # was this correct?
                if (key_resp_zhuozi.keys == str("'left'")) or (key_resp_zhuozi.keys == "'left'"):
                    key_resp_zhuozi.corr = 1
                else:
                    key_resp_zhuozi.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_zhuozi]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_zhuozi.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_zhuozi.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_zhuozi" ---
    for thisComponent in trial_zhuozi.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_zhuozi
    trial_zhuozi.tStop = globalClock.getTime(format='float')
    trial_zhuozi.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_zhuozi.stopped', trial_zhuozi.tStop)
    sound_zhuozi.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_zhuozi.keys in ['', [], None]:  # No response was made
        key_resp_zhuozi.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_zhuozi.corr = 1;  # correct non-response
        else:
           key_resp_zhuozi.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_zhuozi.keys',key_resp_zhuozi.keys)
    thisExp.addData('key_resp_zhuozi.corr', key_resp_zhuozi.corr)
    if key_resp_zhuozi.keys != None:  # we had a response
        thisExp.addData('key_resp_zhuozi.rt', key_resp_zhuozi.rt)
        thisExp.addData('key_resp_zhuozi.duration', key_resp_zhuozi.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_zhuozi.maxDurationReached:
        routineTimer.addTime(-trial_zhuozi.maxDuration)
    elif trial_zhuozi.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.400000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_qingshu0" ---
    # create an object to store info about Routine trial_qingshu0
    trial_qingshu0 = data.Routine(
        name='trial_qingshu0',
        components=[text_qingshu0, sound_qingshu0, text_11, text_12, key_resp_2qingshu0],
    )
    trial_qingshu0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_qingshu0.setSound('audio/qingshu0.wav', secs=2.6, hamming=True)
    sound_qingshu0.setVolume(1.0, log=False)
    sound_qingshu0.seek(0)
    # create starting attributes for key_resp_2qingshu0
    key_resp_2qingshu0.keys = []
    key_resp_2qingshu0.rt = []
    _key_resp_2qingshu0_allKeys = []
    # store start times for trial_qingshu0
    trial_qingshu0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_qingshu0.tStart = globalClock.getTime(format='float')
    trial_qingshu0.status = STARTED
    thisExp.addData('trial_qingshu0.started', trial_qingshu0.tStart)
    trial_qingshu0.maxDuration = None
    # keep track of which components have finished
    trial_qingshu0Components = trial_qingshu0.components
    for thisComponent in trial_qingshu0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_qingshu0" ---
    trial_qingshu0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.6:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_qingshu0* updates
        
        # if text_qingshu0 is starting this frame...
        if text_qingshu0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_qingshu0.frameNStart = frameN  # exact frame index
            text_qingshu0.tStart = t  # local t and not account for scr refresh
            text_qingshu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_qingshu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_qingshu0.started')
            # update status
            text_qingshu0.status = STARTED
            text_qingshu0.setAutoDraw(True)
        
        # if text_qingshu0 is active this frame...
        if text_qingshu0.status == STARTED:
            # update params
            pass
        
        # if text_qingshu0 is stopping this frame...
        if text_qingshu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_qingshu0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_qingshu0.tStop = t  # not accounting for scr refresh
                text_qingshu0.tStopRefresh = tThisFlipGlobal  # on global time
                text_qingshu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_qingshu0.stopped')
                # update status
                text_qingshu0.status = FINISHED
                text_qingshu0.setAutoDraw(False)
        
        # *sound_qingshu0* updates
        
        # if sound_qingshu0 is starting this frame...
        if sound_qingshu0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_qingshu0.frameNStart = frameN  # exact frame index
            sound_qingshu0.tStart = t  # local t and not account for scr refresh
            sound_qingshu0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_qingshu0.started', tThisFlipGlobal)
            # update status
            sound_qingshu0.status = STARTED
            sound_qingshu0.play(when=win)  # sync with win flip
        
        # if sound_qingshu0 is stopping this frame...
        if sound_qingshu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_qingshu0.tStartRefresh + 2.6-frameTolerance or sound_qingshu0.isFinished:
                # keep track of stop time/frame for later
                sound_qingshu0.tStop = t  # not accounting for scr refresh
                sound_qingshu0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_qingshu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_qingshu0.stopped')
                # update status
                sound_qingshu0.status = FINISHED
                sound_qingshu0.stop()
        
        # *text_11* updates
        
        # if text_11 is starting this frame...
        if text_11.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_11.frameNStart = frameN  # exact frame index
            text_11.tStart = t  # local t and not account for scr refresh
            text_11.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_11, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_11.started')
            # update status
            text_11.status = STARTED
            text_11.setAutoDraw(True)
        
        # if text_11 is active this frame...
        if text_11.status == STARTED:
            # update params
            pass
        
        # if text_11 is stopping this frame...
        if text_11.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_11.tStartRefresh + 3.6-frameTolerance:
                # keep track of stop time/frame for later
                text_11.tStop = t  # not accounting for scr refresh
                text_11.tStopRefresh = tThisFlipGlobal  # on global time
                text_11.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_11.stopped')
                # update status
                text_11.status = FINISHED
                text_11.setAutoDraw(False)
        
        # *text_12* updates
        
        # if text_12 is starting this frame...
        if text_12.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            text_12.frameNStart = frameN  # exact frame index
            text_12.tStart = t  # local t and not account for scr refresh
            text_12.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_12, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_12.started')
            # update status
            text_12.status = STARTED
            text_12.setAutoDraw(True)
        
        # if text_12 is active this frame...
        if text_12.status == STARTED:
            # update params
            pass
        
        # if text_12 is stopping this frame...
        if text_12.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_12.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_12.tStop = t  # not accounting for scr refresh
                text_12.tStopRefresh = tThisFlipGlobal  # on global time
                text_12.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_12.stopped')
                # update status
                text_12.status = FINISHED
                text_12.setAutoDraw(False)
        
        # *key_resp_2qingshu0* updates
        waitOnFlip = False
        
        # if key_resp_2qingshu0 is starting this frame...
        if key_resp_2qingshu0.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            key_resp_2qingshu0.frameNStart = frameN  # exact frame index
            key_resp_2qingshu0.tStart = t  # local t and not account for scr refresh
            key_resp_2qingshu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_2qingshu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_2qingshu0.started')
            # update status
            key_resp_2qingshu0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_2qingshu0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_2qingshu0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_2qingshu0 is stopping this frame...
        if key_resp_2qingshu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_2qingshu0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_2qingshu0.tStop = t  # not accounting for scr refresh
                key_resp_2qingshu0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_2qingshu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_2qingshu0.stopped')
                # update status
                key_resp_2qingshu0.status = FINISHED
                key_resp_2qingshu0.status = FINISHED
        if key_resp_2qingshu0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_2qingshu0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_2qingshu0_allKeys.extend(theseKeys)
            if len(_key_resp_2qingshu0_allKeys):
                key_resp_2qingshu0.keys = _key_resp_2qingshu0_allKeys[0].name  # just the first key pressed
                key_resp_2qingshu0.rt = _key_resp_2qingshu0_allKeys[0].rt
                key_resp_2qingshu0.duration = _key_resp_2qingshu0_allKeys[0].duration
                # was this correct?
                if (key_resp_2qingshu0.keys == str("'left'")) or (key_resp_2qingshu0.keys == "'left'"):
                    key_resp_2qingshu0.corr = 1
                else:
                    key_resp_2qingshu0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_qingshu0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_qingshu0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_qingshu0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_qingshu0" ---
    for thisComponent in trial_qingshu0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_qingshu0
    trial_qingshu0.tStop = globalClock.getTime(format='float')
    trial_qingshu0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_qingshu0.stopped', trial_qingshu0.tStop)
    sound_qingshu0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_2qingshu0.keys in ['', [], None]:  # No response was made
        key_resp_2qingshu0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_2qingshu0.corr = 1;  # correct non-response
        else:
           key_resp_2qingshu0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_2qingshu0.keys',key_resp_2qingshu0.keys)
    thisExp.addData('key_resp_2qingshu0.corr', key_resp_2qingshu0.corr)
    if key_resp_2qingshu0.keys != None:  # we had a response
        thisExp.addData('key_resp_2qingshu0.rt', key_resp_2qingshu0.rt)
        thisExp.addData('key_resp_2qingshu0.duration', key_resp_2qingshu0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_qingshu0.maxDurationReached:
        routineTimer.addTime(-trial_qingshu0.maxDuration)
    elif trial_qingshu0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.600000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_caoyuan" ---
    # create an object to store info about Routine trial_caoyuan
    trial_caoyuan = data.Routine(
        name='trial_caoyuan',
        components=[caoyuan, sound_caoyuan, text_161, text_162, key_resp_caoyuan],
    )
    trial_caoyuan.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_caoyuan.setSound('audio/caoyuan.wav', secs=2.6, hamming=True)
    sound_caoyuan.setVolume(1.0, log=False)
    sound_caoyuan.seek(0)
    # create starting attributes for key_resp_caoyuan
    key_resp_caoyuan.keys = []
    key_resp_caoyuan.rt = []
    _key_resp_caoyuan_allKeys = []
    # store start times for trial_caoyuan
    trial_caoyuan.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_caoyuan.tStart = globalClock.getTime(format='float')
    trial_caoyuan.status = STARTED
    thisExp.addData('trial_caoyuan.started', trial_caoyuan.tStart)
    trial_caoyuan.maxDuration = None
    # keep track of which components have finished
    trial_caoyuanComponents = trial_caoyuan.components
    for thisComponent in trial_caoyuan.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_caoyuan" ---
    trial_caoyuan.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.6:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *caoyuan* updates
        
        # if caoyuan is starting this frame...
        if caoyuan.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            caoyuan.frameNStart = frameN  # exact frame index
            caoyuan.tStart = t  # local t and not account for scr refresh
            caoyuan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(caoyuan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'caoyuan.started')
            # update status
            caoyuan.status = STARTED
            caoyuan.setAutoDraw(True)
        
        # if caoyuan is active this frame...
        if caoyuan.status == STARTED:
            # update params
            pass
        
        # if caoyuan is stopping this frame...
        if caoyuan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > caoyuan.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                caoyuan.tStop = t  # not accounting for scr refresh
                caoyuan.tStopRefresh = tThisFlipGlobal  # on global time
                caoyuan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'caoyuan.stopped')
                # update status
                caoyuan.status = FINISHED
                caoyuan.setAutoDraw(False)
        
        # *sound_caoyuan* updates
        
        # if sound_caoyuan is starting this frame...
        if sound_caoyuan.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_caoyuan.frameNStart = frameN  # exact frame index
            sound_caoyuan.tStart = t  # local t and not account for scr refresh
            sound_caoyuan.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_caoyuan.started', tThisFlipGlobal)
            # update status
            sound_caoyuan.status = STARTED
            sound_caoyuan.play(when=win)  # sync with win flip
        
        # if sound_caoyuan is stopping this frame...
        if sound_caoyuan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_caoyuan.tStartRefresh + 2.6-frameTolerance or sound_caoyuan.isFinished:
                # keep track of stop time/frame for later
                sound_caoyuan.tStop = t  # not accounting for scr refresh
                sound_caoyuan.tStopRefresh = tThisFlipGlobal  # on global time
                sound_caoyuan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_caoyuan.stopped')
                # update status
                sound_caoyuan.status = FINISHED
                sound_caoyuan.stop()
        
        # *text_161* updates
        
        # if text_161 is starting this frame...
        if text_161.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_161.frameNStart = frameN  # exact frame index
            text_161.tStart = t  # local t and not account for scr refresh
            text_161.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_161, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_161.started')
            # update status
            text_161.status = STARTED
            text_161.setAutoDraw(True)
        
        # if text_161 is active this frame...
        if text_161.status == STARTED:
            # update params
            pass
        
        # if text_161 is stopping this frame...
        if text_161.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_161.tStartRefresh + 3.6-frameTolerance:
                # keep track of stop time/frame for later
                text_161.tStop = t  # not accounting for scr refresh
                text_161.tStopRefresh = tThisFlipGlobal  # on global time
                text_161.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_161.stopped')
                # update status
                text_161.status = FINISHED
                text_161.setAutoDraw(False)
        
        # *text_162* updates
        
        # if text_162 is starting this frame...
        if text_162.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            text_162.frameNStart = frameN  # exact frame index
            text_162.tStart = t  # local t and not account for scr refresh
            text_162.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_162, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_162.started')
            # update status
            text_162.status = STARTED
            text_162.setAutoDraw(True)
        
        # if text_162 is active this frame...
        if text_162.status == STARTED:
            # update params
            pass
        
        # if text_162 is stopping this frame...
        if text_162.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_162.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_162.tStop = t  # not accounting for scr refresh
                text_162.tStopRefresh = tThisFlipGlobal  # on global time
                text_162.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_162.stopped')
                # update status
                text_162.status = FINISHED
                text_162.setAutoDraw(False)
        
        # *key_resp_caoyuan* updates
        waitOnFlip = False
        
        # if key_resp_caoyuan is starting this frame...
        if key_resp_caoyuan.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            key_resp_caoyuan.frameNStart = frameN  # exact frame index
            key_resp_caoyuan.tStart = t  # local t and not account for scr refresh
            key_resp_caoyuan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_caoyuan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_caoyuan.started')
            # update status
            key_resp_caoyuan.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_caoyuan.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_caoyuan.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_caoyuan is stopping this frame...
        if key_resp_caoyuan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_caoyuan.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_caoyuan.tStop = t  # not accounting for scr refresh
                key_resp_caoyuan.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_caoyuan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_caoyuan.stopped')
                # update status
                key_resp_caoyuan.status = FINISHED
                key_resp_caoyuan.status = FINISHED
        if key_resp_caoyuan.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_caoyuan.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_caoyuan_allKeys.extend(theseKeys)
            if len(_key_resp_caoyuan_allKeys):
                key_resp_caoyuan.keys = _key_resp_caoyuan_allKeys[0].name  # just the first key pressed
                key_resp_caoyuan.rt = _key_resp_caoyuan_allKeys[0].rt
                key_resp_caoyuan.duration = _key_resp_caoyuan_allKeys[0].duration
                # was this correct?
                if (key_resp_caoyuan.keys == str("'left'")) or (key_resp_caoyuan.keys == "'left'"):
                    key_resp_caoyuan.corr = 1
                else:
                    key_resp_caoyuan.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_caoyuan]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_caoyuan.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_caoyuan.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_caoyuan" ---
    for thisComponent in trial_caoyuan.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_caoyuan
    trial_caoyuan.tStop = globalClock.getTime(format='float')
    trial_caoyuan.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_caoyuan.stopped', trial_caoyuan.tStop)
    sound_caoyuan.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_caoyuan.keys in ['', [], None]:  # No response was made
        key_resp_caoyuan.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_caoyuan.corr = 1;  # correct non-response
        else:
           key_resp_caoyuan.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_caoyuan.keys',key_resp_caoyuan.keys)
    thisExp.addData('key_resp_caoyuan.corr', key_resp_caoyuan.corr)
    if key_resp_caoyuan.keys != None:  # we had a response
        thisExp.addData('key_resp_caoyuan.rt', key_resp_caoyuan.rt)
        thisExp.addData('key_resp_caoyuan.duration', key_resp_caoyuan.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_caoyuan.maxDurationReached:
        routineTimer.addTime(-trial_caoyuan.maxDuration)
    elif trial_caoyuan.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.600000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_heimei0" ---
    # create an object to store info about Routine trial_heimei0
    trial_heimei0 = data.Routine(
        name='trial_heimei0',
        components=[text_heimei0, sound_heimei0, text_149, text_150, key_resp_heimei0],
    )
    trial_heimei0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_heimei0.setSound('audio/heimei0.wav', secs=2.5, hamming=True)
    sound_heimei0.setVolume(1.0, log=False)
    sound_heimei0.seek(0)
    # create starting attributes for key_resp_heimei0
    key_resp_heimei0.keys = []
    key_resp_heimei0.rt = []
    _key_resp_heimei0_allKeys = []
    # store start times for trial_heimei0
    trial_heimei0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_heimei0.tStart = globalClock.getTime(format='float')
    trial_heimei0.status = STARTED
    thisExp.addData('trial_heimei0.started', trial_heimei0.tStart)
    trial_heimei0.maxDuration = None
    # keep track of which components have finished
    trial_heimei0Components = trial_heimei0.components
    for thisComponent in trial_heimei0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_heimei0" ---
    trial_heimei0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_heimei0* updates
        
        # if text_heimei0 is starting this frame...
        if text_heimei0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_heimei0.frameNStart = frameN  # exact frame index
            text_heimei0.tStart = t  # local t and not account for scr refresh
            text_heimei0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_heimei0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_heimei0.started')
            # update status
            text_heimei0.status = STARTED
            text_heimei0.setAutoDraw(True)
        
        # if text_heimei0 is active this frame...
        if text_heimei0.status == STARTED:
            # update params
            pass
        
        # if text_heimei0 is stopping this frame...
        if text_heimei0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_heimei0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_heimei0.tStop = t  # not accounting for scr refresh
                text_heimei0.tStopRefresh = tThisFlipGlobal  # on global time
                text_heimei0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_heimei0.stopped')
                # update status
                text_heimei0.status = FINISHED
                text_heimei0.setAutoDraw(False)
        
        # *sound_heimei0* updates
        
        # if sound_heimei0 is starting this frame...
        if sound_heimei0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_heimei0.frameNStart = frameN  # exact frame index
            sound_heimei0.tStart = t  # local t and not account for scr refresh
            sound_heimei0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_heimei0.started', tThisFlipGlobal)
            # update status
            sound_heimei0.status = STARTED
            sound_heimei0.play(when=win)  # sync with win flip
        
        # if sound_heimei0 is stopping this frame...
        if sound_heimei0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_heimei0.tStartRefresh + 2.5-frameTolerance or sound_heimei0.isFinished:
                # keep track of stop time/frame for later
                sound_heimei0.tStop = t  # not accounting for scr refresh
                sound_heimei0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_heimei0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_heimei0.stopped')
                # update status
                sound_heimei0.status = FINISHED
                sound_heimei0.stop()
        
        # *text_149* updates
        
        # if text_149 is starting this frame...
        if text_149.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_149.frameNStart = frameN  # exact frame index
            text_149.tStart = t  # local t and not account for scr refresh
            text_149.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_149, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_149.started')
            # update status
            text_149.status = STARTED
            text_149.setAutoDraw(True)
        
        # if text_149 is active this frame...
        if text_149.status == STARTED:
            # update params
            pass
        
        # if text_149 is stopping this frame...
        if text_149.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_149.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_149.tStop = t  # not accounting for scr refresh
                text_149.tStopRefresh = tThisFlipGlobal  # on global time
                text_149.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_149.stopped')
                # update status
                text_149.status = FINISHED
                text_149.setAutoDraw(False)
        
        # *text_150* updates
        
        # if text_150 is starting this frame...
        if text_150.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_150.frameNStart = frameN  # exact frame index
            text_150.tStart = t  # local t and not account for scr refresh
            text_150.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_150, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_150.started')
            # update status
            text_150.status = STARTED
            text_150.setAutoDraw(True)
        
        # if text_150 is active this frame...
        if text_150.status == STARTED:
            # update params
            pass
        
        # if text_150 is stopping this frame...
        if text_150.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_150.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_150.tStop = t  # not accounting for scr refresh
                text_150.tStopRefresh = tThisFlipGlobal  # on global time
                text_150.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_150.stopped')
                # update status
                text_150.status = FINISHED
                text_150.setAutoDraw(False)
        
        # *key_resp_heimei0* updates
        waitOnFlip = False
        
        # if key_resp_heimei0 is starting this frame...
        if key_resp_heimei0.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_heimei0.frameNStart = frameN  # exact frame index
            key_resp_heimei0.tStart = t  # local t and not account for scr refresh
            key_resp_heimei0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_heimei0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_heimei0.started')
            # update status
            key_resp_heimei0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_heimei0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_heimei0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_heimei0 is stopping this frame...
        if key_resp_heimei0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_heimei0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_heimei0.tStop = t  # not accounting for scr refresh
                key_resp_heimei0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_heimei0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_heimei0.stopped')
                # update status
                key_resp_heimei0.status = FINISHED
                key_resp_heimei0.status = FINISHED
        if key_resp_heimei0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_heimei0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_heimei0_allKeys.extend(theseKeys)
            if len(_key_resp_heimei0_allKeys):
                key_resp_heimei0.keys = _key_resp_heimei0_allKeys[0].name  # just the first key pressed
                key_resp_heimei0.rt = _key_resp_heimei0_allKeys[0].rt
                key_resp_heimei0.duration = _key_resp_heimei0_allKeys[0].duration
                # was this correct?
                if (key_resp_heimei0.keys == str("'left'")) or (key_resp_heimei0.keys == "'left'"):
                    key_resp_heimei0.corr = 1
                else:
                    key_resp_heimei0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_heimei0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_heimei0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_heimei0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_heimei0" ---
    for thisComponent in trial_heimei0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_heimei0
    trial_heimei0.tStop = globalClock.getTime(format='float')
    trial_heimei0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_heimei0.stopped', trial_heimei0.tStop)
    sound_heimei0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_heimei0.keys in ['', [], None]:  # No response was made
        key_resp_heimei0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_heimei0.corr = 1;  # correct non-response
        else:
           key_resp_heimei0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_heimei0.keys',key_resp_heimei0.keys)
    thisExp.addData('key_resp_heimei0.corr', key_resp_heimei0.corr)
    if key_resp_heimei0.keys != None:  # we had a response
        thisExp.addData('key_resp_heimei0.rt', key_resp_heimei0.rt)
        thisExp.addData('key_resp_heimei0.duration', key_resp_heimei0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_heimei0.maxDurationReached:
        routineTimer.addTime(-trial_heimei0.maxDuration)
    elif trial_heimei0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_weicheng1" ---
    # create an object to store info about Routine trial_weicheng1
    trial_weicheng1 = data.Routine(
        name='trial_weicheng1',
        components=[text_weicheng1, sound_weicheng1, text_13, text_14, key_resp_weicheng1],
    )
    trial_weicheng1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_weicheng1.setSound('audio/weicheng1.wav', secs=2.4, hamming=True)
    sound_weicheng1.setVolume(1.0, log=False)
    sound_weicheng1.seek(0)
    # create starting attributes for key_resp_weicheng1
    key_resp_weicheng1.keys = []
    key_resp_weicheng1.rt = []
    _key_resp_weicheng1_allKeys = []
    # store start times for trial_weicheng1
    trial_weicheng1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_weicheng1.tStart = globalClock.getTime(format='float')
    trial_weicheng1.status = STARTED
    thisExp.addData('trial_weicheng1.started', trial_weicheng1.tStart)
    trial_weicheng1.maxDuration = None
    # keep track of which components have finished
    trial_weicheng1Components = trial_weicheng1.components
    for thisComponent in trial_weicheng1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_weicheng1" ---
    trial_weicheng1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.4:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_weicheng1* updates
        
        # if text_weicheng1 is starting this frame...
        if text_weicheng1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_weicheng1.frameNStart = frameN  # exact frame index
            text_weicheng1.tStart = t  # local t and not account for scr refresh
            text_weicheng1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_weicheng1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_weicheng1.started')
            # update status
            text_weicheng1.status = STARTED
            text_weicheng1.setAutoDraw(True)
        
        # if text_weicheng1 is active this frame...
        if text_weicheng1.status == STARTED:
            # update params
            pass
        
        # if text_weicheng1 is stopping this frame...
        if text_weicheng1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_weicheng1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_weicheng1.tStop = t  # not accounting for scr refresh
                text_weicheng1.tStopRefresh = tThisFlipGlobal  # on global time
                text_weicheng1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_weicheng1.stopped')
                # update status
                text_weicheng1.status = FINISHED
                text_weicheng1.setAutoDraw(False)
        
        # *sound_weicheng1* updates
        
        # if sound_weicheng1 is starting this frame...
        if sound_weicheng1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_weicheng1.frameNStart = frameN  # exact frame index
            sound_weicheng1.tStart = t  # local t and not account for scr refresh
            sound_weicheng1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_weicheng1.started', tThisFlipGlobal)
            # update status
            sound_weicheng1.status = STARTED
            sound_weicheng1.play(when=win)  # sync with win flip
        
        # if sound_weicheng1 is stopping this frame...
        if sound_weicheng1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_weicheng1.tStartRefresh + 2.4-frameTolerance or sound_weicheng1.isFinished:
                # keep track of stop time/frame for later
                sound_weicheng1.tStop = t  # not accounting for scr refresh
                sound_weicheng1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_weicheng1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_weicheng1.stopped')
                # update status
                sound_weicheng1.status = FINISHED
                sound_weicheng1.stop()
        
        # *text_13* updates
        
        # if text_13 is starting this frame...
        if text_13.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_13.frameNStart = frameN  # exact frame index
            text_13.tStart = t  # local t and not account for scr refresh
            text_13.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_13, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_13.started')
            # update status
            text_13.status = STARTED
            text_13.setAutoDraw(True)
        
        # if text_13 is active this frame...
        if text_13.status == STARTED:
            # update params
            pass
        
        # if text_13 is stopping this frame...
        if text_13.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_13.tStartRefresh + 3.4-frameTolerance:
                # keep track of stop time/frame for later
                text_13.tStop = t  # not accounting for scr refresh
                text_13.tStopRefresh = tThisFlipGlobal  # on global time
                text_13.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_13.stopped')
                # update status
                text_13.status = FINISHED
                text_13.setAutoDraw(False)
        
        # *text_14* updates
        
        # if text_14 is starting this frame...
        if text_14.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            text_14.frameNStart = frameN  # exact frame index
            text_14.tStart = t  # local t and not account for scr refresh
            text_14.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_14, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_14.started')
            # update status
            text_14.status = STARTED
            text_14.setAutoDraw(True)
        
        # if text_14 is active this frame...
        if text_14.status == STARTED:
            # update params
            pass
        
        # if text_14 is stopping this frame...
        if text_14.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_14.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_14.tStop = t  # not accounting for scr refresh
                text_14.tStopRefresh = tThisFlipGlobal  # on global time
                text_14.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_14.stopped')
                # update status
                text_14.status = FINISHED
                text_14.setAutoDraw(False)
        
        # *key_resp_weicheng1* updates
        waitOnFlip = False
        
        # if key_resp_weicheng1 is starting this frame...
        if key_resp_weicheng1.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            key_resp_weicheng1.frameNStart = frameN  # exact frame index
            key_resp_weicheng1.tStart = t  # local t and not account for scr refresh
            key_resp_weicheng1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_weicheng1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_weicheng1.started')
            # update status
            key_resp_weicheng1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_weicheng1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_weicheng1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_weicheng1 is stopping this frame...
        if key_resp_weicheng1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_weicheng1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_weicheng1.tStop = t  # not accounting for scr refresh
                key_resp_weicheng1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_weicheng1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_weicheng1.stopped')
                # update status
                key_resp_weicheng1.status = FINISHED
                key_resp_weicheng1.status = FINISHED
        if key_resp_weicheng1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_weicheng1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_weicheng1_allKeys.extend(theseKeys)
            if len(_key_resp_weicheng1_allKeys):
                key_resp_weicheng1.keys = _key_resp_weicheng1_allKeys[0].name  # just the first key pressed
                key_resp_weicheng1.rt = _key_resp_weicheng1_allKeys[0].rt
                key_resp_weicheng1.duration = _key_resp_weicheng1_allKeys[0].duration
                # was this correct?
                if (key_resp_weicheng1.keys == str("'right'")) or (key_resp_weicheng1.keys == "'right'"):
                    key_resp_weicheng1.corr = 1
                else:
                    key_resp_weicheng1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_weicheng1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_weicheng1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_weicheng1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_weicheng1" ---
    for thisComponent in trial_weicheng1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_weicheng1
    trial_weicheng1.tStop = globalClock.getTime(format='float')
    trial_weicheng1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_weicheng1.stopped', trial_weicheng1.tStop)
    sound_weicheng1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_weicheng1.keys in ['', [], None]:  # No response was made
        key_resp_weicheng1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_weicheng1.corr = 1;  # correct non-response
        else:
           key_resp_weicheng1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_weicheng1.keys',key_resp_weicheng1.keys)
    thisExp.addData('key_resp_weicheng1.corr', key_resp_weicheng1.corr)
    if key_resp_weicheng1.keys != None:  # we had a response
        thisExp.addData('key_resp_weicheng1.rt', key_resp_weicheng1.rt)
        thisExp.addData('key_resp_weicheng1.duration', key_resp_weicheng1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_weicheng1.maxDurationReached:
        routineTimer.addTime(-trial_weicheng1.maxDuration)
    elif trial_weicheng1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.400000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_hongniu0" ---
    # create an object to store info about Routine trial_hongniu0
    trial_hongniu0 = data.Routine(
        name='trial_hongniu0',
        components=[text_hongniu0, sound_hongniu0, text_15, text_16, key_resp_hongniu0],
    )
    trial_hongniu0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_hongniu0.setSound('audio/hongniu0.wav', secs=2.2, hamming=True)
    sound_hongniu0.setVolume(1.0, log=False)
    sound_hongniu0.seek(0)
    # create starting attributes for key_resp_hongniu0
    key_resp_hongniu0.keys = []
    key_resp_hongniu0.rt = []
    _key_resp_hongniu0_allKeys = []
    # store start times for trial_hongniu0
    trial_hongniu0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_hongniu0.tStart = globalClock.getTime(format='float')
    trial_hongniu0.status = STARTED
    thisExp.addData('trial_hongniu0.started', trial_hongniu0.tStart)
    trial_hongniu0.maxDuration = None
    # keep track of which components have finished
    trial_hongniu0Components = trial_hongniu0.components
    for thisComponent in trial_hongniu0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_hongniu0" ---
    trial_hongniu0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.2:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_hongniu0* updates
        
        # if text_hongniu0 is starting this frame...
        if text_hongniu0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_hongniu0.frameNStart = frameN  # exact frame index
            text_hongniu0.tStart = t  # local t and not account for scr refresh
            text_hongniu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_hongniu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_hongniu0.started')
            # update status
            text_hongniu0.status = STARTED
            text_hongniu0.setAutoDraw(True)
        
        # if text_hongniu0 is active this frame...
        if text_hongniu0.status == STARTED:
            # update params
            pass
        
        # if text_hongniu0 is stopping this frame...
        if text_hongniu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_hongniu0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_hongniu0.tStop = t  # not accounting for scr refresh
                text_hongniu0.tStopRefresh = tThisFlipGlobal  # on global time
                text_hongniu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_hongniu0.stopped')
                # update status
                text_hongniu0.status = FINISHED
                text_hongniu0.setAutoDraw(False)
        
        # *sound_hongniu0* updates
        
        # if sound_hongniu0 is starting this frame...
        if sound_hongniu0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_hongniu0.frameNStart = frameN  # exact frame index
            sound_hongniu0.tStart = t  # local t and not account for scr refresh
            sound_hongniu0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_hongniu0.started', tThisFlipGlobal)
            # update status
            sound_hongniu0.status = STARTED
            sound_hongniu0.play(when=win)  # sync with win flip
        
        # if sound_hongniu0 is stopping this frame...
        if sound_hongniu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_hongniu0.tStartRefresh + 2.2-frameTolerance or sound_hongniu0.isFinished:
                # keep track of stop time/frame for later
                sound_hongniu0.tStop = t  # not accounting for scr refresh
                sound_hongniu0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_hongniu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_hongniu0.stopped')
                # update status
                sound_hongniu0.status = FINISHED
                sound_hongniu0.stop()
        
        # *text_15* updates
        
        # if text_15 is starting this frame...
        if text_15.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_15.frameNStart = frameN  # exact frame index
            text_15.tStart = t  # local t and not account for scr refresh
            text_15.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_15, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_15.started')
            # update status
            text_15.status = STARTED
            text_15.setAutoDraw(True)
        
        # if text_15 is active this frame...
        if text_15.status == STARTED:
            # update params
            pass
        
        # if text_15 is stopping this frame...
        if text_15.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_15.tStartRefresh + 3.2-frameTolerance:
                # keep track of stop time/frame for later
                text_15.tStop = t  # not accounting for scr refresh
                text_15.tStopRefresh = tThisFlipGlobal  # on global time
                text_15.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_15.stopped')
                # update status
                text_15.status = FINISHED
                text_15.setAutoDraw(False)
        
        # *text_16* updates
        
        # if text_16 is starting this frame...
        if text_16.status == NOT_STARTED and tThisFlip >= 6.2-frameTolerance:
            # keep track of start time/frame for later
            text_16.frameNStart = frameN  # exact frame index
            text_16.tStart = t  # local t and not account for scr refresh
            text_16.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_16, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_16.started')
            # update status
            text_16.status = STARTED
            text_16.setAutoDraw(True)
        
        # if text_16 is active this frame...
        if text_16.status == STARTED:
            # update params
            pass
        
        # if text_16 is stopping this frame...
        if text_16.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_16.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_16.tStop = t  # not accounting for scr refresh
                text_16.tStopRefresh = tThisFlipGlobal  # on global time
                text_16.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_16.stopped')
                # update status
                text_16.status = FINISHED
                text_16.setAutoDraw(False)
        
        # *key_resp_hongniu0* updates
        waitOnFlip = False
        
        # if key_resp_hongniu0 is starting this frame...
        if key_resp_hongniu0.status == NOT_STARTED and tThisFlip >= 6.2-frameTolerance:
            # keep track of start time/frame for later
            key_resp_hongniu0.frameNStart = frameN  # exact frame index
            key_resp_hongniu0.tStart = t  # local t and not account for scr refresh
            key_resp_hongniu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_hongniu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_hongniu0.started')
            # update status
            key_resp_hongniu0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_hongniu0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_hongniu0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_hongniu0 is stopping this frame...
        if key_resp_hongniu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_hongniu0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_hongniu0.tStop = t  # not accounting for scr refresh
                key_resp_hongniu0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_hongniu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_hongniu0.stopped')
                # update status
                key_resp_hongniu0.status = FINISHED
                key_resp_hongniu0.status = FINISHED
        if key_resp_hongniu0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_hongniu0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_hongniu0_allKeys.extend(theseKeys)
            if len(_key_resp_hongniu0_allKeys):
                key_resp_hongniu0.keys = _key_resp_hongniu0_allKeys[0].name  # just the first key pressed
                key_resp_hongniu0.rt = _key_resp_hongniu0_allKeys[0].rt
                key_resp_hongniu0.duration = _key_resp_hongniu0_allKeys[0].duration
                # was this correct?
                if (key_resp_hongniu0.keys == str("'left'")) or (key_resp_hongniu0.keys == "'left'"):
                    key_resp_hongniu0.corr = 1
                else:
                    key_resp_hongniu0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_hongniu0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_hongniu0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_hongniu0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_hongniu0" ---
    for thisComponent in trial_hongniu0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_hongniu0
    trial_hongniu0.tStop = globalClock.getTime(format='float')
    trial_hongniu0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_hongniu0.stopped', trial_hongniu0.tStop)
    sound_hongniu0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_hongniu0.keys in ['', [], None]:  # No response was made
        key_resp_hongniu0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_hongniu0.corr = 1;  # correct non-response
        else:
           key_resp_hongniu0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_hongniu0.keys',key_resp_hongniu0.keys)
    thisExp.addData('key_resp_hongniu0.corr', key_resp_hongniu0.corr)
    if key_resp_hongniu0.keys != None:  # we had a response
        thisExp.addData('key_resp_hongniu0.rt', key_resp_hongniu0.rt)
        thisExp.addData('key_resp_hongniu0.duration', key_resp_hongniu0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_hongniu0.maxDurationReached:
        routineTimer.addTime(-trial_hongniu0.maxDuration)
    elif trial_hongniu0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.200000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shiren" ---
    # create an object to store info about Routine trial_shiren
    trial_shiren = data.Routine(
        name='trial_shiren',
        components=[text_shiren, sound_shiren, text_19, text_20, key_resp_shiren],
    )
    trial_shiren.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shiren.setSound('audio/shiren.wav', secs=2.2, hamming=True)
    sound_shiren.setVolume(1.0, log=False)
    sound_shiren.seek(0)
    # create starting attributes for key_resp_shiren
    key_resp_shiren.keys = []
    key_resp_shiren.rt = []
    _key_resp_shiren_allKeys = []
    # store start times for trial_shiren
    trial_shiren.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shiren.tStart = globalClock.getTime(format='float')
    trial_shiren.status = STARTED
    thisExp.addData('trial_shiren.started', trial_shiren.tStart)
    trial_shiren.maxDuration = None
    # keep track of which components have finished
    trial_shirenComponents = trial_shiren.components
    for thisComponent in trial_shiren.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shiren" ---
    trial_shiren.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.2:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_shiren* updates
        
        # if text_shiren is starting this frame...
        if text_shiren.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_shiren.frameNStart = frameN  # exact frame index
            text_shiren.tStart = t  # local t and not account for scr refresh
            text_shiren.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_shiren, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_shiren.started')
            # update status
            text_shiren.status = STARTED
            text_shiren.setAutoDraw(True)
        
        # if text_shiren is active this frame...
        if text_shiren.status == STARTED:
            # update params
            pass
        
        # if text_shiren is stopping this frame...
        if text_shiren.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_shiren.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_shiren.tStop = t  # not accounting for scr refresh
                text_shiren.tStopRefresh = tThisFlipGlobal  # on global time
                text_shiren.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_shiren.stopped')
                # update status
                text_shiren.status = FINISHED
                text_shiren.setAutoDraw(False)
        
        # *sound_shiren* updates
        
        # if sound_shiren is starting this frame...
        if sound_shiren.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_shiren.frameNStart = frameN  # exact frame index
            sound_shiren.tStart = t  # local t and not account for scr refresh
            sound_shiren.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shiren.started', tThisFlipGlobal)
            # update status
            sound_shiren.status = STARTED
            sound_shiren.play(when=win)  # sync with win flip
        
        # if sound_shiren is stopping this frame...
        if sound_shiren.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shiren.tStartRefresh + 2.2-frameTolerance or sound_shiren.isFinished:
                # keep track of stop time/frame for later
                sound_shiren.tStop = t  # not accounting for scr refresh
                sound_shiren.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shiren.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shiren.stopped')
                # update status
                sound_shiren.status = FINISHED
                sound_shiren.stop()
        
        # *text_19* updates
        
        # if text_19 is starting this frame...
        if text_19.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_19.frameNStart = frameN  # exact frame index
            text_19.tStart = t  # local t and not account for scr refresh
            text_19.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_19, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_19.started')
            # update status
            text_19.status = STARTED
            text_19.setAutoDraw(True)
        
        # if text_19 is active this frame...
        if text_19.status == STARTED:
            # update params
            pass
        
        # if text_19 is stopping this frame...
        if text_19.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_19.tStartRefresh + 3.2-frameTolerance:
                # keep track of stop time/frame for later
                text_19.tStop = t  # not accounting for scr refresh
                text_19.tStopRefresh = tThisFlipGlobal  # on global time
                text_19.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_19.stopped')
                # update status
                text_19.status = FINISHED
                text_19.setAutoDraw(False)
        
        # *text_20* updates
        
        # if text_20 is starting this frame...
        if text_20.status == NOT_STARTED and tThisFlip >= 6.2-frameTolerance:
            # keep track of start time/frame for later
            text_20.frameNStart = frameN  # exact frame index
            text_20.tStart = t  # local t and not account for scr refresh
            text_20.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_20, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_20.started')
            # update status
            text_20.status = STARTED
            text_20.setAutoDraw(True)
        
        # if text_20 is active this frame...
        if text_20.status == STARTED:
            # update params
            pass
        
        # if text_20 is stopping this frame...
        if text_20.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_20.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_20.tStop = t  # not accounting for scr refresh
                text_20.tStopRefresh = tThisFlipGlobal  # on global time
                text_20.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_20.stopped')
                # update status
                text_20.status = FINISHED
                text_20.setAutoDraw(False)
        
        # *key_resp_shiren* updates
        waitOnFlip = False
        
        # if key_resp_shiren is starting this frame...
        if key_resp_shiren.status == NOT_STARTED and tThisFlip >= 6.2-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shiren.frameNStart = frameN  # exact frame index
            key_resp_shiren.tStart = t  # local t and not account for scr refresh
            key_resp_shiren.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shiren, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shiren.started')
            # update status
            key_resp_shiren.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shiren.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shiren.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shiren is stopping this frame...
        if key_resp_shiren.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shiren.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shiren.tStop = t  # not accounting for scr refresh
                key_resp_shiren.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shiren.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shiren.stopped')
                # update status
                key_resp_shiren.status = FINISHED
                key_resp_shiren.status = FINISHED
        if key_resp_shiren.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shiren.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shiren_allKeys.extend(theseKeys)
            if len(_key_resp_shiren_allKeys):
                key_resp_shiren.keys = _key_resp_shiren_allKeys[0].name  # just the first key pressed
                key_resp_shiren.rt = _key_resp_shiren_allKeys[0].rt
                key_resp_shiren.duration = _key_resp_shiren_allKeys[0].duration
                # was this correct?
                if (key_resp_shiren.keys == str("'left'")) or (key_resp_shiren.keys == "'left'"):
                    key_resp_shiren.corr = 1
                else:
                    key_resp_shiren.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shiren]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shiren.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shiren.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shiren" ---
    for thisComponent in trial_shiren.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shiren
    trial_shiren.tStop = globalClock.getTime(format='float')
    trial_shiren.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shiren.stopped', trial_shiren.tStop)
    sound_shiren.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shiren.keys in ['', [], None]:  # No response was made
        key_resp_shiren.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_shiren.corr = 1;  # correct non-response
        else:
           key_resp_shiren.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shiren.keys',key_resp_shiren.keys)
    thisExp.addData('key_resp_shiren.corr', key_resp_shiren.corr)
    if key_resp_shiren.keys != None:  # we had a response
        thisExp.addData('key_resp_shiren.rt', key_resp_shiren.rt)
        thisExp.addData('key_resp_shiren.duration', key_resp_shiren.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shiren.maxDurationReached:
        routineTimer.addTime(-trial_shiren.maxDuration)
    elif trial_shiren.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.200000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_hongqi1" ---
    # create an object to store info about Routine trial_hongqi1
    trial_hongqi1 = data.Routine(
        name='trial_hongqi1',
        components=[text_hongqi1, sound_hongqi1, text_1ruodian1, text_18, key_resp_hongqi1],
    )
    trial_hongqi1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_hongqi1.setSound('audio/hongqi1.wav', secs=2.4, hamming=True)
    sound_hongqi1.setVolume(1.0, log=False)
    sound_hongqi1.seek(0)
    # create starting attributes for key_resp_hongqi1
    key_resp_hongqi1.keys = []
    key_resp_hongqi1.rt = []
    _key_resp_hongqi1_allKeys = []
    # store start times for trial_hongqi1
    trial_hongqi1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_hongqi1.tStart = globalClock.getTime(format='float')
    trial_hongqi1.status = STARTED
    thisExp.addData('trial_hongqi1.started', trial_hongqi1.tStart)
    trial_hongqi1.maxDuration = None
    # keep track of which components have finished
    trial_hongqi1Components = trial_hongqi1.components
    for thisComponent in trial_hongqi1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_hongqi1" ---
    trial_hongqi1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.4:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_hongqi1* updates
        
        # if text_hongqi1 is starting this frame...
        if text_hongqi1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_hongqi1.frameNStart = frameN  # exact frame index
            text_hongqi1.tStart = t  # local t and not account for scr refresh
            text_hongqi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_hongqi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_hongqi1.started')
            # update status
            text_hongqi1.status = STARTED
            text_hongqi1.setAutoDraw(True)
        
        # if text_hongqi1 is active this frame...
        if text_hongqi1.status == STARTED:
            # update params
            pass
        
        # if text_hongqi1 is stopping this frame...
        if text_hongqi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_hongqi1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_hongqi1.tStop = t  # not accounting for scr refresh
                text_hongqi1.tStopRefresh = tThisFlipGlobal  # on global time
                text_hongqi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_hongqi1.stopped')
                # update status
                text_hongqi1.status = FINISHED
                text_hongqi1.setAutoDraw(False)
        
        # *sound_hongqi1* updates
        
        # if sound_hongqi1 is starting this frame...
        if sound_hongqi1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_hongqi1.frameNStart = frameN  # exact frame index
            sound_hongqi1.tStart = t  # local t and not account for scr refresh
            sound_hongqi1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_hongqi1.started', tThisFlipGlobal)
            # update status
            sound_hongqi1.status = STARTED
            sound_hongqi1.play(when=win)  # sync with win flip
        
        # if sound_hongqi1 is stopping this frame...
        if sound_hongqi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_hongqi1.tStartRefresh + 2.4-frameTolerance or sound_hongqi1.isFinished:
                # keep track of stop time/frame for later
                sound_hongqi1.tStop = t  # not accounting for scr refresh
                sound_hongqi1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_hongqi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_hongqi1.stopped')
                # update status
                sound_hongqi1.status = FINISHED
                sound_hongqi1.stop()
        
        # *text_1ruodian1* updates
        
        # if text_1ruodian1 is starting this frame...
        if text_1ruodian1.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_1ruodian1.frameNStart = frameN  # exact frame index
            text_1ruodian1.tStart = t  # local t and not account for scr refresh
            text_1ruodian1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_1ruodian1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_1ruodian1.started')
            # update status
            text_1ruodian1.status = STARTED
            text_1ruodian1.setAutoDraw(True)
        
        # if text_1ruodian1 is active this frame...
        if text_1ruodian1.status == STARTED:
            # update params
            pass
        
        # if text_1ruodian1 is stopping this frame...
        if text_1ruodian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_1ruodian1.tStartRefresh + 3.4-frameTolerance:
                # keep track of stop time/frame for later
                text_1ruodian1.tStop = t  # not accounting for scr refresh
                text_1ruodian1.tStopRefresh = tThisFlipGlobal  # on global time
                text_1ruodian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_1ruodian1.stopped')
                # update status
                text_1ruodian1.status = FINISHED
                text_1ruodian1.setAutoDraw(False)
        
        # *text_18* updates
        
        # if text_18 is starting this frame...
        if text_18.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            text_18.frameNStart = frameN  # exact frame index
            text_18.tStart = t  # local t and not account for scr refresh
            text_18.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_18, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_18.started')
            # update status
            text_18.status = STARTED
            text_18.setAutoDraw(True)
        
        # if text_18 is active this frame...
        if text_18.status == STARTED:
            # update params
            pass
        
        # if text_18 is stopping this frame...
        if text_18.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_18.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_18.tStop = t  # not accounting for scr refresh
                text_18.tStopRefresh = tThisFlipGlobal  # on global time
                text_18.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_18.stopped')
                # update status
                text_18.status = FINISHED
                text_18.setAutoDraw(False)
        
        # *key_resp_hongqi1* updates
        waitOnFlip = False
        
        # if key_resp_hongqi1 is starting this frame...
        if key_resp_hongqi1.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            key_resp_hongqi1.frameNStart = frameN  # exact frame index
            key_resp_hongqi1.tStart = t  # local t and not account for scr refresh
            key_resp_hongqi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_hongqi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_hongqi1.started')
            # update status
            key_resp_hongqi1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_hongqi1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_hongqi1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_hongqi1 is stopping this frame...
        if key_resp_hongqi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_hongqi1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_hongqi1.tStop = t  # not accounting for scr refresh
                key_resp_hongqi1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_hongqi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_hongqi1.stopped')
                # update status
                key_resp_hongqi1.status = FINISHED
                key_resp_hongqi1.status = FINISHED
        if key_resp_hongqi1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_hongqi1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_hongqi1_allKeys.extend(theseKeys)
            if len(_key_resp_hongqi1_allKeys):
                key_resp_hongqi1.keys = _key_resp_hongqi1_allKeys[0].name  # just the first key pressed
                key_resp_hongqi1.rt = _key_resp_hongqi1_allKeys[0].rt
                key_resp_hongqi1.duration = _key_resp_hongqi1_allKeys[0].duration
                # was this correct?
                if (key_resp_hongqi1.keys == str("'right'")) or (key_resp_hongqi1.keys == "'right'"):
                    key_resp_hongqi1.corr = 1
                else:
                    key_resp_hongqi1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_hongqi1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_hongqi1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_hongqi1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_hongqi1" ---
    for thisComponent in trial_hongqi1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_hongqi1
    trial_hongqi1.tStop = globalClock.getTime(format='float')
    trial_hongqi1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_hongqi1.stopped', trial_hongqi1.tStop)
    sound_hongqi1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_hongqi1.keys in ['', [], None]:  # No response was made
        key_resp_hongqi1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_hongqi1.corr = 1;  # correct non-response
        else:
           key_resp_hongqi1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_hongqi1.keys',key_resp_hongqi1.keys)
    thisExp.addData('key_resp_hongqi1.corr', key_resp_hongqi1.corr)
    if key_resp_hongqi1.keys != None:  # we had a response
        thisExp.addData('key_resp_hongqi1.rt', key_resp_hongqi1.rt)
        thisExp.addData('key_resp_hongqi1.duration', key_resp_hongqi1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_hongqi1.maxDurationReached:
        routineTimer.addTime(-trial_hongqi1.maxDuration)
    elif trial_hongqi1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.400000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_diannao" ---
    # create an object to store info about Routine trial_diannao
    trial_diannao = data.Routine(
        name='trial_diannao',
        components=[text_diannao, sound_diannao, text_21, text_22, key_resp_diannao],
    )
    trial_diannao.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_diannao.setSound('audio/diannao.wav', secs=2.1, hamming=True)
    sound_diannao.setVolume(1.0, log=False)
    sound_diannao.seek(0)
    # create starting attributes for key_resp_diannao
    key_resp_diannao.keys = []
    key_resp_diannao.rt = []
    _key_resp_diannao_allKeys = []
    # store start times for trial_diannao
    trial_diannao.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_diannao.tStart = globalClock.getTime(format='float')
    trial_diannao.status = STARTED
    thisExp.addData('trial_diannao.started', trial_diannao.tStart)
    trial_diannao.maxDuration = None
    # keep track of which components have finished
    trial_diannaoComponents = trial_diannao.components
    for thisComponent in trial_diannao.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_diannao" ---
    trial_diannao.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.1:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_diannao* updates
        
        # if text_diannao is starting this frame...
        if text_diannao.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_diannao.frameNStart = frameN  # exact frame index
            text_diannao.tStart = t  # local t and not account for scr refresh
            text_diannao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_diannao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_diannao.started')
            # update status
            text_diannao.status = STARTED
            text_diannao.setAutoDraw(True)
        
        # if text_diannao is active this frame...
        if text_diannao.status == STARTED:
            # update params
            pass
        
        # if text_diannao is stopping this frame...
        if text_diannao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_diannao.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_diannao.tStop = t  # not accounting for scr refresh
                text_diannao.tStopRefresh = tThisFlipGlobal  # on global time
                text_diannao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_diannao.stopped')
                # update status
                text_diannao.status = FINISHED
                text_diannao.setAutoDraw(False)
        
        # *sound_diannao* updates
        
        # if sound_diannao is starting this frame...
        if sound_diannao.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_diannao.frameNStart = frameN  # exact frame index
            sound_diannao.tStart = t  # local t and not account for scr refresh
            sound_diannao.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_diannao.started', tThisFlipGlobal)
            # update status
            sound_diannao.status = STARTED
            sound_diannao.play(when=win)  # sync with win flip
        
        # if sound_diannao is stopping this frame...
        if sound_diannao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_diannao.tStartRefresh + 2.1-frameTolerance or sound_diannao.isFinished:
                # keep track of stop time/frame for later
                sound_diannao.tStop = t  # not accounting for scr refresh
                sound_diannao.tStopRefresh = tThisFlipGlobal  # on global time
                sound_diannao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_diannao.stopped')
                # update status
                sound_diannao.status = FINISHED
                sound_diannao.stop()
        
        # *text_21* updates
        
        # if text_21 is starting this frame...
        if text_21.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_21.frameNStart = frameN  # exact frame index
            text_21.tStart = t  # local t and not account for scr refresh
            text_21.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_21, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_21.started')
            # update status
            text_21.status = STARTED
            text_21.setAutoDraw(True)
        
        # if text_21 is active this frame...
        if text_21.status == STARTED:
            # update params
            pass
        
        # if text_21 is stopping this frame...
        if text_21.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_21.tStartRefresh + 3.1-frameTolerance:
                # keep track of stop time/frame for later
                text_21.tStop = t  # not accounting for scr refresh
                text_21.tStopRefresh = tThisFlipGlobal  # on global time
                text_21.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_21.stopped')
                # update status
                text_21.status = FINISHED
                text_21.setAutoDraw(False)
        
        # *text_22* updates
        
        # if text_22 is starting this frame...
        if text_22.status == NOT_STARTED and tThisFlip >= 6.1-frameTolerance:
            # keep track of start time/frame for later
            text_22.frameNStart = frameN  # exact frame index
            text_22.tStart = t  # local t and not account for scr refresh
            text_22.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_22, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_22.started')
            # update status
            text_22.status = STARTED
            text_22.setAutoDraw(True)
        
        # if text_22 is active this frame...
        if text_22.status == STARTED:
            # update params
            pass
        
        # if text_22 is stopping this frame...
        if text_22.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_22.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_22.tStop = t  # not accounting for scr refresh
                text_22.tStopRefresh = tThisFlipGlobal  # on global time
                text_22.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_22.stopped')
                # update status
                text_22.status = FINISHED
                text_22.setAutoDraw(False)
        
        # *key_resp_diannao* updates
        waitOnFlip = False
        
        # if key_resp_diannao is starting this frame...
        if key_resp_diannao.status == NOT_STARTED and tThisFlip >= 6.1-frameTolerance:
            # keep track of start time/frame for later
            key_resp_diannao.frameNStart = frameN  # exact frame index
            key_resp_diannao.tStart = t  # local t and not account for scr refresh
            key_resp_diannao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_diannao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_diannao.started')
            # update status
            key_resp_diannao.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_diannao.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_diannao.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_diannao is stopping this frame...
        if key_resp_diannao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_diannao.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_diannao.tStop = t  # not accounting for scr refresh
                key_resp_diannao.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_diannao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_diannao.stopped')
                # update status
                key_resp_diannao.status = FINISHED
                key_resp_diannao.status = FINISHED
        if key_resp_diannao.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_diannao.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_diannao_allKeys.extend(theseKeys)
            if len(_key_resp_diannao_allKeys):
                key_resp_diannao.keys = _key_resp_diannao_allKeys[0].name  # just the first key pressed
                key_resp_diannao.rt = _key_resp_diannao_allKeys[0].rt
                key_resp_diannao.duration = _key_resp_diannao_allKeys[0].duration
                # was this correct?
                if (key_resp_diannao.keys == str("'left'")) or (key_resp_diannao.keys == "'left'"):
                    key_resp_diannao.corr = 1
                else:
                    key_resp_diannao.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_diannao]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_diannao.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_diannao.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_diannao" ---
    for thisComponent in trial_diannao.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_diannao
    trial_diannao.tStop = globalClock.getTime(format='float')
    trial_diannao.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_diannao.stopped', trial_diannao.tStop)
    sound_diannao.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_diannao.keys in ['', [], None]:  # No response was made
        key_resp_diannao.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_diannao.corr = 1;  # correct non-response
        else:
           key_resp_diannao.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_diannao.keys',key_resp_diannao.keys)
    thisExp.addData('key_resp_diannao.corr', key_resp_diannao.corr)
    if key_resp_diannao.keys != None:  # we had a response
        thisExp.addData('key_resp_diannao.rt', key_resp_diannao.rt)
        thisExp.addData('key_resp_diannao.duration', key_resp_diannao.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_diannao.maxDurationReached:
        routineTimer.addTime(-trial_diannao.maxDuration)
    elif trial_diannao.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.100000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_qingshu1" ---
    # create an object to store info about Routine trial_qingshu1
    trial_qingshu1 = data.Routine(
        name='trial_qingshu1',
        components=[text_qingshu1, sound_qingshu1, text_23, text_24, key_resp_3],
    )
    trial_qingshu1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_qingshu1.setSound('audio/qingshu1.wav', secs=2.5, hamming=True)
    sound_qingshu1.setVolume(1.0, log=False)
    sound_qingshu1.seek(0)
    # create starting attributes for key_resp_3
    key_resp_3.keys = []
    key_resp_3.rt = []
    _key_resp_3_allKeys = []
    # store start times for trial_qingshu1
    trial_qingshu1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_qingshu1.tStart = globalClock.getTime(format='float')
    trial_qingshu1.status = STARTED
    thisExp.addData('trial_qingshu1.started', trial_qingshu1.tStart)
    trial_qingshu1.maxDuration = None
    # keep track of which components have finished
    trial_qingshu1Components = trial_qingshu1.components
    for thisComponent in trial_qingshu1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_qingshu1" ---
    trial_qingshu1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_qingshu1* updates
        
        # if text_qingshu1 is starting this frame...
        if text_qingshu1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_qingshu1.frameNStart = frameN  # exact frame index
            text_qingshu1.tStart = t  # local t and not account for scr refresh
            text_qingshu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_qingshu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_qingshu1.started')
            # update status
            text_qingshu1.status = STARTED
            text_qingshu1.setAutoDraw(True)
        
        # if text_qingshu1 is active this frame...
        if text_qingshu1.status == STARTED:
            # update params
            pass
        
        # if text_qingshu1 is stopping this frame...
        if text_qingshu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_qingshu1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_qingshu1.tStop = t  # not accounting for scr refresh
                text_qingshu1.tStopRefresh = tThisFlipGlobal  # on global time
                text_qingshu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_qingshu1.stopped')
                # update status
                text_qingshu1.status = FINISHED
                text_qingshu1.setAutoDraw(False)
        
        # *sound_qingshu1* updates
        
        # if sound_qingshu1 is starting this frame...
        if sound_qingshu1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_qingshu1.frameNStart = frameN  # exact frame index
            sound_qingshu1.tStart = t  # local t and not account for scr refresh
            sound_qingshu1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_qingshu1.started', tThisFlipGlobal)
            # update status
            sound_qingshu1.status = STARTED
            sound_qingshu1.play(when=win)  # sync with win flip
        
        # if sound_qingshu1 is stopping this frame...
        if sound_qingshu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_qingshu1.tStartRefresh + 2.5-frameTolerance or sound_qingshu1.isFinished:
                # keep track of stop time/frame for later
                sound_qingshu1.tStop = t  # not accounting for scr refresh
                sound_qingshu1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_qingshu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_qingshu1.stopped')
                # update status
                sound_qingshu1.status = FINISHED
                sound_qingshu1.stop()
        
        # *text_23* updates
        
        # if text_23 is starting this frame...
        if text_23.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_23.frameNStart = frameN  # exact frame index
            text_23.tStart = t  # local t and not account for scr refresh
            text_23.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_23, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_23.started')
            # update status
            text_23.status = STARTED
            text_23.setAutoDraw(True)
        
        # if text_23 is active this frame...
        if text_23.status == STARTED:
            # update params
            pass
        
        # if text_23 is stopping this frame...
        if text_23.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_23.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_23.tStop = t  # not accounting for scr refresh
                text_23.tStopRefresh = tThisFlipGlobal  # on global time
                text_23.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_23.stopped')
                # update status
                text_23.status = FINISHED
                text_23.setAutoDraw(False)
        
        # *text_24* updates
        
        # if text_24 is starting this frame...
        if text_24.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_24.frameNStart = frameN  # exact frame index
            text_24.tStart = t  # local t and not account for scr refresh
            text_24.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_24, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_24.started')
            # update status
            text_24.status = STARTED
            text_24.setAutoDraw(True)
        
        # if text_24 is active this frame...
        if text_24.status == STARTED:
            # update params
            pass
        
        # if text_24 is stopping this frame...
        if text_24.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_24.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_24.tStop = t  # not accounting for scr refresh
                text_24.tStopRefresh = tThisFlipGlobal  # on global time
                text_24.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_24.stopped')
                # update status
                text_24.status = FINISHED
                text_24.setAutoDraw(False)
        
        # *key_resp_3* updates
        waitOnFlip = False
        
        # if key_resp_3 is starting this frame...
        if key_resp_3.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_3.frameNStart = frameN  # exact frame index
            key_resp_3.tStart = t  # local t and not account for scr refresh
            key_resp_3.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_3, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_3.started')
            # update status
            key_resp_3.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_3.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_3.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_3 is stopping this frame...
        if key_resp_3.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_3.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_3.tStop = t  # not accounting for scr refresh
                key_resp_3.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_3.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_3.stopped')
                # update status
                key_resp_3.status = FINISHED
                key_resp_3.status = FINISHED
        if key_resp_3.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_3.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_3_allKeys.extend(theseKeys)
            if len(_key_resp_3_allKeys):
                key_resp_3.keys = _key_resp_3_allKeys[0].name  # just the first key pressed
                key_resp_3.rt = _key_resp_3_allKeys[0].rt
                key_resp_3.duration = _key_resp_3_allKeys[0].duration
                # was this correct?
                if (key_resp_3.keys == str("'right'")) or (key_resp_3.keys == "'right'"):
                    key_resp_3.corr = 1
                else:
                    key_resp_3.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_qingshu1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_qingshu1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_qingshu1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_qingshu1" ---
    for thisComponent in trial_qingshu1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_qingshu1
    trial_qingshu1.tStop = globalClock.getTime(format='float')
    trial_qingshu1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_qingshu1.stopped', trial_qingshu1.tStop)
    sound_qingshu1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_3.keys in ['', [], None]:  # No response was made
        key_resp_3.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_3.corr = 1;  # correct non-response
        else:
           key_resp_3.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_3.keys',key_resp_3.keys)
    thisExp.addData('key_resp_3.corr', key_resp_3.corr)
    if key_resp_3.keys != None:  # we had a response
        thisExp.addData('key_resp_3.rt', key_resp_3.rt)
        thisExp.addData('key_resp_3.duration', key_resp_3.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_qingshu1.maxDurationReached:
        routineTimer.addTime(-trial_qingshu1.maxDuration)
    elif trial_qingshu1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_niunai" ---
    # create an object to store info about Routine trial_niunai
    trial_niunai = data.Routine(
        name='trial_niunai',
        components=[text_niunai, sound_niunai, text_25, text_26, key_resp_niunai],
    )
    trial_niunai.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_niunai.setSound('audio/niunai.wav', secs=2.4, hamming=True)
    sound_niunai.setVolume(1.0, log=False)
    sound_niunai.seek(0)
    # create starting attributes for key_resp_niunai
    key_resp_niunai.keys = []
    key_resp_niunai.rt = []
    _key_resp_niunai_allKeys = []
    # store start times for trial_niunai
    trial_niunai.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_niunai.tStart = globalClock.getTime(format='float')
    trial_niunai.status = STARTED
    thisExp.addData('trial_niunai.started', trial_niunai.tStart)
    trial_niunai.maxDuration = None
    # keep track of which components have finished
    trial_niunaiComponents = trial_niunai.components
    for thisComponent in trial_niunai.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_niunai" ---
    trial_niunai.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.4:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_niunai* updates
        
        # if text_niunai is starting this frame...
        if text_niunai.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_niunai.frameNStart = frameN  # exact frame index
            text_niunai.tStart = t  # local t and not account for scr refresh
            text_niunai.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_niunai, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_niunai.started')
            # update status
            text_niunai.status = STARTED
            text_niunai.setAutoDraw(True)
        
        # if text_niunai is active this frame...
        if text_niunai.status == STARTED:
            # update params
            pass
        
        # if text_niunai is stopping this frame...
        if text_niunai.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_niunai.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_niunai.tStop = t  # not accounting for scr refresh
                text_niunai.tStopRefresh = tThisFlipGlobal  # on global time
                text_niunai.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_niunai.stopped')
                # update status
                text_niunai.status = FINISHED
                text_niunai.setAutoDraw(False)
        
        # *sound_niunai* updates
        
        # if sound_niunai is starting this frame...
        if sound_niunai.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_niunai.frameNStart = frameN  # exact frame index
            sound_niunai.tStart = t  # local t and not account for scr refresh
            sound_niunai.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_niunai.started', tThisFlipGlobal)
            # update status
            sound_niunai.status = STARTED
            sound_niunai.play(when=win)  # sync with win flip
        
        # if sound_niunai is stopping this frame...
        if sound_niunai.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_niunai.tStartRefresh + 2.4-frameTolerance or sound_niunai.isFinished:
                # keep track of stop time/frame for later
                sound_niunai.tStop = t  # not accounting for scr refresh
                sound_niunai.tStopRefresh = tThisFlipGlobal  # on global time
                sound_niunai.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_niunai.stopped')
                # update status
                sound_niunai.status = FINISHED
                sound_niunai.stop()
        
        # *text_25* updates
        
        # if text_25 is starting this frame...
        if text_25.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_25.frameNStart = frameN  # exact frame index
            text_25.tStart = t  # local t and not account for scr refresh
            text_25.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_25, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_25.started')
            # update status
            text_25.status = STARTED
            text_25.setAutoDraw(True)
        
        # if text_25 is active this frame...
        if text_25.status == STARTED:
            # update params
            pass
        
        # if text_25 is stopping this frame...
        if text_25.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_25.tStartRefresh + 3.4-frameTolerance:
                # keep track of stop time/frame for later
                text_25.tStop = t  # not accounting for scr refresh
                text_25.tStopRefresh = tThisFlipGlobal  # on global time
                text_25.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_25.stopped')
                # update status
                text_25.status = FINISHED
                text_25.setAutoDraw(False)
        
        # *text_26* updates
        
        # if text_26 is starting this frame...
        if text_26.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            text_26.frameNStart = frameN  # exact frame index
            text_26.tStart = t  # local t and not account for scr refresh
            text_26.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_26, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_26.started')
            # update status
            text_26.status = STARTED
            text_26.setAutoDraw(True)
        
        # if text_26 is active this frame...
        if text_26.status == STARTED:
            # update params
            pass
        
        # if text_26 is stopping this frame...
        if text_26.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_26.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_26.tStop = t  # not accounting for scr refresh
                text_26.tStopRefresh = tThisFlipGlobal  # on global time
                text_26.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_26.stopped')
                # update status
                text_26.status = FINISHED
                text_26.setAutoDraw(False)
        
        # *key_resp_niunai* updates
        waitOnFlip = False
        
        # if key_resp_niunai is starting this frame...
        if key_resp_niunai.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            key_resp_niunai.frameNStart = frameN  # exact frame index
            key_resp_niunai.tStart = t  # local t and not account for scr refresh
            key_resp_niunai.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_niunai, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_niunai.started')
            # update status
            key_resp_niunai.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_niunai.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_niunai.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_niunai is stopping this frame...
        if key_resp_niunai.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_niunai.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_niunai.tStop = t  # not accounting for scr refresh
                key_resp_niunai.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_niunai.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_niunai.stopped')
                # update status
                key_resp_niunai.status = FINISHED
                key_resp_niunai.status = FINISHED
        if key_resp_niunai.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_niunai.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_niunai_allKeys.extend(theseKeys)
            if len(_key_resp_niunai_allKeys):
                key_resp_niunai.keys = _key_resp_niunai_allKeys[0].name  # just the first key pressed
                key_resp_niunai.rt = _key_resp_niunai_allKeys[0].rt
                key_resp_niunai.duration = _key_resp_niunai_allKeys[0].duration
                # was this correct?
                if (key_resp_niunai.keys == str("'left'")) or (key_resp_niunai.keys == "'left'"):
                    key_resp_niunai.corr = 1
                else:
                    key_resp_niunai.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_niunai]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_niunai.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_niunai.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_niunai" ---
    for thisComponent in trial_niunai.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_niunai
    trial_niunai.tStop = globalClock.getTime(format='float')
    trial_niunai.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_niunai.stopped', trial_niunai.tStop)
    sound_niunai.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_niunai.keys in ['', [], None]:  # No response was made
        key_resp_niunai.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_niunai.corr = 1;  # correct non-response
        else:
           key_resp_niunai.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_niunai.keys',key_resp_niunai.keys)
    thisExp.addData('key_resp_niunai.corr', key_resp_niunai.corr)
    if key_resp_niunai.keys != None:  # we had a response
        thisExp.addData('key_resp_niunai.rt', key_resp_niunai.rt)
        thisExp.addData('key_resp_niunai.duration', key_resp_niunai.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_niunai.maxDurationReached:
        routineTimer.addTime(-trial_niunai.maxDuration)
    elif trial_niunai.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.400000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baoma1" ---
    # create an object to store info about Routine trial_baoma1
    trial_baoma1 = data.Routine(
        name='trial_baoma1',
        components=[text_baoma1, sound_baoma1, text_27, text_28, key_resp_baoma1],
    )
    trial_baoma1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baoma1.setSound('audio/baoma1.wav', secs=2.5, hamming=True)
    sound_baoma1.setVolume(1.0, log=False)
    sound_baoma1.seek(0)
    # create starting attributes for key_resp_baoma1
    key_resp_baoma1.keys = []
    key_resp_baoma1.rt = []
    _key_resp_baoma1_allKeys = []
    # store start times for trial_baoma1
    trial_baoma1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baoma1.tStart = globalClock.getTime(format='float')
    trial_baoma1.status = STARTED
    thisExp.addData('trial_baoma1.started', trial_baoma1.tStart)
    trial_baoma1.maxDuration = None
    # keep track of which components have finished
    trial_baoma1Components = trial_baoma1.components
    for thisComponent in trial_baoma1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baoma1" ---
    trial_baoma1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baoma1* updates
        
        # if text_baoma1 is starting this frame...
        if text_baoma1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baoma1.frameNStart = frameN  # exact frame index
            text_baoma1.tStart = t  # local t and not account for scr refresh
            text_baoma1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baoma1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baoma1.started')
            # update status
            text_baoma1.status = STARTED
            text_baoma1.setAutoDraw(True)
        
        # if text_baoma1 is active this frame...
        if text_baoma1.status == STARTED:
            # update params
            pass
        
        # if text_baoma1 is stopping this frame...
        if text_baoma1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baoma1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_baoma1.tStop = t  # not accounting for scr refresh
                text_baoma1.tStopRefresh = tThisFlipGlobal  # on global time
                text_baoma1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baoma1.stopped')
                # update status
                text_baoma1.status = FINISHED
                text_baoma1.setAutoDraw(False)
        
        # *sound_baoma1* updates
        
        # if sound_baoma1 is starting this frame...
        if sound_baoma1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_baoma1.frameNStart = frameN  # exact frame index
            sound_baoma1.tStart = t  # local t and not account for scr refresh
            sound_baoma1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baoma1.started', tThisFlipGlobal)
            # update status
            sound_baoma1.status = STARTED
            sound_baoma1.play(when=win)  # sync with win flip
        
        # if sound_baoma1 is stopping this frame...
        if sound_baoma1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baoma1.tStartRefresh + 2.5-frameTolerance or sound_baoma1.isFinished:
                # keep track of stop time/frame for later
                sound_baoma1.tStop = t  # not accounting for scr refresh
                sound_baoma1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baoma1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baoma1.stopped')
                # update status
                sound_baoma1.status = FINISHED
                sound_baoma1.stop()
        
        # *text_27* updates
        
        # if text_27 is starting this frame...
        if text_27.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_27.frameNStart = frameN  # exact frame index
            text_27.tStart = t  # local t and not account for scr refresh
            text_27.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_27, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_27.started')
            # update status
            text_27.status = STARTED
            text_27.setAutoDraw(True)
        
        # if text_27 is active this frame...
        if text_27.status == STARTED:
            # update params
            pass
        
        # if text_27 is stopping this frame...
        if text_27.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_27.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_27.tStop = t  # not accounting for scr refresh
                text_27.tStopRefresh = tThisFlipGlobal  # on global time
                text_27.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_27.stopped')
                # update status
                text_27.status = FINISHED
                text_27.setAutoDraw(False)
        
        # *text_28* updates
        
        # if text_28 is starting this frame...
        if text_28.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_28.frameNStart = frameN  # exact frame index
            text_28.tStart = t  # local t and not account for scr refresh
            text_28.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_28, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_28.started')
            # update status
            text_28.status = STARTED
            text_28.setAutoDraw(True)
        
        # if text_28 is active this frame...
        if text_28.status == STARTED:
            # update params
            pass
        
        # if text_28 is stopping this frame...
        if text_28.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_28.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_28.tStop = t  # not accounting for scr refresh
                text_28.tStopRefresh = tThisFlipGlobal  # on global time
                text_28.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_28.stopped')
                # update status
                text_28.status = FINISHED
                text_28.setAutoDraw(False)
        
        # *key_resp_baoma1* updates
        waitOnFlip = False
        
        # if key_resp_baoma1 is starting this frame...
        if key_resp_baoma1.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baoma1.frameNStart = frameN  # exact frame index
            key_resp_baoma1.tStart = t  # local t and not account for scr refresh
            key_resp_baoma1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baoma1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baoma1.started')
            # update status
            key_resp_baoma1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baoma1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baoma1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baoma1 is stopping this frame...
        if key_resp_baoma1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baoma1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baoma1.tStop = t  # not accounting for scr refresh
                key_resp_baoma1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baoma1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baoma1.stopped')
                # update status
                key_resp_baoma1.status = FINISHED
                key_resp_baoma1.status = FINISHED
        if key_resp_baoma1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baoma1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baoma1_allKeys.extend(theseKeys)
            if len(_key_resp_baoma1_allKeys):
                key_resp_baoma1.keys = _key_resp_baoma1_allKeys[0].name  # just the first key pressed
                key_resp_baoma1.rt = _key_resp_baoma1_allKeys[0].rt
                key_resp_baoma1.duration = _key_resp_baoma1_allKeys[0].duration
                # was this correct?
                if (key_resp_baoma1.keys == str("'right'")) or (key_resp_baoma1.keys == "'right'"):
                    key_resp_baoma1.corr = 1
                else:
                    key_resp_baoma1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baoma1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baoma1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baoma1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baoma1" ---
    for thisComponent in trial_baoma1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baoma1
    trial_baoma1.tStop = globalClock.getTime(format='float')
    trial_baoma1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baoma1.stopped', trial_baoma1.tStop)
    sound_baoma1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baoma1.keys in ['', [], None]:  # No response was made
        key_resp_baoma1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_baoma1.corr = 1;  # correct non-response
        else:
           key_resp_baoma1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baoma1.keys',key_resp_baoma1.keys)
    thisExp.addData('key_resp_baoma1.corr', key_resp_baoma1.corr)
    if key_resp_baoma1.keys != None:  # we had a response
        thisExp.addData('key_resp_baoma1.rt', key_resp_baoma1.rt)
        thisExp.addData('key_resp_baoma1.duration', key_resp_baoma1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baoma1.maxDurationReached:
        routineTimer.addTime(-trial_baoma1.maxDuration)
    elif trial_baoma1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_jiaofu0" ---
    # create an object to store info about Routine trial_jiaofu0
    trial_jiaofu0 = data.Routine(
        name='trial_jiaofu0',
        components=[text_jiaofu0, sound_jiaofu0, text_29, text_30, key_resp_jiaofu0],
    )
    trial_jiaofu0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_jiaofu0.setSound('audio/jiaofu0.wav', secs=2.6, hamming=True)
    sound_jiaofu0.setVolume(1.0, log=False)
    sound_jiaofu0.seek(0)
    # create starting attributes for key_resp_jiaofu0
    key_resp_jiaofu0.keys = []
    key_resp_jiaofu0.rt = []
    _key_resp_jiaofu0_allKeys = []
    # store start times for trial_jiaofu0
    trial_jiaofu0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_jiaofu0.tStart = globalClock.getTime(format='float')
    trial_jiaofu0.status = STARTED
    thisExp.addData('trial_jiaofu0.started', trial_jiaofu0.tStart)
    trial_jiaofu0.maxDuration = None
    # keep track of which components have finished
    trial_jiaofu0Components = trial_jiaofu0.components
    for thisComponent in trial_jiaofu0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_jiaofu0" ---
    trial_jiaofu0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.6:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_jiaofu0* updates
        
        # if text_jiaofu0 is starting this frame...
        if text_jiaofu0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_jiaofu0.frameNStart = frameN  # exact frame index
            text_jiaofu0.tStart = t  # local t and not account for scr refresh
            text_jiaofu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_jiaofu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_jiaofu0.started')
            # update status
            text_jiaofu0.status = STARTED
            text_jiaofu0.setAutoDraw(True)
        
        # if text_jiaofu0 is active this frame...
        if text_jiaofu0.status == STARTED:
            # update params
            pass
        
        # if text_jiaofu0 is stopping this frame...
        if text_jiaofu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_jiaofu0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_jiaofu0.tStop = t  # not accounting for scr refresh
                text_jiaofu0.tStopRefresh = tThisFlipGlobal  # on global time
                text_jiaofu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_jiaofu0.stopped')
                # update status
                text_jiaofu0.status = FINISHED
                text_jiaofu0.setAutoDraw(False)
        
        # *sound_jiaofu0* updates
        
        # if sound_jiaofu0 is starting this frame...
        if sound_jiaofu0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_jiaofu0.frameNStart = frameN  # exact frame index
            sound_jiaofu0.tStart = t  # local t and not account for scr refresh
            sound_jiaofu0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_jiaofu0.started', tThisFlipGlobal)
            # update status
            sound_jiaofu0.status = STARTED
            sound_jiaofu0.play(when=win)  # sync with win flip
        
        # if sound_jiaofu0 is stopping this frame...
        if sound_jiaofu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_jiaofu0.tStartRefresh + 2.6-frameTolerance or sound_jiaofu0.isFinished:
                # keep track of stop time/frame for later
                sound_jiaofu0.tStop = t  # not accounting for scr refresh
                sound_jiaofu0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_jiaofu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_jiaofu0.stopped')
                # update status
                sound_jiaofu0.status = FINISHED
                sound_jiaofu0.stop()
        
        # *text_29* updates
        
        # if text_29 is starting this frame...
        if text_29.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_29.frameNStart = frameN  # exact frame index
            text_29.tStart = t  # local t and not account for scr refresh
            text_29.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_29, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_29.started')
            # update status
            text_29.status = STARTED
            text_29.setAutoDraw(True)
        
        # if text_29 is active this frame...
        if text_29.status == STARTED:
            # update params
            pass
        
        # if text_29 is stopping this frame...
        if text_29.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_29.tStartRefresh + 3.6-frameTolerance:
                # keep track of stop time/frame for later
                text_29.tStop = t  # not accounting for scr refresh
                text_29.tStopRefresh = tThisFlipGlobal  # on global time
                text_29.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_29.stopped')
                # update status
                text_29.status = FINISHED
                text_29.setAutoDraw(False)
        
        # *text_30* updates
        
        # if text_30 is starting this frame...
        if text_30.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            text_30.frameNStart = frameN  # exact frame index
            text_30.tStart = t  # local t and not account for scr refresh
            text_30.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_30, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_30.started')
            # update status
            text_30.status = STARTED
            text_30.setAutoDraw(True)
        
        # if text_30 is active this frame...
        if text_30.status == STARTED:
            # update params
            pass
        
        # if text_30 is stopping this frame...
        if text_30.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_30.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_30.tStop = t  # not accounting for scr refresh
                text_30.tStopRefresh = tThisFlipGlobal  # on global time
                text_30.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_30.stopped')
                # update status
                text_30.status = FINISHED
                text_30.setAutoDraw(False)
        
        # *key_resp_jiaofu0* updates
        waitOnFlip = False
        
        # if key_resp_jiaofu0 is starting this frame...
        if key_resp_jiaofu0.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            key_resp_jiaofu0.frameNStart = frameN  # exact frame index
            key_resp_jiaofu0.tStart = t  # local t and not account for scr refresh
            key_resp_jiaofu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_jiaofu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_jiaofu0.started')
            # update status
            key_resp_jiaofu0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_jiaofu0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_jiaofu0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_jiaofu0 is stopping this frame...
        if key_resp_jiaofu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_jiaofu0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_jiaofu0.tStop = t  # not accounting for scr refresh
                key_resp_jiaofu0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_jiaofu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_jiaofu0.stopped')
                # update status
                key_resp_jiaofu0.status = FINISHED
                key_resp_jiaofu0.status = FINISHED
        if key_resp_jiaofu0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_jiaofu0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_jiaofu0_allKeys.extend(theseKeys)
            if len(_key_resp_jiaofu0_allKeys):
                key_resp_jiaofu0.keys = _key_resp_jiaofu0_allKeys[0].name  # just the first key pressed
                key_resp_jiaofu0.rt = _key_resp_jiaofu0_allKeys[0].rt
                key_resp_jiaofu0.duration = _key_resp_jiaofu0_allKeys[0].duration
                # was this correct?
                if (key_resp_jiaofu0.keys == str("'left'")) or (key_resp_jiaofu0.keys == "'left'"):
                    key_resp_jiaofu0.corr = 1
                else:
                    key_resp_jiaofu0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_jiaofu0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_jiaofu0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_jiaofu0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_jiaofu0" ---
    for thisComponent in trial_jiaofu0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_jiaofu0
    trial_jiaofu0.tStop = globalClock.getTime(format='float')
    trial_jiaofu0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_jiaofu0.stopped', trial_jiaofu0.tStop)
    sound_jiaofu0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_jiaofu0.keys in ['', [], None]:  # No response was made
        key_resp_jiaofu0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_jiaofu0.corr = 1;  # correct non-response
        else:
           key_resp_jiaofu0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_jiaofu0.keys',key_resp_jiaofu0.keys)
    thisExp.addData('key_resp_jiaofu0.corr', key_resp_jiaofu0.corr)
    if key_resp_jiaofu0.keys != None:  # we had a response
        thisExp.addData('key_resp_jiaofu0.rt', key_resp_jiaofu0.rt)
        thisExp.addData('key_resp_jiaofu0.duration', key_resp_jiaofu0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_jiaofu0.maxDurationReached:
        routineTimer.addTime(-trial_jiaofu0.maxDuration)
    elif trial_jiaofu0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.600000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_yintian0" ---
    # create an object to store info about Routine trial_yintian0
    trial_yintian0 = data.Routine(
        name='trial_yintian0',
        components=[text_yintian0, sound_yintian0, text_33, text_34, key_resp_yintian0],
    )
    trial_yintian0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_yintian0.setSound('audio/yintian0.wav', secs=2.5, hamming=True)
    sound_yintian0.setVolume(1.0, log=False)
    sound_yintian0.seek(0)
    # create starting attributes for key_resp_yintian0
    key_resp_yintian0.keys = []
    key_resp_yintian0.rt = []
    _key_resp_yintian0_allKeys = []
    # store start times for trial_yintian0
    trial_yintian0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_yintian0.tStart = globalClock.getTime(format='float')
    trial_yintian0.status = STARTED
    thisExp.addData('trial_yintian0.started', trial_yintian0.tStart)
    trial_yintian0.maxDuration = None
    # keep track of which components have finished
    trial_yintian0Components = trial_yintian0.components
    for thisComponent in trial_yintian0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_yintian0" ---
    trial_yintian0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_yintian0* updates
        
        # if text_yintian0 is starting this frame...
        if text_yintian0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_yintian0.frameNStart = frameN  # exact frame index
            text_yintian0.tStart = t  # local t and not account for scr refresh
            text_yintian0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_yintian0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_yintian0.started')
            # update status
            text_yintian0.status = STARTED
            text_yintian0.setAutoDraw(True)
        
        # if text_yintian0 is active this frame...
        if text_yintian0.status == STARTED:
            # update params
            pass
        
        # if text_yintian0 is stopping this frame...
        if text_yintian0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_yintian0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_yintian0.tStop = t  # not accounting for scr refresh
                text_yintian0.tStopRefresh = tThisFlipGlobal  # on global time
                text_yintian0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_yintian0.stopped')
                # update status
                text_yintian0.status = FINISHED
                text_yintian0.setAutoDraw(False)
        
        # *sound_yintian0* updates
        
        # if sound_yintian0 is starting this frame...
        if sound_yintian0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_yintian0.frameNStart = frameN  # exact frame index
            sound_yintian0.tStart = t  # local t and not account for scr refresh
            sound_yintian0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_yintian0.started', tThisFlipGlobal)
            # update status
            sound_yintian0.status = STARTED
            sound_yintian0.play(when=win)  # sync with win flip
        
        # if sound_yintian0 is stopping this frame...
        if sound_yintian0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_yintian0.tStartRefresh + 2.5-frameTolerance or sound_yintian0.isFinished:
                # keep track of stop time/frame for later
                sound_yintian0.tStop = t  # not accounting for scr refresh
                sound_yintian0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_yintian0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_yintian0.stopped')
                # update status
                sound_yintian0.status = FINISHED
                sound_yintian0.stop()
        
        # *text_33* updates
        
        # if text_33 is starting this frame...
        if text_33.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_33.frameNStart = frameN  # exact frame index
            text_33.tStart = t  # local t and not account for scr refresh
            text_33.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_33, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_33.started')
            # update status
            text_33.status = STARTED
            text_33.setAutoDraw(True)
        
        # if text_33 is active this frame...
        if text_33.status == STARTED:
            # update params
            pass
        
        # if text_33 is stopping this frame...
        if text_33.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_33.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_33.tStop = t  # not accounting for scr refresh
                text_33.tStopRefresh = tThisFlipGlobal  # on global time
                text_33.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_33.stopped')
                # update status
                text_33.status = FINISHED
                text_33.setAutoDraw(False)
        
        # *text_34* updates
        
        # if text_34 is starting this frame...
        if text_34.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_34.frameNStart = frameN  # exact frame index
            text_34.tStart = t  # local t and not account for scr refresh
            text_34.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_34, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_34.started')
            # update status
            text_34.status = STARTED
            text_34.setAutoDraw(True)
        
        # if text_34 is active this frame...
        if text_34.status == STARTED:
            # update params
            pass
        
        # if text_34 is stopping this frame...
        if text_34.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_34.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_34.tStop = t  # not accounting for scr refresh
                text_34.tStopRefresh = tThisFlipGlobal  # on global time
                text_34.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_34.stopped')
                # update status
                text_34.status = FINISHED
                text_34.setAutoDraw(False)
        
        # *key_resp_yintian0* updates
        waitOnFlip = False
        
        # if key_resp_yintian0 is starting this frame...
        if key_resp_yintian0.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_yintian0.frameNStart = frameN  # exact frame index
            key_resp_yintian0.tStart = t  # local t and not account for scr refresh
            key_resp_yintian0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_yintian0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_yintian0.started')
            # update status
            key_resp_yintian0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_yintian0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_yintian0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_yintian0 is stopping this frame...
        if key_resp_yintian0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_yintian0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_yintian0.tStop = t  # not accounting for scr refresh
                key_resp_yintian0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_yintian0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_yintian0.stopped')
                # update status
                key_resp_yintian0.status = FINISHED
                key_resp_yintian0.status = FINISHED
        if key_resp_yintian0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_yintian0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_yintian0_allKeys.extend(theseKeys)
            if len(_key_resp_yintian0_allKeys):
                key_resp_yintian0.keys = _key_resp_yintian0_allKeys[0].name  # just the first key pressed
                key_resp_yintian0.rt = _key_resp_yintian0_allKeys[0].rt
                key_resp_yintian0.duration = _key_resp_yintian0_allKeys[0].duration
                # was this correct?
                if (key_resp_yintian0.keys == str("'left'")) or (key_resp_yintian0.keys == "'left'"):
                    key_resp_yintian0.corr = 1
                else:
                    key_resp_yintian0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_yintian0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_yintian0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_yintian0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_yintian0" ---
    for thisComponent in trial_yintian0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_yintian0
    trial_yintian0.tStop = globalClock.getTime(format='float')
    trial_yintian0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_yintian0.stopped', trial_yintian0.tStop)
    sound_yintian0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_yintian0.keys in ['', [], None]:  # No response was made
        key_resp_yintian0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_yintian0.corr = 1;  # correct non-response
        else:
           key_resp_yintian0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_yintian0.keys',key_resp_yintian0.keys)
    thisExp.addData('key_resp_yintian0.corr', key_resp_yintian0.corr)
    if key_resp_yintian0.keys != None:  # we had a response
        thisExp.addData('key_resp_yintian0.rt', key_resp_yintian0.rt)
        thisExp.addData('key_resp_yintian0.duration', key_resp_yintian0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_yintian0.maxDurationReached:
        routineTimer.addTime(-trial_yintian0.maxDuration)
    elif trial_yintian0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_chaguan0" ---
    # create an object to store info about Routine trial_chaguan0
    trial_chaguan0 = data.Routine(
        name='trial_chaguan0',
        components=[text_chaguan0, sound_chaguan0, text_35, text_36, key_resp_chaguan0],
    )
    trial_chaguan0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_chaguan0.setSound('audio/chaguan0.wav', secs=2.5, hamming=True)
    sound_chaguan0.setVolume(1.0, log=False)
    sound_chaguan0.seek(0)
    # create starting attributes for key_resp_chaguan0
    key_resp_chaguan0.keys = []
    key_resp_chaguan0.rt = []
    _key_resp_chaguan0_allKeys = []
    # store start times for trial_chaguan0
    trial_chaguan0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_chaguan0.tStart = globalClock.getTime(format='float')
    trial_chaguan0.status = STARTED
    thisExp.addData('trial_chaguan0.started', trial_chaguan0.tStart)
    trial_chaguan0.maxDuration = None
    # keep track of which components have finished
    trial_chaguan0Components = trial_chaguan0.components
    for thisComponent in trial_chaguan0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_chaguan0" ---
    trial_chaguan0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_chaguan0* updates
        
        # if text_chaguan0 is starting this frame...
        if text_chaguan0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_chaguan0.frameNStart = frameN  # exact frame index
            text_chaguan0.tStart = t  # local t and not account for scr refresh
            text_chaguan0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_chaguan0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_chaguan0.started')
            # update status
            text_chaguan0.status = STARTED
            text_chaguan0.setAutoDraw(True)
        
        # if text_chaguan0 is active this frame...
        if text_chaguan0.status == STARTED:
            # update params
            pass
        
        # if text_chaguan0 is stopping this frame...
        if text_chaguan0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_chaguan0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_chaguan0.tStop = t  # not accounting for scr refresh
                text_chaguan0.tStopRefresh = tThisFlipGlobal  # on global time
                text_chaguan0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_chaguan0.stopped')
                # update status
                text_chaguan0.status = FINISHED
                text_chaguan0.setAutoDraw(False)
        
        # *sound_chaguan0* updates
        
        # if sound_chaguan0 is starting this frame...
        if sound_chaguan0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_chaguan0.frameNStart = frameN  # exact frame index
            sound_chaguan0.tStart = t  # local t and not account for scr refresh
            sound_chaguan0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_chaguan0.started', tThisFlipGlobal)
            # update status
            sound_chaguan0.status = STARTED
            sound_chaguan0.play(when=win)  # sync with win flip
        
        # if sound_chaguan0 is stopping this frame...
        if sound_chaguan0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_chaguan0.tStartRefresh + 2.5-frameTolerance or sound_chaguan0.isFinished:
                # keep track of stop time/frame for later
                sound_chaguan0.tStop = t  # not accounting for scr refresh
                sound_chaguan0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_chaguan0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_chaguan0.stopped')
                # update status
                sound_chaguan0.status = FINISHED
                sound_chaguan0.stop()
        
        # *text_35* updates
        
        # if text_35 is starting this frame...
        if text_35.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_35.frameNStart = frameN  # exact frame index
            text_35.tStart = t  # local t and not account for scr refresh
            text_35.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_35, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_35.started')
            # update status
            text_35.status = STARTED
            text_35.setAutoDraw(True)
        
        # if text_35 is active this frame...
        if text_35.status == STARTED:
            # update params
            pass
        
        # if text_35 is stopping this frame...
        if text_35.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_35.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_35.tStop = t  # not accounting for scr refresh
                text_35.tStopRefresh = tThisFlipGlobal  # on global time
                text_35.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_35.stopped')
                # update status
                text_35.status = FINISHED
                text_35.setAutoDraw(False)
        
        # *text_36* updates
        
        # if text_36 is starting this frame...
        if text_36.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_36.frameNStart = frameN  # exact frame index
            text_36.tStart = t  # local t and not account for scr refresh
            text_36.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_36, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_36.started')
            # update status
            text_36.status = STARTED
            text_36.setAutoDraw(True)
        
        # if text_36 is active this frame...
        if text_36.status == STARTED:
            # update params
            pass
        
        # if text_36 is stopping this frame...
        if text_36.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_36.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_36.tStop = t  # not accounting for scr refresh
                text_36.tStopRefresh = tThisFlipGlobal  # on global time
                text_36.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_36.stopped')
                # update status
                text_36.status = FINISHED
                text_36.setAutoDraw(False)
        
        # *key_resp_chaguan0* updates
        waitOnFlip = False
        
        # if key_resp_chaguan0 is starting this frame...
        if key_resp_chaguan0.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_chaguan0.frameNStart = frameN  # exact frame index
            key_resp_chaguan0.tStart = t  # local t and not account for scr refresh
            key_resp_chaguan0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_chaguan0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_chaguan0.started')
            # update status
            key_resp_chaguan0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_chaguan0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_chaguan0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_chaguan0 is stopping this frame...
        if key_resp_chaguan0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_chaguan0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_chaguan0.tStop = t  # not accounting for scr refresh
                key_resp_chaguan0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_chaguan0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_chaguan0.stopped')
                # update status
                key_resp_chaguan0.status = FINISHED
                key_resp_chaguan0.status = FINISHED
        if key_resp_chaguan0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_chaguan0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_chaguan0_allKeys.extend(theseKeys)
            if len(_key_resp_chaguan0_allKeys):
                key_resp_chaguan0.keys = _key_resp_chaguan0_allKeys[0].name  # just the first key pressed
                key_resp_chaguan0.rt = _key_resp_chaguan0_allKeys[0].rt
                key_resp_chaguan0.duration = _key_resp_chaguan0_allKeys[0].duration
                # was this correct?
                if (key_resp_chaguan0.keys == str("'left'")) or (key_resp_chaguan0.keys == "'left'"):
                    key_resp_chaguan0.corr = 1
                else:
                    key_resp_chaguan0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_chaguan0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_chaguan0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_chaguan0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_chaguan0" ---
    for thisComponent in trial_chaguan0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_chaguan0
    trial_chaguan0.tStop = globalClock.getTime(format='float')
    trial_chaguan0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_chaguan0.stopped', trial_chaguan0.tStop)
    sound_chaguan0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_chaguan0.keys in ['', [], None]:  # No response was made
        key_resp_chaguan0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_chaguan0.corr = 1;  # correct non-response
        else:
           key_resp_chaguan0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_chaguan0.keys',key_resp_chaguan0.keys)
    thisExp.addData('key_resp_chaguan0.corr', key_resp_chaguan0.corr)
    if key_resp_chaguan0.keys != None:  # we had a response
        thisExp.addData('key_resp_chaguan0.rt', key_resp_chaguan0.rt)
        thisExp.addData('key_resp_chaguan0.duration', key_resp_chaguan0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_chaguan0.maxDurationReached:
        routineTimer.addTime(-trial_chaguan0.maxDuration)
    elif trial_chaguan0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shuye" ---
    # create an object to store info about Routine trial_shuye
    trial_shuye = data.Routine(
        name='trial_shuye',
        components=[shuye, sound_shuye, text_163, text_164, key_resp_shuye],
    )
    trial_shuye.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shuye.setSound('audio/shuye.wav', secs=2.5, hamming=True)
    sound_shuye.setVolume(1.0, log=False)
    sound_shuye.seek(0)
    # create starting attributes for key_resp_shuye
    key_resp_shuye.keys = []
    key_resp_shuye.rt = []
    _key_resp_shuye_allKeys = []
    # store start times for trial_shuye
    trial_shuye.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shuye.tStart = globalClock.getTime(format='float')
    trial_shuye.status = STARTED
    thisExp.addData('trial_shuye.started', trial_shuye.tStart)
    trial_shuye.maxDuration = None
    # keep track of which components have finished
    trial_shuyeComponents = trial_shuye.components
    for thisComponent in trial_shuye.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shuye" ---
    trial_shuye.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *shuye* updates
        
        # if shuye is starting this frame...
        if shuye.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            shuye.frameNStart = frameN  # exact frame index
            shuye.tStart = t  # local t and not account for scr refresh
            shuye.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(shuye, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'shuye.started')
            # update status
            shuye.status = STARTED
            shuye.setAutoDraw(True)
        
        # if shuye is active this frame...
        if shuye.status == STARTED:
            # update params
            pass
        
        # if shuye is stopping this frame...
        if shuye.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > shuye.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                shuye.tStop = t  # not accounting for scr refresh
                shuye.tStopRefresh = tThisFlipGlobal  # on global time
                shuye.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'shuye.stopped')
                # update status
                shuye.status = FINISHED
                shuye.setAutoDraw(False)
        
        # *sound_shuye* updates
        
        # if sound_shuye is starting this frame...
        if sound_shuye.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_shuye.frameNStart = frameN  # exact frame index
            sound_shuye.tStart = t  # local t and not account for scr refresh
            sound_shuye.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shuye.started', tThisFlipGlobal)
            # update status
            sound_shuye.status = STARTED
            sound_shuye.play(when=win)  # sync with win flip
        
        # if sound_shuye is stopping this frame...
        if sound_shuye.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shuye.tStartRefresh + 2.5-frameTolerance or sound_shuye.isFinished:
                # keep track of stop time/frame for later
                sound_shuye.tStop = t  # not accounting for scr refresh
                sound_shuye.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shuye.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shuye.stopped')
                # update status
                sound_shuye.status = FINISHED
                sound_shuye.stop()
        
        # *text_163* updates
        
        # if text_163 is starting this frame...
        if text_163.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_163.frameNStart = frameN  # exact frame index
            text_163.tStart = t  # local t and not account for scr refresh
            text_163.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_163, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_163.started')
            # update status
            text_163.status = STARTED
            text_163.setAutoDraw(True)
        
        # if text_163 is active this frame...
        if text_163.status == STARTED:
            # update params
            pass
        
        # if text_163 is stopping this frame...
        if text_163.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_163.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_163.tStop = t  # not accounting for scr refresh
                text_163.tStopRefresh = tThisFlipGlobal  # on global time
                text_163.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_163.stopped')
                # update status
                text_163.status = FINISHED
                text_163.setAutoDraw(False)
        
        # *text_164* updates
        
        # if text_164 is starting this frame...
        if text_164.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_164.frameNStart = frameN  # exact frame index
            text_164.tStart = t  # local t and not account for scr refresh
            text_164.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_164, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_164.started')
            # update status
            text_164.status = STARTED
            text_164.setAutoDraw(True)
        
        # if text_164 is active this frame...
        if text_164.status == STARTED:
            # update params
            pass
        
        # if text_164 is stopping this frame...
        if text_164.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_164.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_164.tStop = t  # not accounting for scr refresh
                text_164.tStopRefresh = tThisFlipGlobal  # on global time
                text_164.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_164.stopped')
                # update status
                text_164.status = FINISHED
                text_164.setAutoDraw(False)
        
        # *key_resp_shuye* updates
        waitOnFlip = False
        
        # if key_resp_shuye is starting this frame...
        if key_resp_shuye.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shuye.frameNStart = frameN  # exact frame index
            key_resp_shuye.tStart = t  # local t and not account for scr refresh
            key_resp_shuye.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shuye, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shuye.started')
            # update status
            key_resp_shuye.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shuye.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shuye.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shuye is stopping this frame...
        if key_resp_shuye.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shuye.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shuye.tStop = t  # not accounting for scr refresh
                key_resp_shuye.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shuye.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shuye.stopped')
                # update status
                key_resp_shuye.status = FINISHED
                key_resp_shuye.status = FINISHED
        if key_resp_shuye.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shuye.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shuye_allKeys.extend(theseKeys)
            if len(_key_resp_shuye_allKeys):
                key_resp_shuye.keys = _key_resp_shuye_allKeys[0].name  # just the first key pressed
                key_resp_shuye.rt = _key_resp_shuye_allKeys[0].rt
                key_resp_shuye.duration = _key_resp_shuye_allKeys[0].duration
                # was this correct?
                if (key_resp_shuye.keys == str("'left'")) or (key_resp_shuye.keys == "'left'"):
                    key_resp_shuye.corr = 1
                else:
                    key_resp_shuye.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shuye]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shuye.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shuye.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shuye" ---
    for thisComponent in trial_shuye.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shuye
    trial_shuye.tStop = globalClock.getTime(format='float')
    trial_shuye.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shuye.stopped', trial_shuye.tStop)
    sound_shuye.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shuye.keys in ['', [], None]:  # No response was made
        key_resp_shuye.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_shuye.corr = 1;  # correct non-response
        else:
           key_resp_shuye.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shuye.keys',key_resp_shuye.keys)
    thisExp.addData('key_resp_shuye.corr', key_resp_shuye.corr)
    if key_resp_shuye.keys != None:  # we had a response
        thisExp.addData('key_resp_shuye.rt', key_resp_shuye.rt)
        thisExp.addData('key_resp_shuye.duration', key_resp_shuye.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shuye.maxDurationReached:
        routineTimer.addTime(-trial_shuye.maxDuration)
    elif trial_shuye.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baixiang0" ---
    # create an object to store info about Routine trial_baixiang0
    trial_baixiang0 = data.Routine(
        name='trial_baixiang0',
        components=[text_baixiang0, sound_baixiang0, text_37, text_38, key_resp_baixiang0],
    )
    trial_baixiang0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baixiang0.setSound('audio/baixiang0.wav', secs=2.4, hamming=True)
    sound_baixiang0.setVolume(1.0, log=False)
    sound_baixiang0.seek(0)
    # create starting attributes for key_resp_baixiang0
    key_resp_baixiang0.keys = []
    key_resp_baixiang0.rt = []
    _key_resp_baixiang0_allKeys = []
    # store start times for trial_baixiang0
    trial_baixiang0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baixiang0.tStart = globalClock.getTime(format='float')
    trial_baixiang0.status = STARTED
    thisExp.addData('trial_baixiang0.started', trial_baixiang0.tStart)
    trial_baixiang0.maxDuration = None
    # keep track of which components have finished
    trial_baixiang0Components = trial_baixiang0.components
    for thisComponent in trial_baixiang0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baixiang0" ---
    trial_baixiang0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.4:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baixiang0* updates
        
        # if text_baixiang0 is starting this frame...
        if text_baixiang0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baixiang0.frameNStart = frameN  # exact frame index
            text_baixiang0.tStart = t  # local t and not account for scr refresh
            text_baixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baixiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baixiang0.started')
            # update status
            text_baixiang0.status = STARTED
            text_baixiang0.setAutoDraw(True)
        
        # if text_baixiang0 is active this frame...
        if text_baixiang0.status == STARTED:
            # update params
            pass
        
        # if text_baixiang0 is stopping this frame...
        if text_baixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baixiang0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_baixiang0.tStop = t  # not accounting for scr refresh
                text_baixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                text_baixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baixiang0.stopped')
                # update status
                text_baixiang0.status = FINISHED
                text_baixiang0.setAutoDraw(False)
        
        # *sound_baixiang0* updates
        
        # if sound_baixiang0 is starting this frame...
        if sound_baixiang0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_baixiang0.frameNStart = frameN  # exact frame index
            sound_baixiang0.tStart = t  # local t and not account for scr refresh
            sound_baixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baixiang0.started', tThisFlipGlobal)
            # update status
            sound_baixiang0.status = STARTED
            sound_baixiang0.play(when=win)  # sync with win flip
        
        # if sound_baixiang0 is stopping this frame...
        if sound_baixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baixiang0.tStartRefresh + 2.4-frameTolerance or sound_baixiang0.isFinished:
                # keep track of stop time/frame for later
                sound_baixiang0.tStop = t  # not accounting for scr refresh
                sound_baixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baixiang0.stopped')
                # update status
                sound_baixiang0.status = FINISHED
                sound_baixiang0.stop()
        
        # *text_37* updates
        
        # if text_37 is starting this frame...
        if text_37.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_37.frameNStart = frameN  # exact frame index
            text_37.tStart = t  # local t and not account for scr refresh
            text_37.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_37, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_37.started')
            # update status
            text_37.status = STARTED
            text_37.setAutoDraw(True)
        
        # if text_37 is active this frame...
        if text_37.status == STARTED:
            # update params
            pass
        
        # if text_37 is stopping this frame...
        if text_37.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_37.tStartRefresh + 3.4-frameTolerance:
                # keep track of stop time/frame for later
                text_37.tStop = t  # not accounting for scr refresh
                text_37.tStopRefresh = tThisFlipGlobal  # on global time
                text_37.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_37.stopped')
                # update status
                text_37.status = FINISHED
                text_37.setAutoDraw(False)
        
        # *text_38* updates
        
        # if text_38 is starting this frame...
        if text_38.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            text_38.frameNStart = frameN  # exact frame index
            text_38.tStart = t  # local t and not account for scr refresh
            text_38.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_38, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_38.started')
            # update status
            text_38.status = STARTED
            text_38.setAutoDraw(True)
        
        # if text_38 is active this frame...
        if text_38.status == STARTED:
            # update params
            pass
        
        # if text_38 is stopping this frame...
        if text_38.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_38.tStartRefresh + 4.4-frameTolerance:
                # keep track of stop time/frame for later
                text_38.tStop = t  # not accounting for scr refresh
                text_38.tStopRefresh = tThisFlipGlobal  # on global time
                text_38.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_38.stopped')
                # update status
                text_38.status = FINISHED
                text_38.setAutoDraw(False)
        
        # *key_resp_baixiang0* updates
        waitOnFlip = False
        
        # if key_resp_baixiang0 is starting this frame...
        if key_resp_baixiang0.status == NOT_STARTED and tThisFlip >= 6.4-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baixiang0.frameNStart = frameN  # exact frame index
            key_resp_baixiang0.tStart = t  # local t and not account for scr refresh
            key_resp_baixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baixiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baixiang0.started')
            # update status
            key_resp_baixiang0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baixiang0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baixiang0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baixiang0 is stopping this frame...
        if key_resp_baixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baixiang0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baixiang0.tStop = t  # not accounting for scr refresh
                key_resp_baixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baixiang0.stopped')
                # update status
                key_resp_baixiang0.status = FINISHED
                key_resp_baixiang0.status = FINISHED
        if key_resp_baixiang0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baixiang0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baixiang0_allKeys.extend(theseKeys)
            if len(_key_resp_baixiang0_allKeys):
                key_resp_baixiang0.keys = _key_resp_baixiang0_allKeys[0].name  # just the first key pressed
                key_resp_baixiang0.rt = _key_resp_baixiang0_allKeys[0].rt
                key_resp_baixiang0.duration = _key_resp_baixiang0_allKeys[0].duration
                # was this correct?
                if (key_resp_baixiang0.keys == str("'left'")) or (key_resp_baixiang0.keys == "'left'"):
                    key_resp_baixiang0.corr = 1
                else:
                    key_resp_baixiang0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baixiang0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baixiang0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baixiang0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baixiang0" ---
    for thisComponent in trial_baixiang0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baixiang0
    trial_baixiang0.tStop = globalClock.getTime(format='float')
    trial_baixiang0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baixiang0.stopped', trial_baixiang0.tStop)
    sound_baixiang0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baixiang0.keys in ['', [], None]:  # No response was made
        key_resp_baixiang0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_baixiang0.corr = 1;  # correct non-response
        else:
           key_resp_baixiang0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baixiang0.keys',key_resp_baixiang0.keys)
    thisExp.addData('key_resp_baixiang0.corr', key_resp_baixiang0.corr)
    if key_resp_baixiang0.keys != None:  # we had a response
        thisExp.addData('key_resp_baixiang0.rt', key_resp_baixiang0.rt)
        thisExp.addData('key_resp_baixiang0.duration', key_resp_baixiang0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baixiang0.maxDurationReached:
        routineTimer.addTime(-trial_baixiang0.maxDuration)
    elif trial_baixiang0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.400000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_sinian1" ---
    # create an object to store info about Routine trial_sinian1
    trial_sinian1 = data.Routine(
        name='trial_sinian1',
        components=[text_sinian1, sound_sinian1, text_39, text_40, key_resp_sinian1],
    )
    trial_sinian1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_sinian1.setSound('audio/sinian1.wav', secs=2.5, hamming=True)
    sound_sinian1.setVolume(1.0, log=False)
    sound_sinian1.seek(0)
    # create starting attributes for key_resp_sinian1
    key_resp_sinian1.keys = []
    key_resp_sinian1.rt = []
    _key_resp_sinian1_allKeys = []
    # store start times for trial_sinian1
    trial_sinian1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_sinian1.tStart = globalClock.getTime(format='float')
    trial_sinian1.status = STARTED
    thisExp.addData('trial_sinian1.started', trial_sinian1.tStart)
    trial_sinian1.maxDuration = None
    # keep track of which components have finished
    trial_sinian1Components = trial_sinian1.components
    for thisComponent in trial_sinian1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_sinian1" ---
    trial_sinian1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_sinian1* updates
        
        # if text_sinian1 is starting this frame...
        if text_sinian1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_sinian1.frameNStart = frameN  # exact frame index
            text_sinian1.tStart = t  # local t and not account for scr refresh
            text_sinian1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_sinian1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_sinian1.started')
            # update status
            text_sinian1.status = STARTED
            text_sinian1.setAutoDraw(True)
        
        # if text_sinian1 is active this frame...
        if text_sinian1.status == STARTED:
            # update params
            pass
        
        # if text_sinian1 is stopping this frame...
        if text_sinian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_sinian1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_sinian1.tStop = t  # not accounting for scr refresh
                text_sinian1.tStopRefresh = tThisFlipGlobal  # on global time
                text_sinian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_sinian1.stopped')
                # update status
                text_sinian1.status = FINISHED
                text_sinian1.setAutoDraw(False)
        
        # *sound_sinian1* updates
        
        # if sound_sinian1 is starting this frame...
        if sound_sinian1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_sinian1.frameNStart = frameN  # exact frame index
            sound_sinian1.tStart = t  # local t and not account for scr refresh
            sound_sinian1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_sinian1.started', tThisFlipGlobal)
            # update status
            sound_sinian1.status = STARTED
            sound_sinian1.play(when=win)  # sync with win flip
        
        # if sound_sinian1 is stopping this frame...
        if sound_sinian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_sinian1.tStartRefresh + 2.5-frameTolerance or sound_sinian1.isFinished:
                # keep track of stop time/frame for later
                sound_sinian1.tStop = t  # not accounting for scr refresh
                sound_sinian1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_sinian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_sinian1.stopped')
                # update status
                sound_sinian1.status = FINISHED
                sound_sinian1.stop()
        
        # *text_39* updates
        
        # if text_39 is starting this frame...
        if text_39.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_39.frameNStart = frameN  # exact frame index
            text_39.tStart = t  # local t and not account for scr refresh
            text_39.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_39, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_39.started')
            # update status
            text_39.status = STARTED
            text_39.setAutoDraw(True)
        
        # if text_39 is active this frame...
        if text_39.status == STARTED:
            # update params
            pass
        
        # if text_39 is stopping this frame...
        if text_39.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_39.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_39.tStop = t  # not accounting for scr refresh
                text_39.tStopRefresh = tThisFlipGlobal  # on global time
                text_39.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_39.stopped')
                # update status
                text_39.status = FINISHED
                text_39.setAutoDraw(False)
        
        # *text_40* updates
        
        # if text_40 is starting this frame...
        if text_40.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_40.frameNStart = frameN  # exact frame index
            text_40.tStart = t  # local t and not account for scr refresh
            text_40.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_40, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_40.started')
            # update status
            text_40.status = STARTED
            text_40.setAutoDraw(True)
        
        # if text_40 is active this frame...
        if text_40.status == STARTED:
            # update params
            pass
        
        # if text_40 is stopping this frame...
        if text_40.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_40.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_40.tStop = t  # not accounting for scr refresh
                text_40.tStopRefresh = tThisFlipGlobal  # on global time
                text_40.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_40.stopped')
                # update status
                text_40.status = FINISHED
                text_40.setAutoDraw(False)
        
        # *key_resp_sinian1* updates
        waitOnFlip = False
        
        # if key_resp_sinian1 is starting this frame...
        if key_resp_sinian1.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_sinian1.frameNStart = frameN  # exact frame index
            key_resp_sinian1.tStart = t  # local t and not account for scr refresh
            key_resp_sinian1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_sinian1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_sinian1.started')
            # update status
            key_resp_sinian1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_sinian1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_sinian1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_sinian1 is stopping this frame...
        if key_resp_sinian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_sinian1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_sinian1.tStop = t  # not accounting for scr refresh
                key_resp_sinian1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_sinian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_sinian1.stopped')
                # update status
                key_resp_sinian1.status = FINISHED
                key_resp_sinian1.status = FINISHED
        if key_resp_sinian1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_sinian1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_sinian1_allKeys.extend(theseKeys)
            if len(_key_resp_sinian1_allKeys):
                key_resp_sinian1.keys = _key_resp_sinian1_allKeys[0].name  # just the first key pressed
                key_resp_sinian1.rt = _key_resp_sinian1_allKeys[0].rt
                key_resp_sinian1.duration = _key_resp_sinian1_allKeys[0].duration
                # was this correct?
                if (key_resp_sinian1.keys == str("'right'")) or (key_resp_sinian1.keys == "'right'"):
                    key_resp_sinian1.corr = 1
                else:
                    key_resp_sinian1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_sinian1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_sinian1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_sinian1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_sinian1" ---
    for thisComponent in trial_sinian1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_sinian1
    trial_sinian1.tStop = globalClock.getTime(format='float')
    trial_sinian1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_sinian1.stopped', trial_sinian1.tStop)
    sound_sinian1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_sinian1.keys in ['', [], None]:  # No response was made
        key_resp_sinian1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_sinian1.corr = 1;  # correct non-response
        else:
           key_resp_sinian1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_sinian1.keys',key_resp_sinian1.keys)
    thisExp.addData('key_resp_sinian1.corr', key_resp_sinian1.corr)
    if key_resp_sinian1.keys != None:  # we had a response
        thisExp.addData('key_resp_sinian1.rt', key_resp_sinian1.rt)
        thisExp.addData('key_resp_sinian1.duration', key_resp_sinian1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_sinian1.maxDurationReached:
        routineTimer.addTime(-trial_sinian1.maxDuration)
    elif trial_sinian1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_chengshi" ---
    # create an object to store info about Routine trial_chengshi
    trial_chengshi = data.Routine(
        name='trial_chengshi',
        components=[text_chengshi, sound_chengshi, text_151, text_152, key_resp_chengshi],
    )
    trial_chengshi.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_chengshi.setSound('audio/chengshi.wav', secs=2.6, hamming=True)
    sound_chengshi.setVolume(1.0, log=False)
    sound_chengshi.seek(0)
    # create starting attributes for key_resp_chengshi
    key_resp_chengshi.keys = []
    key_resp_chengshi.rt = []
    _key_resp_chengshi_allKeys = []
    # store start times for trial_chengshi
    trial_chengshi.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_chengshi.tStart = globalClock.getTime(format='float')
    trial_chengshi.status = STARTED
    thisExp.addData('trial_chengshi.started', trial_chengshi.tStart)
    trial_chengshi.maxDuration = None
    # keep track of which components have finished
    trial_chengshiComponents = trial_chengshi.components
    for thisComponent in trial_chengshi.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_chengshi" ---
    trial_chengshi.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.6:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_chengshi* updates
        
        # if text_chengshi is starting this frame...
        if text_chengshi.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_chengshi.frameNStart = frameN  # exact frame index
            text_chengshi.tStart = t  # local t and not account for scr refresh
            text_chengshi.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_chengshi, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_chengshi.started')
            # update status
            text_chengshi.status = STARTED
            text_chengshi.setAutoDraw(True)
        
        # if text_chengshi is active this frame...
        if text_chengshi.status == STARTED:
            # update params
            pass
        
        # if text_chengshi is stopping this frame...
        if text_chengshi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_chengshi.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_chengshi.tStop = t  # not accounting for scr refresh
                text_chengshi.tStopRefresh = tThisFlipGlobal  # on global time
                text_chengshi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_chengshi.stopped')
                # update status
                text_chengshi.status = FINISHED
                text_chengshi.setAutoDraw(False)
        
        # *sound_chengshi* updates
        
        # if sound_chengshi is starting this frame...
        if sound_chengshi.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_chengshi.frameNStart = frameN  # exact frame index
            sound_chengshi.tStart = t  # local t and not account for scr refresh
            sound_chengshi.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_chengshi.started', tThisFlipGlobal)
            # update status
            sound_chengshi.status = STARTED
            sound_chengshi.play(when=win)  # sync with win flip
        
        # if sound_chengshi is stopping this frame...
        if sound_chengshi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_chengshi.tStartRefresh + 2.6-frameTolerance or sound_chengshi.isFinished:
                # keep track of stop time/frame for later
                sound_chengshi.tStop = t  # not accounting for scr refresh
                sound_chengshi.tStopRefresh = tThisFlipGlobal  # on global time
                sound_chengshi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_chengshi.stopped')
                # update status
                sound_chengshi.status = FINISHED
                sound_chengshi.stop()
        
        # *text_151* updates
        
        # if text_151 is starting this frame...
        if text_151.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_151.frameNStart = frameN  # exact frame index
            text_151.tStart = t  # local t and not account for scr refresh
            text_151.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_151, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_151.started')
            # update status
            text_151.status = STARTED
            text_151.setAutoDraw(True)
        
        # if text_151 is active this frame...
        if text_151.status == STARTED:
            # update params
            pass
        
        # if text_151 is stopping this frame...
        if text_151.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_151.tStartRefresh + 3.6-frameTolerance:
                # keep track of stop time/frame for later
                text_151.tStop = t  # not accounting for scr refresh
                text_151.tStopRefresh = tThisFlipGlobal  # on global time
                text_151.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_151.stopped')
                # update status
                text_151.status = FINISHED
                text_151.setAutoDraw(False)
        
        # *text_152* updates
        
        # if text_152 is starting this frame...
        if text_152.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            text_152.frameNStart = frameN  # exact frame index
            text_152.tStart = t  # local t and not account for scr refresh
            text_152.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_152, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_152.started')
            # update status
            text_152.status = STARTED
            text_152.setAutoDraw(True)
        
        # if text_152 is active this frame...
        if text_152.status == STARTED:
            # update params
            pass
        
        # if text_152 is stopping this frame...
        if text_152.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_152.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_152.tStop = t  # not accounting for scr refresh
                text_152.tStopRefresh = tThisFlipGlobal  # on global time
                text_152.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_152.stopped')
                # update status
                text_152.status = FINISHED
                text_152.setAutoDraw(False)
        
        # *key_resp_chengshi* updates
        waitOnFlip = False
        
        # if key_resp_chengshi is starting this frame...
        if key_resp_chengshi.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            key_resp_chengshi.frameNStart = frameN  # exact frame index
            key_resp_chengshi.tStart = t  # local t and not account for scr refresh
            key_resp_chengshi.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_chengshi, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_chengshi.started')
            # update status
            key_resp_chengshi.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_chengshi.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_chengshi.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_chengshi is stopping this frame...
        if key_resp_chengshi.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_chengshi.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_chengshi.tStop = t  # not accounting for scr refresh
                key_resp_chengshi.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_chengshi.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_chengshi.stopped')
                # update status
                key_resp_chengshi.status = FINISHED
                key_resp_chengshi.status = FINISHED
        if key_resp_chengshi.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_chengshi.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_chengshi_allKeys.extend(theseKeys)
            if len(_key_resp_chengshi_allKeys):
                key_resp_chengshi.keys = _key_resp_chengshi_allKeys[0].name  # just the first key pressed
                key_resp_chengshi.rt = _key_resp_chengshi_allKeys[0].rt
                key_resp_chengshi.duration = _key_resp_chengshi_allKeys[0].duration
                # was this correct?
                if (key_resp_chengshi.keys == str("'left'")) or (key_resp_chengshi.keys == "'left'"):
                    key_resp_chengshi.corr = 1
                else:
                    key_resp_chengshi.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_chengshi]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_chengshi.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_chengshi.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_chengshi" ---
    for thisComponent in trial_chengshi.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_chengshi
    trial_chengshi.tStop = globalClock.getTime(format='float')
    trial_chengshi.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_chengshi.stopped', trial_chengshi.tStop)
    sound_chengshi.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_chengshi.keys in ['', [], None]:  # No response was made
        key_resp_chengshi.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_chengshi.corr = 1;  # correct non-response
        else:
           key_resp_chengshi.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_chengshi.keys',key_resp_chengshi.keys)
    thisExp.addData('key_resp_chengshi.corr', key_resp_chengshi.corr)
    if key_resp_chengshi.keys != None:  # we had a response
        thisExp.addData('key_resp_chengshi.rt', key_resp_chengshi.rt)
        thisExp.addData('key_resp_chengshi.duration', key_resp_chengshi.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_chengshi.maxDurationReached:
        routineTimer.addTime(-trial_chengshi.maxDuration)
    elif trial_chengshi.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.600000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_sinian0" ---
    # create an object to store info about Routine trial_sinian0
    trial_sinian0 = data.Routine(
        name='trial_sinian0',
        components=[text_sinian0, sound_sinian, text_41, text_42, key_resp_sinian0],
    )
    trial_sinian0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_sinian.setSound('audio/sinian0.wav', secs=2.6, hamming=True)
    sound_sinian.setVolume(1.0, log=False)
    sound_sinian.seek(0)
    # create starting attributes for key_resp_sinian0
    key_resp_sinian0.keys = []
    key_resp_sinian0.rt = []
    _key_resp_sinian0_allKeys = []
    # store start times for trial_sinian0
    trial_sinian0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_sinian0.tStart = globalClock.getTime(format='float')
    trial_sinian0.status = STARTED
    thisExp.addData('trial_sinian0.started', trial_sinian0.tStart)
    trial_sinian0.maxDuration = None
    # keep track of which components have finished
    trial_sinian0Components = trial_sinian0.components
    for thisComponent in trial_sinian0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_sinian0" ---
    trial_sinian0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.6:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_sinian0* updates
        
        # if text_sinian0 is starting this frame...
        if text_sinian0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_sinian0.frameNStart = frameN  # exact frame index
            text_sinian0.tStart = t  # local t and not account for scr refresh
            text_sinian0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_sinian0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_sinian0.started')
            # update status
            text_sinian0.status = STARTED
            text_sinian0.setAutoDraw(True)
        
        # if text_sinian0 is active this frame...
        if text_sinian0.status == STARTED:
            # update params
            pass
        
        # if text_sinian0 is stopping this frame...
        if text_sinian0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_sinian0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_sinian0.tStop = t  # not accounting for scr refresh
                text_sinian0.tStopRefresh = tThisFlipGlobal  # on global time
                text_sinian0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_sinian0.stopped')
                # update status
                text_sinian0.status = FINISHED
                text_sinian0.setAutoDraw(False)
        
        # *sound_sinian* updates
        
        # if sound_sinian is starting this frame...
        if sound_sinian.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_sinian.frameNStart = frameN  # exact frame index
            sound_sinian.tStart = t  # local t and not account for scr refresh
            sound_sinian.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_sinian.started', tThisFlipGlobal)
            # update status
            sound_sinian.status = STARTED
            sound_sinian.play(when=win)  # sync with win flip
        
        # if sound_sinian is stopping this frame...
        if sound_sinian.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_sinian.tStartRefresh + 2.6-frameTolerance or sound_sinian.isFinished:
                # keep track of stop time/frame for later
                sound_sinian.tStop = t  # not accounting for scr refresh
                sound_sinian.tStopRefresh = tThisFlipGlobal  # on global time
                sound_sinian.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_sinian.stopped')
                # update status
                sound_sinian.status = FINISHED
                sound_sinian.stop()
        
        # *text_41* updates
        
        # if text_41 is starting this frame...
        if text_41.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_41.frameNStart = frameN  # exact frame index
            text_41.tStart = t  # local t and not account for scr refresh
            text_41.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_41, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_41.started')
            # update status
            text_41.status = STARTED
            text_41.setAutoDraw(True)
        
        # if text_41 is active this frame...
        if text_41.status == STARTED:
            # update params
            pass
        
        # if text_41 is stopping this frame...
        if text_41.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_41.tStartRefresh + 3.6-frameTolerance:
                # keep track of stop time/frame for later
                text_41.tStop = t  # not accounting for scr refresh
                text_41.tStopRefresh = tThisFlipGlobal  # on global time
                text_41.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_41.stopped')
                # update status
                text_41.status = FINISHED
                text_41.setAutoDraw(False)
        
        # *text_42* updates
        
        # if text_42 is starting this frame...
        if text_42.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            text_42.frameNStart = frameN  # exact frame index
            text_42.tStart = t  # local t and not account for scr refresh
            text_42.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_42, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_42.started')
            # update status
            text_42.status = STARTED
            text_42.setAutoDraw(True)
        
        # if text_42 is active this frame...
        if text_42.status == STARTED:
            # update params
            pass
        
        # if text_42 is stopping this frame...
        if text_42.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_42.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_42.tStop = t  # not accounting for scr refresh
                text_42.tStopRefresh = tThisFlipGlobal  # on global time
                text_42.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_42.stopped')
                # update status
                text_42.status = FINISHED
                text_42.setAutoDraw(False)
        
        # *key_resp_sinian0* updates
        waitOnFlip = False
        
        # if key_resp_sinian0 is starting this frame...
        if key_resp_sinian0.status == NOT_STARTED and tThisFlip >= 6.6-frameTolerance:
            # keep track of start time/frame for later
            key_resp_sinian0.frameNStart = frameN  # exact frame index
            key_resp_sinian0.tStart = t  # local t and not account for scr refresh
            key_resp_sinian0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_sinian0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_sinian0.started')
            # update status
            key_resp_sinian0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_sinian0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_sinian0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_sinian0 is stopping this frame...
        if key_resp_sinian0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_sinian0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_sinian0.tStop = t  # not accounting for scr refresh
                key_resp_sinian0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_sinian0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_sinian0.stopped')
                # update status
                key_resp_sinian0.status = FINISHED
                key_resp_sinian0.status = FINISHED
        if key_resp_sinian0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_sinian0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_sinian0_allKeys.extend(theseKeys)
            if len(_key_resp_sinian0_allKeys):
                key_resp_sinian0.keys = _key_resp_sinian0_allKeys[0].name  # just the first key pressed
                key_resp_sinian0.rt = _key_resp_sinian0_allKeys[0].rt
                key_resp_sinian0.duration = _key_resp_sinian0_allKeys[0].duration
                # was this correct?
                if (key_resp_sinian0.keys == str("'left'")) or (key_resp_sinian0.keys == "'left'"):
                    key_resp_sinian0.corr = 1
                else:
                    key_resp_sinian0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_sinian]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_sinian0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_sinian0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_sinian0" ---
    for thisComponent in trial_sinian0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_sinian0
    trial_sinian0.tStop = globalClock.getTime(format='float')
    trial_sinian0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_sinian0.stopped', trial_sinian0.tStop)
    sound_sinian.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_sinian0.keys in ['', [], None]:  # No response was made
        key_resp_sinian0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_sinian0.corr = 1;  # correct non-response
        else:
           key_resp_sinian0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_sinian0.keys',key_resp_sinian0.keys)
    thisExp.addData('key_resp_sinian0.corr', key_resp_sinian0.corr)
    if key_resp_sinian0.keys != None:  # we had a response
        thisExp.addData('key_resp_sinian0.rt', key_resp_sinian0.rt)
        thisExp.addData('key_resp_sinian0.duration', key_resp_sinian0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_sinian0.maxDurationReached:
        routineTimer.addTime(-trial_sinian0.maxDuration)
    elif trial_sinian0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.600000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_xiaoshuo" ---
    # create an object to store info about Routine trial_xiaoshuo
    trial_xiaoshuo = data.Routine(
        name='trial_xiaoshuo',
        components=[text_xiaoshuo, sound_xiaoshuo, text_43, text_44, key_resp_xiaoshuo],
    )
    trial_xiaoshuo.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_xiaoshuo.setSound('audio/xiaoshuo.wav', secs=2.5, hamming=True)
    sound_xiaoshuo.setVolume(1.0, log=False)
    sound_xiaoshuo.seek(0)
    # create starting attributes for key_resp_xiaoshuo
    key_resp_xiaoshuo.keys = []
    key_resp_xiaoshuo.rt = []
    _key_resp_xiaoshuo_allKeys = []
    # store start times for trial_xiaoshuo
    trial_xiaoshuo.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_xiaoshuo.tStart = globalClock.getTime(format='float')
    trial_xiaoshuo.status = STARTED
    thisExp.addData('trial_xiaoshuo.started', trial_xiaoshuo.tStart)
    trial_xiaoshuo.maxDuration = None
    # keep track of which components have finished
    trial_xiaoshuoComponents = trial_xiaoshuo.components
    for thisComponent in trial_xiaoshuo.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_xiaoshuo" ---
    trial_xiaoshuo.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 11.5:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_xiaoshuo* updates
        
        # if text_xiaoshuo is starting this frame...
        if text_xiaoshuo.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_xiaoshuo.frameNStart = frameN  # exact frame index
            text_xiaoshuo.tStart = t  # local t and not account for scr refresh
            text_xiaoshuo.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_xiaoshuo, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_xiaoshuo.started')
            # update status
            text_xiaoshuo.status = STARTED
            text_xiaoshuo.setAutoDraw(True)
        
        # if text_xiaoshuo is active this frame...
        if text_xiaoshuo.status == STARTED:
            # update params
            pass
        
        # if text_xiaoshuo is stopping this frame...
        if text_xiaoshuo.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_xiaoshuo.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_xiaoshuo.tStop = t  # not accounting for scr refresh
                text_xiaoshuo.tStopRefresh = tThisFlipGlobal  # on global time
                text_xiaoshuo.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_xiaoshuo.stopped')
                # update status
                text_xiaoshuo.status = FINISHED
                text_xiaoshuo.setAutoDraw(False)
        
        # *sound_xiaoshuo* updates
        
        # if sound_xiaoshuo is starting this frame...
        if sound_xiaoshuo.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_xiaoshuo.frameNStart = frameN  # exact frame index
            sound_xiaoshuo.tStart = t  # local t and not account for scr refresh
            sound_xiaoshuo.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_xiaoshuo.started', tThisFlipGlobal)
            # update status
            sound_xiaoshuo.status = STARTED
            sound_xiaoshuo.play(when=win)  # sync with win flip
        
        # if sound_xiaoshuo is stopping this frame...
        if sound_xiaoshuo.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_xiaoshuo.tStartRefresh + 2.5-frameTolerance or sound_xiaoshuo.isFinished:
                # keep track of stop time/frame for later
                sound_xiaoshuo.tStop = t  # not accounting for scr refresh
                sound_xiaoshuo.tStopRefresh = tThisFlipGlobal  # on global time
                sound_xiaoshuo.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_xiaoshuo.stopped')
                # update status
                sound_xiaoshuo.status = FINISHED
                sound_xiaoshuo.stop()
        
        # *text_43* updates
        
        # if text_43 is starting this frame...
        if text_43.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_43.frameNStart = frameN  # exact frame index
            text_43.tStart = t  # local t and not account for scr refresh
            text_43.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_43, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_43.started')
            # update status
            text_43.status = STARTED
            text_43.setAutoDraw(True)
        
        # if text_43 is active this frame...
        if text_43.status == STARTED:
            # update params
            pass
        
        # if text_43 is stopping this frame...
        if text_43.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_43.tStartRefresh + 3.5-frameTolerance:
                # keep track of stop time/frame for later
                text_43.tStop = t  # not accounting for scr refresh
                text_43.tStopRefresh = tThisFlipGlobal  # on global time
                text_43.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_43.stopped')
                # update status
                text_43.status = FINISHED
                text_43.setAutoDraw(False)
        
        # *text_44* updates
        
        # if text_44 is starting this frame...
        if text_44.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            text_44.frameNStart = frameN  # exact frame index
            text_44.tStart = t  # local t and not account for scr refresh
            text_44.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_44, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_44.started')
            # update status
            text_44.status = STARTED
            text_44.setAutoDraw(True)
        
        # if text_44 is active this frame...
        if text_44.status == STARTED:
            # update params
            pass
        
        # if text_44 is stopping this frame...
        if text_44.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_44.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_44.tStop = t  # not accounting for scr refresh
                text_44.tStopRefresh = tThisFlipGlobal  # on global time
                text_44.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_44.stopped')
                # update status
                text_44.status = FINISHED
                text_44.setAutoDraw(False)
        
        # *key_resp_xiaoshuo* updates
        waitOnFlip = False
        
        # if key_resp_xiaoshuo is starting this frame...
        if key_resp_xiaoshuo.status == NOT_STARTED and tThisFlip >= 6.5-frameTolerance:
            # keep track of start time/frame for later
            key_resp_xiaoshuo.frameNStart = frameN  # exact frame index
            key_resp_xiaoshuo.tStart = t  # local t and not account for scr refresh
            key_resp_xiaoshuo.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_xiaoshuo, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_xiaoshuo.started')
            # update status
            key_resp_xiaoshuo.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_xiaoshuo.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_xiaoshuo.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_xiaoshuo is stopping this frame...
        if key_resp_xiaoshuo.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_xiaoshuo.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_xiaoshuo.tStop = t  # not accounting for scr refresh
                key_resp_xiaoshuo.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_xiaoshuo.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_xiaoshuo.stopped')
                # update status
                key_resp_xiaoshuo.status = FINISHED
                key_resp_xiaoshuo.status = FINISHED
        if key_resp_xiaoshuo.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_xiaoshuo.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_xiaoshuo_allKeys.extend(theseKeys)
            if len(_key_resp_xiaoshuo_allKeys):
                key_resp_xiaoshuo.keys = _key_resp_xiaoshuo_allKeys[0].name  # just the first key pressed
                key_resp_xiaoshuo.rt = _key_resp_xiaoshuo_allKeys[0].rt
                key_resp_xiaoshuo.duration = _key_resp_xiaoshuo_allKeys[0].duration
                # was this correct?
                if (key_resp_xiaoshuo.keys == str("'left'")) or (key_resp_xiaoshuo.keys == "'left'"):
                    key_resp_xiaoshuo.corr = 1
                else:
                    key_resp_xiaoshuo.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_xiaoshuo]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_xiaoshuo.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_xiaoshuo.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_xiaoshuo" ---
    for thisComponent in trial_xiaoshuo.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_xiaoshuo
    trial_xiaoshuo.tStop = globalClock.getTime(format='float')
    trial_xiaoshuo.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_xiaoshuo.stopped', trial_xiaoshuo.tStop)
    sound_xiaoshuo.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_xiaoshuo.keys in ['', [], None]:  # No response was made
        key_resp_xiaoshuo.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_xiaoshuo.corr = 1;  # correct non-response
        else:
           key_resp_xiaoshuo.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_xiaoshuo.keys',key_resp_xiaoshuo.keys)
    thisExp.addData('key_resp_xiaoshuo.corr', key_resp_xiaoshuo.corr)
    if key_resp_xiaoshuo.keys != None:  # we had a response
        thisExp.addData('key_resp_xiaoshuo.rt', key_resp_xiaoshuo.rt)
        thisExp.addData('key_resp_xiaoshuo.duration', key_resp_xiaoshuo.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_xiaoshuo.maxDurationReached:
        routineTimer.addTime(-trial_xiaoshuo.maxDuration)
    elif trial_xiaoshuo.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-11.500000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_fuqin0" ---
    # create an object to store info about Routine trial_fuqin0
    trial_fuqin0 = data.Routine(
        name='trial_fuqin0',
        components=[text_fuqin0, sound_fuqin0, text_45, text_46, key_resp_fuqin0],
    )
    trial_fuqin0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_fuqin0.setSound('audio/fuqin0.wav', secs=3.3, hamming=True)
    sound_fuqin0.setVolume(1.0, log=False)
    sound_fuqin0.seek(0)
    # create starting attributes for key_resp_fuqin0
    key_resp_fuqin0.keys = []
    key_resp_fuqin0.rt = []
    _key_resp_fuqin0_allKeys = []
    # store start times for trial_fuqin0
    trial_fuqin0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_fuqin0.tStart = globalClock.getTime(format='float')
    trial_fuqin0.status = STARTED
    thisExp.addData('trial_fuqin0.started', trial_fuqin0.tStart)
    trial_fuqin0.maxDuration = None
    # keep track of which components have finished
    trial_fuqin0Components = trial_fuqin0.components
    for thisComponent in trial_fuqin0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_fuqin0" ---
    trial_fuqin0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.3:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_fuqin0* updates
        
        # if text_fuqin0 is starting this frame...
        if text_fuqin0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_fuqin0.frameNStart = frameN  # exact frame index
            text_fuqin0.tStart = t  # local t and not account for scr refresh
            text_fuqin0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_fuqin0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_fuqin0.started')
            # update status
            text_fuqin0.status = STARTED
            text_fuqin0.setAutoDraw(True)
        
        # if text_fuqin0 is active this frame...
        if text_fuqin0.status == STARTED:
            # update params
            pass
        
        # if text_fuqin0 is stopping this frame...
        if text_fuqin0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_fuqin0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_fuqin0.tStop = t  # not accounting for scr refresh
                text_fuqin0.tStopRefresh = tThisFlipGlobal  # on global time
                text_fuqin0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_fuqin0.stopped')
                # update status
                text_fuqin0.status = FINISHED
                text_fuqin0.setAutoDraw(False)
        
        # *sound_fuqin0* updates
        
        # if sound_fuqin0 is starting this frame...
        if sound_fuqin0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_fuqin0.frameNStart = frameN  # exact frame index
            sound_fuqin0.tStart = t  # local t and not account for scr refresh
            sound_fuqin0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_fuqin0.started', tThisFlipGlobal)
            # update status
            sound_fuqin0.status = STARTED
            sound_fuqin0.play(when=win)  # sync with win flip
        
        # if sound_fuqin0 is stopping this frame...
        if sound_fuqin0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_fuqin0.tStartRefresh + 3.3-frameTolerance or sound_fuqin0.isFinished:
                # keep track of stop time/frame for later
                sound_fuqin0.tStop = t  # not accounting for scr refresh
                sound_fuqin0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_fuqin0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_fuqin0.stopped')
                # update status
                sound_fuqin0.status = FINISHED
                sound_fuqin0.stop()
        
        # *text_45* updates
        
        # if text_45 is starting this frame...
        if text_45.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_45.frameNStart = frameN  # exact frame index
            text_45.tStart = t  # local t and not account for scr refresh
            text_45.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_45, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_45.started')
            # update status
            text_45.status = STARTED
            text_45.setAutoDraw(True)
        
        # if text_45 is active this frame...
        if text_45.status == STARTED:
            # update params
            pass
        
        # if text_45 is stopping this frame...
        if text_45.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_45.tStartRefresh + 4.3-frameTolerance:
                # keep track of stop time/frame for later
                text_45.tStop = t  # not accounting for scr refresh
                text_45.tStopRefresh = tThisFlipGlobal  # on global time
                text_45.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_45.stopped')
                # update status
                text_45.status = FINISHED
                text_45.setAutoDraw(False)
        
        # *text_46* updates
        
        # if text_46 is starting this frame...
        if text_46.status == NOT_STARTED and tThisFlip >= 7.3-frameTolerance:
            # keep track of start time/frame for later
            text_46.frameNStart = frameN  # exact frame index
            text_46.tStart = t  # local t and not account for scr refresh
            text_46.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_46, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_46.started')
            # update status
            text_46.status = STARTED
            text_46.setAutoDraw(True)
        
        # if text_46 is active this frame...
        if text_46.status == STARTED:
            # update params
            pass
        
        # if text_46 is stopping this frame...
        if text_46.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_46.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_46.tStop = t  # not accounting for scr refresh
                text_46.tStopRefresh = tThisFlipGlobal  # on global time
                text_46.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_46.stopped')
                # update status
                text_46.status = FINISHED
                text_46.setAutoDraw(False)
        
        # *key_resp_fuqin0* updates
        waitOnFlip = False
        
        # if key_resp_fuqin0 is starting this frame...
        if key_resp_fuqin0.status == NOT_STARTED and tThisFlip >= 7.3-frameTolerance:
            # keep track of start time/frame for later
            key_resp_fuqin0.frameNStart = frameN  # exact frame index
            key_resp_fuqin0.tStart = t  # local t and not account for scr refresh
            key_resp_fuqin0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_fuqin0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_fuqin0.started')
            # update status
            key_resp_fuqin0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_fuqin0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_fuqin0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_fuqin0 is stopping this frame...
        if key_resp_fuqin0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_fuqin0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_fuqin0.tStop = t  # not accounting for scr refresh
                key_resp_fuqin0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_fuqin0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_fuqin0.stopped')
                # update status
                key_resp_fuqin0.status = FINISHED
                key_resp_fuqin0.status = FINISHED
        if key_resp_fuqin0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_fuqin0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_fuqin0_allKeys.extend(theseKeys)
            if len(_key_resp_fuqin0_allKeys):
                key_resp_fuqin0.keys = _key_resp_fuqin0_allKeys[0].name  # just the first key pressed
                key_resp_fuqin0.rt = _key_resp_fuqin0_allKeys[0].rt
                key_resp_fuqin0.duration = _key_resp_fuqin0_allKeys[0].duration
                # was this correct?
                if (key_resp_fuqin0.keys == str("'left'")) or (key_resp_fuqin0.keys == "'left'"):
                    key_resp_fuqin0.corr = 1
                else:
                    key_resp_fuqin0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_fuqin0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_fuqin0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_fuqin0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_fuqin0" ---
    for thisComponent in trial_fuqin0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_fuqin0
    trial_fuqin0.tStop = globalClock.getTime(format='float')
    trial_fuqin0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_fuqin0.stopped', trial_fuqin0.tStop)
    sound_fuqin0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_fuqin0.keys in ['', [], None]:  # No response was made
        key_resp_fuqin0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_fuqin0.corr = 1;  # correct non-response
        else:
           key_resp_fuqin0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_fuqin0.keys',key_resp_fuqin0.keys)
    thisExp.addData('key_resp_fuqin0.corr', key_resp_fuqin0.corr)
    if key_resp_fuqin0.keys != None:  # we had a response
        thisExp.addData('key_resp_fuqin0.rt', key_resp_fuqin0.rt)
        thisExp.addData('key_resp_fuqin0.duration', key_resp_fuqin0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_fuqin0.maxDurationReached:
        routineTimer.addTime(-trial_fuqin0.maxDuration)
    elif trial_fuqin0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.300000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_guangming1" ---
    # create an object to store info about Routine trial_guangming1
    trial_guangming1 = data.Routine(
        name='trial_guangming1',
        components=[text_guangming1, sound_guangming1, text_47, text_48, key_resp_guangming1],
    )
    trial_guangming1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_guangming1.setSound('audio/guangming1.wav', secs=3.0, hamming=True)
    sound_guangming1.setVolume(1.0, log=False)
    sound_guangming1.seek(0)
    # create starting attributes for key_resp_guangming1
    key_resp_guangming1.keys = []
    key_resp_guangming1.rt = []
    _key_resp_guangming1_allKeys = []
    # store start times for trial_guangming1
    trial_guangming1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_guangming1.tStart = globalClock.getTime(format='float')
    trial_guangming1.status = STARTED
    thisExp.addData('trial_guangming1.started', trial_guangming1.tStart)
    trial_guangming1.maxDuration = None
    # keep track of which components have finished
    trial_guangming1Components = trial_guangming1.components
    for thisComponent in trial_guangming1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_guangming1" ---
    trial_guangming1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_guangming1* updates
        
        # if text_guangming1 is starting this frame...
        if text_guangming1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_guangming1.frameNStart = frameN  # exact frame index
            text_guangming1.tStart = t  # local t and not account for scr refresh
            text_guangming1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_guangming1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_guangming1.started')
            # update status
            text_guangming1.status = STARTED
            text_guangming1.setAutoDraw(True)
        
        # if text_guangming1 is active this frame...
        if text_guangming1.status == STARTED:
            # update params
            pass
        
        # if text_guangming1 is stopping this frame...
        if text_guangming1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_guangming1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_guangming1.tStop = t  # not accounting for scr refresh
                text_guangming1.tStopRefresh = tThisFlipGlobal  # on global time
                text_guangming1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_guangming1.stopped')
                # update status
                text_guangming1.status = FINISHED
                text_guangming1.setAutoDraw(False)
        
        # *sound_guangming1* updates
        
        # if sound_guangming1 is starting this frame...
        if sound_guangming1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_guangming1.frameNStart = frameN  # exact frame index
            sound_guangming1.tStart = t  # local t and not account for scr refresh
            sound_guangming1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_guangming1.started', tThisFlipGlobal)
            # update status
            sound_guangming1.status = STARTED
            sound_guangming1.play(when=win)  # sync with win flip
        
        # if sound_guangming1 is stopping this frame...
        if sound_guangming1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_guangming1.tStartRefresh + 3.0-frameTolerance or sound_guangming1.isFinished:
                # keep track of stop time/frame for later
                sound_guangming1.tStop = t  # not accounting for scr refresh
                sound_guangming1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_guangming1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_guangming1.stopped')
                # update status
                sound_guangming1.status = FINISHED
                sound_guangming1.stop()
        
        # *text_47* updates
        
        # if text_47 is starting this frame...
        if text_47.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_47.frameNStart = frameN  # exact frame index
            text_47.tStart = t  # local t and not account for scr refresh
            text_47.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_47, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_47.started')
            # update status
            text_47.status = STARTED
            text_47.setAutoDraw(True)
        
        # if text_47 is active this frame...
        if text_47.status == STARTED:
            # update params
            pass
        
        # if text_47 is stopping this frame...
        if text_47.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_47.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_47.tStop = t  # not accounting for scr refresh
                text_47.tStopRefresh = tThisFlipGlobal  # on global time
                text_47.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_47.stopped')
                # update status
                text_47.status = FINISHED
                text_47.setAutoDraw(False)
        
        # *text_48* updates
        
        # if text_48 is starting this frame...
        if text_48.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_48.frameNStart = frameN  # exact frame index
            text_48.tStart = t  # local t and not account for scr refresh
            text_48.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_48, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_48.started')
            # update status
            text_48.status = STARTED
            text_48.setAutoDraw(True)
        
        # if text_48 is active this frame...
        if text_48.status == STARTED:
            # update params
            pass
        
        # if text_48 is stopping this frame...
        if text_48.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_48.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_48.tStop = t  # not accounting for scr refresh
                text_48.tStopRefresh = tThisFlipGlobal  # on global time
                text_48.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_48.stopped')
                # update status
                text_48.status = FINISHED
                text_48.setAutoDraw(False)
        
        # *key_resp_guangming1* updates
        waitOnFlip = False
        
        # if key_resp_guangming1 is starting this frame...
        if key_resp_guangming1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_guangming1.frameNStart = frameN  # exact frame index
            key_resp_guangming1.tStart = t  # local t and not account for scr refresh
            key_resp_guangming1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_guangming1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_guangming1.started')
            # update status
            key_resp_guangming1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_guangming1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_guangming1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_guangming1 is stopping this frame...
        if key_resp_guangming1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_guangming1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_guangming1.tStop = t  # not accounting for scr refresh
                key_resp_guangming1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_guangming1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_guangming1.stopped')
                # update status
                key_resp_guangming1.status = FINISHED
                key_resp_guangming1.status = FINISHED
        if key_resp_guangming1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_guangming1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_guangming1_allKeys.extend(theseKeys)
            if len(_key_resp_guangming1_allKeys):
                key_resp_guangming1.keys = _key_resp_guangming1_allKeys[0].name  # just the first key pressed
                key_resp_guangming1.rt = _key_resp_guangming1_allKeys[0].rt
                key_resp_guangming1.duration = _key_resp_guangming1_allKeys[0].duration
                # was this correct?
                if (key_resp_guangming1.keys == str("'right'")) or (key_resp_guangming1.keys == "'right'"):
                    key_resp_guangming1.corr = 1
                else:
                    key_resp_guangming1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_guangming1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_guangming1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_guangming1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_guangming1" ---
    for thisComponent in trial_guangming1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_guangming1
    trial_guangming1.tStop = globalClock.getTime(format='float')
    trial_guangming1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_guangming1.stopped', trial_guangming1.tStop)
    sound_guangming1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_guangming1.keys in ['', [], None]:  # No response was made
        key_resp_guangming1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_guangming1.corr = 1;  # correct non-response
        else:
           key_resp_guangming1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_guangming1.keys',key_resp_guangming1.keys)
    thisExp.addData('key_resp_guangming1.corr', key_resp_guangming1.corr)
    if key_resp_guangming1.keys != None:  # we had a response
        thisExp.addData('key_resp_guangming1.rt', key_resp_guangming1.rt)
        thisExp.addData('key_resp_guangming1.duration', key_resp_guangming1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_guangming1.maxDurationReached:
        routineTimer.addTime(-trial_guangming1.maxDuration)
    elif trial_guangming1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baimao0" ---
    # create an object to store info about Routine trial_baimao0
    trial_baimao0 = data.Routine(
        name='trial_baimao0',
        components=[text_baimao0, sound_baimao0, text_49, text_50, key_resp_baimao0],
    )
    trial_baimao0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baimao0.setSound('audio/baimao0.wav', secs=3.0, hamming=True)
    sound_baimao0.setVolume(1.0, log=False)
    sound_baimao0.seek(0)
    # create starting attributes for key_resp_baimao0
    key_resp_baimao0.keys = []
    key_resp_baimao0.rt = []
    _key_resp_baimao0_allKeys = []
    # store start times for trial_baimao0
    trial_baimao0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baimao0.tStart = globalClock.getTime(format='float')
    trial_baimao0.status = STARTED
    thisExp.addData('trial_baimao0.started', trial_baimao0.tStart)
    trial_baimao0.maxDuration = None
    # keep track of which components have finished
    trial_baimao0Components = trial_baimao0.components
    for thisComponent in trial_baimao0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baimao0" ---
    trial_baimao0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baimao0* updates
        
        # if text_baimao0 is starting this frame...
        if text_baimao0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baimao0.frameNStart = frameN  # exact frame index
            text_baimao0.tStart = t  # local t and not account for scr refresh
            text_baimao0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baimao0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baimao0.started')
            # update status
            text_baimao0.status = STARTED
            text_baimao0.setAutoDraw(True)
        
        # if text_baimao0 is active this frame...
        if text_baimao0.status == STARTED:
            # update params
            pass
        
        # if text_baimao0 is stopping this frame...
        if text_baimao0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baimao0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_baimao0.tStop = t  # not accounting for scr refresh
                text_baimao0.tStopRefresh = tThisFlipGlobal  # on global time
                text_baimao0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baimao0.stopped')
                # update status
                text_baimao0.status = FINISHED
                text_baimao0.setAutoDraw(False)
        
        # *sound_baimao0* updates
        
        # if sound_baimao0 is starting this frame...
        if sound_baimao0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_baimao0.frameNStart = frameN  # exact frame index
            sound_baimao0.tStart = t  # local t and not account for scr refresh
            sound_baimao0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baimao0.started', tThisFlipGlobal)
            # update status
            sound_baimao0.status = STARTED
            sound_baimao0.play(when=win)  # sync with win flip
        
        # if sound_baimao0 is stopping this frame...
        if sound_baimao0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baimao0.tStartRefresh + 3.0-frameTolerance or sound_baimao0.isFinished:
                # keep track of stop time/frame for later
                sound_baimao0.tStop = t  # not accounting for scr refresh
                sound_baimao0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baimao0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baimao0.stopped')
                # update status
                sound_baimao0.status = FINISHED
                sound_baimao0.stop()
        
        # *text_49* updates
        
        # if text_49 is starting this frame...
        if text_49.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_49.frameNStart = frameN  # exact frame index
            text_49.tStart = t  # local t and not account for scr refresh
            text_49.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_49, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_49.started')
            # update status
            text_49.status = STARTED
            text_49.setAutoDraw(True)
        
        # if text_49 is active this frame...
        if text_49.status == STARTED:
            # update params
            pass
        
        # if text_49 is stopping this frame...
        if text_49.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_49.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_49.tStop = t  # not accounting for scr refresh
                text_49.tStopRefresh = tThisFlipGlobal  # on global time
                text_49.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_49.stopped')
                # update status
                text_49.status = FINISHED
                text_49.setAutoDraw(False)
        
        # *text_50* updates
        
        # if text_50 is starting this frame...
        if text_50.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_50.frameNStart = frameN  # exact frame index
            text_50.tStart = t  # local t and not account for scr refresh
            text_50.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_50, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_50.started')
            # update status
            text_50.status = STARTED
            text_50.setAutoDraw(True)
        
        # if text_50 is active this frame...
        if text_50.status == STARTED:
            # update params
            pass
        
        # if text_50 is stopping this frame...
        if text_50.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_50.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_50.tStop = t  # not accounting for scr refresh
                text_50.tStopRefresh = tThisFlipGlobal  # on global time
                text_50.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_50.stopped')
                # update status
                text_50.status = FINISHED
                text_50.setAutoDraw(False)
        
        # *key_resp_baimao0* updates
        waitOnFlip = False
        
        # if key_resp_baimao0 is starting this frame...
        if key_resp_baimao0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baimao0.frameNStart = frameN  # exact frame index
            key_resp_baimao0.tStart = t  # local t and not account for scr refresh
            key_resp_baimao0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baimao0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baimao0.started')
            # update status
            key_resp_baimao0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baimao0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baimao0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baimao0 is stopping this frame...
        if key_resp_baimao0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baimao0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baimao0.tStop = t  # not accounting for scr refresh
                key_resp_baimao0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baimao0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baimao0.stopped')
                # update status
                key_resp_baimao0.status = FINISHED
                key_resp_baimao0.status = FINISHED
        if key_resp_baimao0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baimao0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baimao0_allKeys.extend(theseKeys)
            if len(_key_resp_baimao0_allKeys):
                key_resp_baimao0.keys = _key_resp_baimao0_allKeys[0].name  # just the first key pressed
                key_resp_baimao0.rt = _key_resp_baimao0_allKeys[0].rt
                key_resp_baimao0.duration = _key_resp_baimao0_allKeys[0].duration
                # was this correct?
                if (key_resp_baimao0.keys == str("'left'")) or (key_resp_baimao0.keys == "'left'"):
                    key_resp_baimao0.corr = 1
                else:
                    key_resp_baimao0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baimao0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baimao0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baimao0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baimao0" ---
    for thisComponent in trial_baimao0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baimao0
    trial_baimao0.tStop = globalClock.getTime(format='float')
    trial_baimao0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baimao0.stopped', trial_baimao0.tStop)
    sound_baimao0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baimao0.keys in ['', [], None]:  # No response was made
        key_resp_baimao0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_baimao0.corr = 1;  # correct non-response
        else:
           key_resp_baimao0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baimao0.keys',key_resp_baimao0.keys)
    thisExp.addData('key_resp_baimao0.corr', key_resp_baimao0.corr)
    if key_resp_baimao0.keys != None:  # we had a response
        thisExp.addData('key_resp_baimao0.rt', key_resp_baimao0.rt)
        thisExp.addData('key_resp_baimao0.duration', key_resp_baimao0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baimao0.maxDurationReached:
        routineTimer.addTime(-trial_baimao0.maxDuration)
    elif trial_baimao0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_xiongdi1" ---
    # create an object to store info about Routine trial_xiongdi1
    trial_xiongdi1 = data.Routine(
        name='trial_xiongdi1',
        components=[text_xiongdi1, sound_xiongdi1, text_51, text_52, key_resp_xiongdi1],
    )
    trial_xiongdi1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_xiongdi1.setSound('audio/xiongdi1.wav', secs=3.0, hamming=True)
    sound_xiongdi1.setVolume(1.0, log=False)
    sound_xiongdi1.seek(0)
    # create starting attributes for key_resp_xiongdi1
    key_resp_xiongdi1.keys = []
    key_resp_xiongdi1.rt = []
    _key_resp_xiongdi1_allKeys = []
    # store start times for trial_xiongdi1
    trial_xiongdi1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_xiongdi1.tStart = globalClock.getTime(format='float')
    trial_xiongdi1.status = STARTED
    thisExp.addData('trial_xiongdi1.started', trial_xiongdi1.tStart)
    trial_xiongdi1.maxDuration = None
    # keep track of which components have finished
    trial_xiongdi1Components = trial_xiongdi1.components
    for thisComponent in trial_xiongdi1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_xiongdi1" ---
    trial_xiongdi1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_xiongdi1* updates
        
        # if text_xiongdi1 is starting this frame...
        if text_xiongdi1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_xiongdi1.frameNStart = frameN  # exact frame index
            text_xiongdi1.tStart = t  # local t and not account for scr refresh
            text_xiongdi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_xiongdi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_xiongdi1.started')
            # update status
            text_xiongdi1.status = STARTED
            text_xiongdi1.setAutoDraw(True)
        
        # if text_xiongdi1 is active this frame...
        if text_xiongdi1.status == STARTED:
            # update params
            pass
        
        # if text_xiongdi1 is stopping this frame...
        if text_xiongdi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_xiongdi1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_xiongdi1.tStop = t  # not accounting for scr refresh
                text_xiongdi1.tStopRefresh = tThisFlipGlobal  # on global time
                text_xiongdi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_xiongdi1.stopped')
                # update status
                text_xiongdi1.status = FINISHED
                text_xiongdi1.setAutoDraw(False)
        
        # *sound_xiongdi1* updates
        
        # if sound_xiongdi1 is starting this frame...
        if sound_xiongdi1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_xiongdi1.frameNStart = frameN  # exact frame index
            sound_xiongdi1.tStart = t  # local t and not account for scr refresh
            sound_xiongdi1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_xiongdi1.started', tThisFlipGlobal)
            # update status
            sound_xiongdi1.status = STARTED
            sound_xiongdi1.play(when=win)  # sync with win flip
        
        # if sound_xiongdi1 is stopping this frame...
        if sound_xiongdi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_xiongdi1.tStartRefresh + 3.0-frameTolerance or sound_xiongdi1.isFinished:
                # keep track of stop time/frame for later
                sound_xiongdi1.tStop = t  # not accounting for scr refresh
                sound_xiongdi1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_xiongdi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_xiongdi1.stopped')
                # update status
                sound_xiongdi1.status = FINISHED
                sound_xiongdi1.stop()
        
        # *text_51* updates
        
        # if text_51 is starting this frame...
        if text_51.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_51.frameNStart = frameN  # exact frame index
            text_51.tStart = t  # local t and not account for scr refresh
            text_51.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_51, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_51.started')
            # update status
            text_51.status = STARTED
            text_51.setAutoDraw(True)
        
        # if text_51 is active this frame...
        if text_51.status == STARTED:
            # update params
            pass
        
        # if text_51 is stopping this frame...
        if text_51.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_51.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_51.tStop = t  # not accounting for scr refresh
                text_51.tStopRefresh = tThisFlipGlobal  # on global time
                text_51.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_51.stopped')
                # update status
                text_51.status = FINISHED
                text_51.setAutoDraw(False)
        
        # *text_52* updates
        
        # if text_52 is starting this frame...
        if text_52.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_52.frameNStart = frameN  # exact frame index
            text_52.tStart = t  # local t and not account for scr refresh
            text_52.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_52, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_52.started')
            # update status
            text_52.status = STARTED
            text_52.setAutoDraw(True)
        
        # if text_52 is active this frame...
        if text_52.status == STARTED:
            # update params
            pass
        
        # if text_52 is stopping this frame...
        if text_52.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_52.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_52.tStop = t  # not accounting for scr refresh
                text_52.tStopRefresh = tThisFlipGlobal  # on global time
                text_52.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_52.stopped')
                # update status
                text_52.status = FINISHED
                text_52.setAutoDraw(False)
        
        # *key_resp_xiongdi1* updates
        waitOnFlip = False
        
        # if key_resp_xiongdi1 is starting this frame...
        if key_resp_xiongdi1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_xiongdi1.frameNStart = frameN  # exact frame index
            key_resp_xiongdi1.tStart = t  # local t and not account for scr refresh
            key_resp_xiongdi1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_xiongdi1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_xiongdi1.started')
            # update status
            key_resp_xiongdi1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_xiongdi1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_xiongdi1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_xiongdi1 is stopping this frame...
        if key_resp_xiongdi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_xiongdi1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_xiongdi1.tStop = t  # not accounting for scr refresh
                key_resp_xiongdi1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_xiongdi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_xiongdi1.stopped')
                # update status
                key_resp_xiongdi1.status = FINISHED
                key_resp_xiongdi1.status = FINISHED
        if key_resp_xiongdi1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_xiongdi1.getKeys(keyList=['y','n','left','right','space'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_xiongdi1_allKeys.extend(theseKeys)
            if len(_key_resp_xiongdi1_allKeys):
                key_resp_xiongdi1.keys = _key_resp_xiongdi1_allKeys[0].name  # just the first key pressed
                key_resp_xiongdi1.rt = _key_resp_xiongdi1_allKeys[0].rt
                key_resp_xiongdi1.duration = _key_resp_xiongdi1_allKeys[0].duration
                # was this correct?
                if (key_resp_xiongdi1.keys == str("'right'")) or (key_resp_xiongdi1.keys == "'right'"):
                    key_resp_xiongdi1.corr = 1
                else:
                    key_resp_xiongdi1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_xiongdi1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_xiongdi1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_xiongdi1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_xiongdi1" ---
    for thisComponent in trial_xiongdi1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_xiongdi1
    trial_xiongdi1.tStop = globalClock.getTime(format='float')
    trial_xiongdi1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_xiongdi1.stopped', trial_xiongdi1.tStop)
    sound_xiongdi1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_xiongdi1.keys in ['', [], None]:  # No response was made
        key_resp_xiongdi1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_xiongdi1.corr = 1;  # correct non-response
        else:
           key_resp_xiongdi1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_xiongdi1.keys',key_resp_xiongdi1.keys)
    thisExp.addData('key_resp_xiongdi1.corr', key_resp_xiongdi1.corr)
    if key_resp_xiongdi1.keys != None:  # we had a response
        thisExp.addData('key_resp_xiongdi1.rt', key_resp_xiongdi1.rt)
        thisExp.addData('key_resp_xiongdi1.duration', key_resp_xiongdi1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_xiongdi1.maxDurationReached:
        routineTimer.addTime(-trial_xiongdi1.maxDuration)
    elif trial_xiongdi1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_lianxiang1" ---
    # create an object to store info about Routine trial_lianxiang1
    trial_lianxiang1 = data.Routine(
        name='trial_lianxiang1',
        components=[text_lianxiang1, sound_lianxiang1, text_53, text_54, key_resp_lianxiang1],
    )
    trial_lianxiang1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_lianxiang1.setSound('audio/lianxiang1.wav', secs=3.0, hamming=True)
    sound_lianxiang1.setVolume(1.0, log=False)
    sound_lianxiang1.seek(0)
    # create starting attributes for key_resp_lianxiang1
    key_resp_lianxiang1.keys = []
    key_resp_lianxiang1.rt = []
    _key_resp_lianxiang1_allKeys = []
    # store start times for trial_lianxiang1
    trial_lianxiang1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_lianxiang1.tStart = globalClock.getTime(format='float')
    trial_lianxiang1.status = STARTED
    thisExp.addData('trial_lianxiang1.started', trial_lianxiang1.tStart)
    trial_lianxiang1.maxDuration = None
    # keep track of which components have finished
    trial_lianxiang1Components = trial_lianxiang1.components
    for thisComponent in trial_lianxiang1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_lianxiang1" ---
    trial_lianxiang1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_lianxiang1* updates
        
        # if text_lianxiang1 is starting this frame...
        if text_lianxiang1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_lianxiang1.frameNStart = frameN  # exact frame index
            text_lianxiang1.tStart = t  # local t and not account for scr refresh
            text_lianxiang1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_lianxiang1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_lianxiang1.started')
            # update status
            text_lianxiang1.status = STARTED
            text_lianxiang1.setAutoDraw(True)
        
        # if text_lianxiang1 is active this frame...
        if text_lianxiang1.status == STARTED:
            # update params
            pass
        
        # if text_lianxiang1 is stopping this frame...
        if text_lianxiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_lianxiang1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_lianxiang1.tStop = t  # not accounting for scr refresh
                text_lianxiang1.tStopRefresh = tThisFlipGlobal  # on global time
                text_lianxiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_lianxiang1.stopped')
                # update status
                text_lianxiang1.status = FINISHED
                text_lianxiang1.setAutoDraw(False)
        
        # *sound_lianxiang1* updates
        
        # if sound_lianxiang1 is starting this frame...
        if sound_lianxiang1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_lianxiang1.frameNStart = frameN  # exact frame index
            sound_lianxiang1.tStart = t  # local t and not account for scr refresh
            sound_lianxiang1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_lianxiang1.started', tThisFlipGlobal)
            # update status
            sound_lianxiang1.status = STARTED
            sound_lianxiang1.play(when=win)  # sync with win flip
        
        # if sound_lianxiang1 is stopping this frame...
        if sound_lianxiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_lianxiang1.tStartRefresh + 3.0-frameTolerance or sound_lianxiang1.isFinished:
                # keep track of stop time/frame for later
                sound_lianxiang1.tStop = t  # not accounting for scr refresh
                sound_lianxiang1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_lianxiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_lianxiang1.stopped')
                # update status
                sound_lianxiang1.status = FINISHED
                sound_lianxiang1.stop()
        
        # *text_53* updates
        
        # if text_53 is starting this frame...
        if text_53.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_53.frameNStart = frameN  # exact frame index
            text_53.tStart = t  # local t and not account for scr refresh
            text_53.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_53, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_53.started')
            # update status
            text_53.status = STARTED
            text_53.setAutoDraw(True)
        
        # if text_53 is active this frame...
        if text_53.status == STARTED:
            # update params
            pass
        
        # if text_53 is stopping this frame...
        if text_53.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_53.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_53.tStop = t  # not accounting for scr refresh
                text_53.tStopRefresh = tThisFlipGlobal  # on global time
                text_53.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_53.stopped')
                # update status
                text_53.status = FINISHED
                text_53.setAutoDraw(False)
        
        # *text_54* updates
        
        # if text_54 is starting this frame...
        if text_54.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_54.frameNStart = frameN  # exact frame index
            text_54.tStart = t  # local t and not account for scr refresh
            text_54.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_54, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_54.started')
            # update status
            text_54.status = STARTED
            text_54.setAutoDraw(True)
        
        # if text_54 is active this frame...
        if text_54.status == STARTED:
            # update params
            pass
        
        # if text_54 is stopping this frame...
        if text_54.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_54.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_54.tStop = t  # not accounting for scr refresh
                text_54.tStopRefresh = tThisFlipGlobal  # on global time
                text_54.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_54.stopped')
                # update status
                text_54.status = FINISHED
                text_54.setAutoDraw(False)
        
        # *key_resp_lianxiang1* updates
        waitOnFlip = False
        
        # if key_resp_lianxiang1 is starting this frame...
        if key_resp_lianxiang1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_lianxiang1.frameNStart = frameN  # exact frame index
            key_resp_lianxiang1.tStart = t  # local t and not account for scr refresh
            key_resp_lianxiang1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_lianxiang1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_lianxiang1.started')
            # update status
            key_resp_lianxiang1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_lianxiang1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_lianxiang1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_lianxiang1 is stopping this frame...
        if key_resp_lianxiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_lianxiang1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_lianxiang1.tStop = t  # not accounting for scr refresh
                key_resp_lianxiang1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_lianxiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_lianxiang1.stopped')
                # update status
                key_resp_lianxiang1.status = FINISHED
                key_resp_lianxiang1.status = FINISHED
        if key_resp_lianxiang1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_lianxiang1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_lianxiang1_allKeys.extend(theseKeys)
            if len(_key_resp_lianxiang1_allKeys):
                key_resp_lianxiang1.keys = _key_resp_lianxiang1_allKeys[0].name  # just the first key pressed
                key_resp_lianxiang1.rt = _key_resp_lianxiang1_allKeys[0].rt
                key_resp_lianxiang1.duration = _key_resp_lianxiang1_allKeys[0].duration
                # was this correct?
                if (key_resp_lianxiang1.keys == str("'right'")) or (key_resp_lianxiang1.keys == "'right'"):
                    key_resp_lianxiang1.corr = 1
                else:
                    key_resp_lianxiang1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_lianxiang1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_lianxiang1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_lianxiang1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_lianxiang1" ---
    for thisComponent in trial_lianxiang1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_lianxiang1
    trial_lianxiang1.tStop = globalClock.getTime(format='float')
    trial_lianxiang1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_lianxiang1.stopped', trial_lianxiang1.tStop)
    sound_lianxiang1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_lianxiang1.keys in ['', [], None]:  # No response was made
        key_resp_lianxiang1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_lianxiang1.corr = 1;  # correct non-response
        else:
           key_resp_lianxiang1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_lianxiang1.keys',key_resp_lianxiang1.keys)
    thisExp.addData('key_resp_lianxiang1.corr', key_resp_lianxiang1.corr)
    if key_resp_lianxiang1.keys != None:  # we had a response
        thisExp.addData('key_resp_lianxiang1.rt', key_resp_lianxiang1.rt)
        thisExp.addData('key_resp_lianxiang1.duration', key_resp_lianxiang1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_lianxiang1.maxDurationReached:
        routineTimer.addTime(-trial_lianxiang1.maxDuration)
    elif trial_lianxiang1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_chaguan1" ---
    # create an object to store info about Routine trial_chaguan1
    trial_chaguan1 = data.Routine(
        name='trial_chaguan1',
        components=[text_chaguan1, sound_chaguan1, text_55, text_56, key_resp_chaguan1],
    )
    trial_chaguan1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_chaguan1.setSound('audio/chaguan1.wav', secs=3.0, hamming=True)
    sound_chaguan1.setVolume(1.0, log=False)
    sound_chaguan1.seek(0)
    # create starting attributes for key_resp_chaguan1
    key_resp_chaguan1.keys = []
    key_resp_chaguan1.rt = []
    _key_resp_chaguan1_allKeys = []
    # store start times for trial_chaguan1
    trial_chaguan1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_chaguan1.tStart = globalClock.getTime(format='float')
    trial_chaguan1.status = STARTED
    thisExp.addData('trial_chaguan1.started', trial_chaguan1.tStart)
    trial_chaguan1.maxDuration = None
    # keep track of which components have finished
    trial_chaguan1Components = trial_chaguan1.components
    for thisComponent in trial_chaguan1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_chaguan1" ---
    trial_chaguan1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_chaguan1* updates
        
        # if text_chaguan1 is starting this frame...
        if text_chaguan1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_chaguan1.frameNStart = frameN  # exact frame index
            text_chaguan1.tStart = t  # local t and not account for scr refresh
            text_chaguan1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_chaguan1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_chaguan1.started')
            # update status
            text_chaguan1.status = STARTED
            text_chaguan1.setAutoDraw(True)
        
        # if text_chaguan1 is active this frame...
        if text_chaguan1.status == STARTED:
            # update params
            pass
        
        # if text_chaguan1 is stopping this frame...
        if text_chaguan1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_chaguan1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_chaguan1.tStop = t  # not accounting for scr refresh
                text_chaguan1.tStopRefresh = tThisFlipGlobal  # on global time
                text_chaguan1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_chaguan1.stopped')
                # update status
                text_chaguan1.status = FINISHED
                text_chaguan1.setAutoDraw(False)
        
        # *sound_chaguan1* updates
        
        # if sound_chaguan1 is starting this frame...
        if sound_chaguan1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_chaguan1.frameNStart = frameN  # exact frame index
            sound_chaguan1.tStart = t  # local t and not account for scr refresh
            sound_chaguan1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_chaguan1.started', tThisFlipGlobal)
            # update status
            sound_chaguan1.status = STARTED
            sound_chaguan1.play(when=win)  # sync with win flip
        
        # if sound_chaguan1 is stopping this frame...
        if sound_chaguan1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_chaguan1.tStartRefresh + 3.0-frameTolerance or sound_chaguan1.isFinished:
                # keep track of stop time/frame for later
                sound_chaguan1.tStop = t  # not accounting for scr refresh
                sound_chaguan1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_chaguan1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_chaguan1.stopped')
                # update status
                sound_chaguan1.status = FINISHED
                sound_chaguan1.stop()
        
        # *text_55* updates
        
        # if text_55 is starting this frame...
        if text_55.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_55.frameNStart = frameN  # exact frame index
            text_55.tStart = t  # local t and not account for scr refresh
            text_55.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_55, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_55.started')
            # update status
            text_55.status = STARTED
            text_55.setAutoDraw(True)
        
        # if text_55 is active this frame...
        if text_55.status == STARTED:
            # update params
            pass
        
        # if text_55 is stopping this frame...
        if text_55.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_55.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_55.tStop = t  # not accounting for scr refresh
                text_55.tStopRefresh = tThisFlipGlobal  # on global time
                text_55.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_55.stopped')
                # update status
                text_55.status = FINISHED
                text_55.setAutoDraw(False)
        
        # *text_56* updates
        
        # if text_56 is starting this frame...
        if text_56.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_56.frameNStart = frameN  # exact frame index
            text_56.tStart = t  # local t and not account for scr refresh
            text_56.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_56, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_56.started')
            # update status
            text_56.status = STARTED
            text_56.setAutoDraw(True)
        
        # if text_56 is active this frame...
        if text_56.status == STARTED:
            # update params
            pass
        
        # if text_56 is stopping this frame...
        if text_56.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_56.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_56.tStop = t  # not accounting for scr refresh
                text_56.tStopRefresh = tThisFlipGlobal  # on global time
                text_56.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_56.stopped')
                # update status
                text_56.status = FINISHED
                text_56.setAutoDraw(False)
        
        # *key_resp_chaguan1* updates
        waitOnFlip = False
        
        # if key_resp_chaguan1 is starting this frame...
        if key_resp_chaguan1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_chaguan1.frameNStart = frameN  # exact frame index
            key_resp_chaguan1.tStart = t  # local t and not account for scr refresh
            key_resp_chaguan1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_chaguan1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_chaguan1.started')
            # update status
            key_resp_chaguan1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_chaguan1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_chaguan1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_chaguan1 is stopping this frame...
        if key_resp_chaguan1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_chaguan1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_chaguan1.tStop = t  # not accounting for scr refresh
                key_resp_chaguan1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_chaguan1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_chaguan1.stopped')
                # update status
                key_resp_chaguan1.status = FINISHED
                key_resp_chaguan1.status = FINISHED
        if key_resp_chaguan1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_chaguan1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_chaguan1_allKeys.extend(theseKeys)
            if len(_key_resp_chaguan1_allKeys):
                key_resp_chaguan1.keys = _key_resp_chaguan1_allKeys[0].name  # just the first key pressed
                key_resp_chaguan1.rt = _key_resp_chaguan1_allKeys[0].rt
                key_resp_chaguan1.duration = _key_resp_chaguan1_allKeys[0].duration
                # was this correct?
                if (key_resp_chaguan1.keys == str("'right'")) or (key_resp_chaguan1.keys == "'right'"):
                    key_resp_chaguan1.corr = 1
                else:
                    key_resp_chaguan1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_chaguan1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_chaguan1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_chaguan1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_chaguan1" ---
    for thisComponent in trial_chaguan1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_chaguan1
    trial_chaguan1.tStop = globalClock.getTime(format='float')
    trial_chaguan1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_chaguan1.stopped', trial_chaguan1.tStop)
    sound_chaguan1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_chaguan1.keys in ['', [], None]:  # No response was made
        key_resp_chaguan1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_chaguan1.corr = 1;  # correct non-response
        else:
           key_resp_chaguan1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_chaguan1.keys',key_resp_chaguan1.keys)
    thisExp.addData('key_resp_chaguan1.corr', key_resp_chaguan1.corr)
    if key_resp_chaguan1.keys != None:  # we had a response
        thisExp.addData('key_resp_chaguan1.rt', key_resp_chaguan1.rt)
        thisExp.addData('key_resp_chaguan1.duration', key_resp_chaguan1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_chaguan1.maxDurationReached:
        routineTimer.addTime(-trial_chaguan1.maxDuration)
    elif trial_chaguan1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_mifan" ---
    # create an object to store info about Routine trial_mifan
    trial_mifan = data.Routine(
        name='trial_mifan',
        components=[text_mifan, sound_mifan, text_57, text_58, key_resp_mifan],
    )
    trial_mifan.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_mifan.setSound('audio/mifan.wav', secs=3.0, hamming=True)
    sound_mifan.setVolume(1.0, log=False)
    sound_mifan.seek(0)
    # create starting attributes for key_resp_mifan
    key_resp_mifan.keys = []
    key_resp_mifan.rt = []
    _key_resp_mifan_allKeys = []
    # store start times for trial_mifan
    trial_mifan.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_mifan.tStart = globalClock.getTime(format='float')
    trial_mifan.status = STARTED
    thisExp.addData('trial_mifan.started', trial_mifan.tStart)
    trial_mifan.maxDuration = None
    # keep track of which components have finished
    trial_mifanComponents = trial_mifan.components
    for thisComponent in trial_mifan.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_mifan" ---
    trial_mifan.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_mifan* updates
        
        # if text_mifan is starting this frame...
        if text_mifan.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_mifan.frameNStart = frameN  # exact frame index
            text_mifan.tStart = t  # local t and not account for scr refresh
            text_mifan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_mifan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_mifan.started')
            # update status
            text_mifan.status = STARTED
            text_mifan.setAutoDraw(True)
        
        # if text_mifan is active this frame...
        if text_mifan.status == STARTED:
            # update params
            pass
        
        # if text_mifan is stopping this frame...
        if text_mifan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_mifan.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_mifan.tStop = t  # not accounting for scr refresh
                text_mifan.tStopRefresh = tThisFlipGlobal  # on global time
                text_mifan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_mifan.stopped')
                # update status
                text_mifan.status = FINISHED
                text_mifan.setAutoDraw(False)
        
        # *sound_mifan* updates
        
        # if sound_mifan is starting this frame...
        if sound_mifan.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_mifan.frameNStart = frameN  # exact frame index
            sound_mifan.tStart = t  # local t and not account for scr refresh
            sound_mifan.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_mifan.started', tThisFlipGlobal)
            # update status
            sound_mifan.status = STARTED
            sound_mifan.play(when=win)  # sync with win flip
        
        # if sound_mifan is stopping this frame...
        if sound_mifan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_mifan.tStartRefresh + 3.0-frameTolerance or sound_mifan.isFinished:
                # keep track of stop time/frame for later
                sound_mifan.tStop = t  # not accounting for scr refresh
                sound_mifan.tStopRefresh = tThisFlipGlobal  # on global time
                sound_mifan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_mifan.stopped')
                # update status
                sound_mifan.status = FINISHED
                sound_mifan.stop()
        
        # *text_57* updates
        
        # if text_57 is starting this frame...
        if text_57.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_57.frameNStart = frameN  # exact frame index
            text_57.tStart = t  # local t and not account for scr refresh
            text_57.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_57, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_57.started')
            # update status
            text_57.status = STARTED
            text_57.setAutoDraw(True)
        
        # if text_57 is active this frame...
        if text_57.status == STARTED:
            # update params
            pass
        
        # if text_57 is stopping this frame...
        if text_57.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_57.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_57.tStop = t  # not accounting for scr refresh
                text_57.tStopRefresh = tThisFlipGlobal  # on global time
                text_57.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_57.stopped')
                # update status
                text_57.status = FINISHED
                text_57.setAutoDraw(False)
        
        # *text_58* updates
        
        # if text_58 is starting this frame...
        if text_58.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_58.frameNStart = frameN  # exact frame index
            text_58.tStart = t  # local t and not account for scr refresh
            text_58.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_58, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_58.started')
            # update status
            text_58.status = STARTED
            text_58.setAutoDraw(True)
        
        # if text_58 is active this frame...
        if text_58.status == STARTED:
            # update params
            pass
        
        # if text_58 is stopping this frame...
        if text_58.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_58.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_58.tStop = t  # not accounting for scr refresh
                text_58.tStopRefresh = tThisFlipGlobal  # on global time
                text_58.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_58.stopped')
                # update status
                text_58.status = FINISHED
                text_58.setAutoDraw(False)
        
        # *key_resp_mifan* updates
        waitOnFlip = False
        
        # if key_resp_mifan is starting this frame...
        if key_resp_mifan.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_mifan.frameNStart = frameN  # exact frame index
            key_resp_mifan.tStart = t  # local t and not account for scr refresh
            key_resp_mifan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_mifan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_mifan.started')
            # update status
            key_resp_mifan.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_mifan.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_mifan.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_mifan is stopping this frame...
        if key_resp_mifan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_mifan.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_mifan.tStop = t  # not accounting for scr refresh
                key_resp_mifan.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_mifan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_mifan.stopped')
                # update status
                key_resp_mifan.status = FINISHED
                key_resp_mifan.status = FINISHED
        if key_resp_mifan.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_mifan.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_mifan_allKeys.extend(theseKeys)
            if len(_key_resp_mifan_allKeys):
                key_resp_mifan.keys = _key_resp_mifan_allKeys[0].name  # just the first key pressed
                key_resp_mifan.rt = _key_resp_mifan_allKeys[0].rt
                key_resp_mifan.duration = _key_resp_mifan_allKeys[0].duration
                # was this correct?
                if (key_resp_mifan.keys == str("'left'")) or (key_resp_mifan.keys == "'left'"):
                    key_resp_mifan.corr = 1
                else:
                    key_resp_mifan.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_mifan]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_mifan.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_mifan.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_mifan" ---
    for thisComponent in trial_mifan.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_mifan
    trial_mifan.tStop = globalClock.getTime(format='float')
    trial_mifan.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_mifan.stopped', trial_mifan.tStop)
    sound_mifan.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_mifan.keys in ['', [], None]:  # No response was made
        key_resp_mifan.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_mifan.corr = 1;  # correct non-response
        else:
           key_resp_mifan.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_mifan.keys',key_resp_mifan.keys)
    thisExp.addData('key_resp_mifan.corr', key_resp_mifan.corr)
    if key_resp_mifan.keys != None:  # we had a response
        thisExp.addData('key_resp_mifan.rt', key_resp_mifan.rt)
        thisExp.addData('key_resp_mifan.duration', key_resp_mifan.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_mifan.maxDurationReached:
        routineTimer.addTime(-trial_mifan.maxDuration)
    elif trial_mifan.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baimao1" ---
    # create an object to store info about Routine trial_baimao1
    trial_baimao1 = data.Routine(
        name='trial_baimao1',
        components=[text_baimao1, sound_baimao1, text_59, text_60, key_resp_baimao1],
    )
    trial_baimao1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baimao1.setSound('audio/baimao1.wav', secs=3.0, hamming=True)
    sound_baimao1.setVolume(1.0, log=False)
    sound_baimao1.seek(0)
    # create starting attributes for key_resp_baimao1
    key_resp_baimao1.keys = []
    key_resp_baimao1.rt = []
    _key_resp_baimao1_allKeys = []
    # store start times for trial_baimao1
    trial_baimao1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baimao1.tStart = globalClock.getTime(format='float')
    trial_baimao1.status = STARTED
    thisExp.addData('trial_baimao1.started', trial_baimao1.tStart)
    trial_baimao1.maxDuration = None
    # keep track of which components have finished
    trial_baimao1Components = trial_baimao1.components
    for thisComponent in trial_baimao1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baimao1" ---
    trial_baimao1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baimao1* updates
        
        # if text_baimao1 is starting this frame...
        if text_baimao1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baimao1.frameNStart = frameN  # exact frame index
            text_baimao1.tStart = t  # local t and not account for scr refresh
            text_baimao1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baimao1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baimao1.started')
            # update status
            text_baimao1.status = STARTED
            text_baimao1.setAutoDraw(True)
        
        # if text_baimao1 is active this frame...
        if text_baimao1.status == STARTED:
            # update params
            pass
        
        # if text_baimao1 is stopping this frame...
        if text_baimao1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baimao1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_baimao1.tStop = t  # not accounting for scr refresh
                text_baimao1.tStopRefresh = tThisFlipGlobal  # on global time
                text_baimao1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baimao1.stopped')
                # update status
                text_baimao1.status = FINISHED
                text_baimao1.setAutoDraw(False)
        
        # *sound_baimao1* updates
        
        # if sound_baimao1 is starting this frame...
        if sound_baimao1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_baimao1.frameNStart = frameN  # exact frame index
            sound_baimao1.tStart = t  # local t and not account for scr refresh
            sound_baimao1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baimao1.started', tThisFlipGlobal)
            # update status
            sound_baimao1.status = STARTED
            sound_baimao1.play(when=win)  # sync with win flip
        
        # if sound_baimao1 is stopping this frame...
        if sound_baimao1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baimao1.tStartRefresh + 3.0-frameTolerance or sound_baimao1.isFinished:
                # keep track of stop time/frame for later
                sound_baimao1.tStop = t  # not accounting for scr refresh
                sound_baimao1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baimao1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baimao1.stopped')
                # update status
                sound_baimao1.status = FINISHED
                sound_baimao1.stop()
        
        # *text_59* updates
        
        # if text_59 is starting this frame...
        if text_59.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_59.frameNStart = frameN  # exact frame index
            text_59.tStart = t  # local t and not account for scr refresh
            text_59.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_59, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_59.started')
            # update status
            text_59.status = STARTED
            text_59.setAutoDraw(True)
        
        # if text_59 is active this frame...
        if text_59.status == STARTED:
            # update params
            pass
        
        # if text_59 is stopping this frame...
        if text_59.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_59.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_59.tStop = t  # not accounting for scr refresh
                text_59.tStopRefresh = tThisFlipGlobal  # on global time
                text_59.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_59.stopped')
                # update status
                text_59.status = FINISHED
                text_59.setAutoDraw(False)
        
        # *text_60* updates
        
        # if text_60 is starting this frame...
        if text_60.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_60.frameNStart = frameN  # exact frame index
            text_60.tStart = t  # local t and not account for scr refresh
            text_60.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_60, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_60.started')
            # update status
            text_60.status = STARTED
            text_60.setAutoDraw(True)
        
        # if text_60 is active this frame...
        if text_60.status == STARTED:
            # update params
            pass
        
        # if text_60 is stopping this frame...
        if text_60.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_60.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_60.tStop = t  # not accounting for scr refresh
                text_60.tStopRefresh = tThisFlipGlobal  # on global time
                text_60.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_60.stopped')
                # update status
                text_60.status = FINISHED
                text_60.setAutoDraw(False)
        
        # *key_resp_baimao1* updates
        waitOnFlip = False
        
        # if key_resp_baimao1 is starting this frame...
        if key_resp_baimao1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baimao1.frameNStart = frameN  # exact frame index
            key_resp_baimao1.tStart = t  # local t and not account for scr refresh
            key_resp_baimao1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baimao1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baimao1.started')
            # update status
            key_resp_baimao1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baimao1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baimao1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baimao1 is stopping this frame...
        if key_resp_baimao1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baimao1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baimao1.tStop = t  # not accounting for scr refresh
                key_resp_baimao1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baimao1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baimao1.stopped')
                # update status
                key_resp_baimao1.status = FINISHED
                key_resp_baimao1.status = FINISHED
        if key_resp_baimao1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baimao1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baimao1_allKeys.extend(theseKeys)
            if len(_key_resp_baimao1_allKeys):
                key_resp_baimao1.keys = _key_resp_baimao1_allKeys[0].name  # just the first key pressed
                key_resp_baimao1.rt = _key_resp_baimao1_allKeys[0].rt
                key_resp_baimao1.duration = _key_resp_baimao1_allKeys[0].duration
                # was this correct?
                if (key_resp_baimao1.keys == str("'right'")) or (key_resp_baimao1.keys == "'right'"):
                    key_resp_baimao1.corr = 1
                else:
                    key_resp_baimao1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baimao1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baimao1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baimao1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baimao1" ---
    for thisComponent in trial_baimao1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baimao1
    trial_baimao1.tStop = globalClock.getTime(format='float')
    trial_baimao1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baimao1.stopped', trial_baimao1.tStop)
    sound_baimao1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baimao1.keys in ['', [], None]:  # No response was made
        key_resp_baimao1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_baimao1.corr = 1;  # correct non-response
        else:
           key_resp_baimao1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baimao1.keys',key_resp_baimao1.keys)
    thisExp.addData('key_resp_baimao1.corr', key_resp_baimao1.corr)
    if key_resp_baimao1.keys != None:  # we had a response
        thisExp.addData('key_resp_baimao1.rt', key_resp_baimao1.rt)
        thisExp.addData('key_resp_baimao1.duration', key_resp_baimao1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baimao1.maxDurationReached:
        routineTimer.addTime(-trial_baimao1.maxDuration)
    elif trial_baimao1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_yanjing" ---
    # create an object to store info about Routine trial_yanjing
    trial_yanjing = data.Routine(
        name='trial_yanjing',
        components=[text_yanjing, sound_yanjing, text_61, text_62, key_resp_yanjing],
    )
    trial_yanjing.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_yanjing.setSound('audio/yanjing.wav', secs=3, hamming=True)
    sound_yanjing.setVolume(1.0, log=False)
    sound_yanjing.seek(0)
    # create starting attributes for key_resp_yanjing
    key_resp_yanjing.keys = []
    key_resp_yanjing.rt = []
    _key_resp_yanjing_allKeys = []
    # store start times for trial_yanjing
    trial_yanjing.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_yanjing.tStart = globalClock.getTime(format='float')
    trial_yanjing.status = STARTED
    thisExp.addData('trial_yanjing.started', trial_yanjing.tStart)
    trial_yanjing.maxDuration = None
    # keep track of which components have finished
    trial_yanjingComponents = trial_yanjing.components
    for thisComponent in trial_yanjing.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_yanjing" ---
    trial_yanjing.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_yanjing* updates
        
        # if text_yanjing is starting this frame...
        if text_yanjing.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_yanjing.frameNStart = frameN  # exact frame index
            text_yanjing.tStart = t  # local t and not account for scr refresh
            text_yanjing.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_yanjing, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_yanjing.started')
            # update status
            text_yanjing.status = STARTED
            text_yanjing.setAutoDraw(True)
        
        # if text_yanjing is active this frame...
        if text_yanjing.status == STARTED:
            # update params
            pass
        
        # if text_yanjing is stopping this frame...
        if text_yanjing.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_yanjing.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_yanjing.tStop = t  # not accounting for scr refresh
                text_yanjing.tStopRefresh = tThisFlipGlobal  # on global time
                text_yanjing.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_yanjing.stopped')
                # update status
                text_yanjing.status = FINISHED
                text_yanjing.setAutoDraw(False)
        
        # *sound_yanjing* updates
        
        # if sound_yanjing is starting this frame...
        if sound_yanjing.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_yanjing.frameNStart = frameN  # exact frame index
            sound_yanjing.tStart = t  # local t and not account for scr refresh
            sound_yanjing.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_yanjing.started', tThisFlipGlobal)
            # update status
            sound_yanjing.status = STARTED
            sound_yanjing.play(when=win)  # sync with win flip
        
        # if sound_yanjing is stopping this frame...
        if sound_yanjing.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_yanjing.tStartRefresh + 3-frameTolerance or sound_yanjing.isFinished:
                # keep track of stop time/frame for later
                sound_yanjing.tStop = t  # not accounting for scr refresh
                sound_yanjing.tStopRefresh = tThisFlipGlobal  # on global time
                sound_yanjing.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_yanjing.stopped')
                # update status
                sound_yanjing.status = FINISHED
                sound_yanjing.stop()
        
        # *text_61* updates
        
        # if text_61 is starting this frame...
        if text_61.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_61.frameNStart = frameN  # exact frame index
            text_61.tStart = t  # local t and not account for scr refresh
            text_61.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_61, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_61.started')
            # update status
            text_61.status = STARTED
            text_61.setAutoDraw(True)
        
        # if text_61 is active this frame...
        if text_61.status == STARTED:
            # update params
            pass
        
        # if text_61 is stopping this frame...
        if text_61.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_61.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_61.tStop = t  # not accounting for scr refresh
                text_61.tStopRefresh = tThisFlipGlobal  # on global time
                text_61.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_61.stopped')
                # update status
                text_61.status = FINISHED
                text_61.setAutoDraw(False)
        
        # *text_62* updates
        
        # if text_62 is starting this frame...
        if text_62.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_62.frameNStart = frameN  # exact frame index
            text_62.tStart = t  # local t and not account for scr refresh
            text_62.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_62, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_62.started')
            # update status
            text_62.status = STARTED
            text_62.setAutoDraw(True)
        
        # if text_62 is active this frame...
        if text_62.status == STARTED:
            # update params
            pass
        
        # if text_62 is stopping this frame...
        if text_62.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_62.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_62.tStop = t  # not accounting for scr refresh
                text_62.tStopRefresh = tThisFlipGlobal  # on global time
                text_62.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_62.stopped')
                # update status
                text_62.status = FINISHED
                text_62.setAutoDraw(False)
        
        # *key_resp_yanjing* updates
        waitOnFlip = False
        
        # if key_resp_yanjing is starting this frame...
        if key_resp_yanjing.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_yanjing.frameNStart = frameN  # exact frame index
            key_resp_yanjing.tStart = t  # local t and not account for scr refresh
            key_resp_yanjing.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_yanjing, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_yanjing.started')
            # update status
            key_resp_yanjing.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_yanjing.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_yanjing.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_yanjing is stopping this frame...
        if key_resp_yanjing.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_yanjing.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_yanjing.tStop = t  # not accounting for scr refresh
                key_resp_yanjing.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_yanjing.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_yanjing.stopped')
                # update status
                key_resp_yanjing.status = FINISHED
                key_resp_yanjing.status = FINISHED
        if key_resp_yanjing.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_yanjing.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_yanjing_allKeys.extend(theseKeys)
            if len(_key_resp_yanjing_allKeys):
                key_resp_yanjing.keys = _key_resp_yanjing_allKeys[0].name  # just the first key pressed
                key_resp_yanjing.rt = _key_resp_yanjing_allKeys[0].rt
                key_resp_yanjing.duration = _key_resp_yanjing_allKeys[0].duration
                # was this correct?
                if (key_resp_yanjing.keys == str("'left'")) or (key_resp_yanjing.keys == "'left'"):
                    key_resp_yanjing.corr = 1
                else:
                    key_resp_yanjing.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_yanjing]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_yanjing.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_yanjing.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_yanjing" ---
    for thisComponent in trial_yanjing.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_yanjing
    trial_yanjing.tStop = globalClock.getTime(format='float')
    trial_yanjing.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_yanjing.stopped', trial_yanjing.tStop)
    sound_yanjing.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_yanjing.keys in ['', [], None]:  # No response was made
        key_resp_yanjing.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_yanjing.corr = 1;  # correct non-response
        else:
           key_resp_yanjing.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_yanjing.keys',key_resp_yanjing.keys)
    thisExp.addData('key_resp_yanjing.corr', key_resp_yanjing.corr)
    if key_resp_yanjing.keys != None:  # we had a response
        thisExp.addData('key_resp_yanjing.rt', key_resp_yanjing.rt)
        thisExp.addData('key_resp_yanjing.duration', key_resp_yanjing.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_yanjing.maxDurationReached:
        routineTimer.addTime(-trial_yanjing.maxDuration)
    elif trial_yanjing.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_tiankong" ---
    # create an object to store info about Routine trial_tiankong
    trial_tiankong = data.Routine(
        name='trial_tiankong',
        components=[text_tiankong, sound_tiankong, text_63, text_64, key_resp_tiankong],
    )
    trial_tiankong.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_tiankong.setSound('audio/tiankong.wav', secs=3.0, hamming=True)
    sound_tiankong.setVolume(1.0, log=False)
    sound_tiankong.seek(0)
    # create starting attributes for key_resp_tiankong
    key_resp_tiankong.keys = []
    key_resp_tiankong.rt = []
    _key_resp_tiankong_allKeys = []
    # store start times for trial_tiankong
    trial_tiankong.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_tiankong.tStart = globalClock.getTime(format='float')
    trial_tiankong.status = STARTED
    thisExp.addData('trial_tiankong.started', trial_tiankong.tStart)
    trial_tiankong.maxDuration = None
    # keep track of which components have finished
    trial_tiankongComponents = trial_tiankong.components
    for thisComponent in trial_tiankong.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_tiankong" ---
    trial_tiankong.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_tiankong* updates
        
        # if text_tiankong is starting this frame...
        if text_tiankong.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_tiankong.frameNStart = frameN  # exact frame index
            text_tiankong.tStart = t  # local t and not account for scr refresh
            text_tiankong.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_tiankong, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_tiankong.started')
            # update status
            text_tiankong.status = STARTED
            text_tiankong.setAutoDraw(True)
        
        # if text_tiankong is active this frame...
        if text_tiankong.status == STARTED:
            # update params
            pass
        
        # if text_tiankong is stopping this frame...
        if text_tiankong.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_tiankong.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_tiankong.tStop = t  # not accounting for scr refresh
                text_tiankong.tStopRefresh = tThisFlipGlobal  # on global time
                text_tiankong.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_tiankong.stopped')
                # update status
                text_tiankong.status = FINISHED
                text_tiankong.setAutoDraw(False)
        
        # *sound_tiankong* updates
        
        # if sound_tiankong is starting this frame...
        if sound_tiankong.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_tiankong.frameNStart = frameN  # exact frame index
            sound_tiankong.tStart = t  # local t and not account for scr refresh
            sound_tiankong.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_tiankong.started', tThisFlipGlobal)
            # update status
            sound_tiankong.status = STARTED
            sound_tiankong.play(when=win)  # sync with win flip
        
        # if sound_tiankong is stopping this frame...
        if sound_tiankong.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_tiankong.tStartRefresh + 3.0-frameTolerance or sound_tiankong.isFinished:
                # keep track of stop time/frame for later
                sound_tiankong.tStop = t  # not accounting for scr refresh
                sound_tiankong.tStopRefresh = tThisFlipGlobal  # on global time
                sound_tiankong.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_tiankong.stopped')
                # update status
                sound_tiankong.status = FINISHED
                sound_tiankong.stop()
        
        # *text_63* updates
        
        # if text_63 is starting this frame...
        if text_63.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_63.frameNStart = frameN  # exact frame index
            text_63.tStart = t  # local t and not account for scr refresh
            text_63.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_63, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_63.started')
            # update status
            text_63.status = STARTED
            text_63.setAutoDraw(True)
        
        # if text_63 is active this frame...
        if text_63.status == STARTED:
            # update params
            pass
        
        # if text_63 is stopping this frame...
        if text_63.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_63.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_63.tStop = t  # not accounting for scr refresh
                text_63.tStopRefresh = tThisFlipGlobal  # on global time
                text_63.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_63.stopped')
                # update status
                text_63.status = FINISHED
                text_63.setAutoDraw(False)
        
        # *text_64* updates
        
        # if text_64 is starting this frame...
        if text_64.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_64.frameNStart = frameN  # exact frame index
            text_64.tStart = t  # local t and not account for scr refresh
            text_64.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_64, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_64.started')
            # update status
            text_64.status = STARTED
            text_64.setAutoDraw(True)
        
        # if text_64 is active this frame...
        if text_64.status == STARTED:
            # update params
            pass
        
        # if text_64 is stopping this frame...
        if text_64.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_64.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_64.tStop = t  # not accounting for scr refresh
                text_64.tStopRefresh = tThisFlipGlobal  # on global time
                text_64.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_64.stopped')
                # update status
                text_64.status = FINISHED
                text_64.setAutoDraw(False)
        
        # *key_resp_tiankong* updates
        waitOnFlip = False
        
        # if key_resp_tiankong is starting this frame...
        if key_resp_tiankong.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_tiankong.frameNStart = frameN  # exact frame index
            key_resp_tiankong.tStart = t  # local t and not account for scr refresh
            key_resp_tiankong.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_tiankong, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_tiankong.started')
            # update status
            key_resp_tiankong.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_tiankong.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_tiankong.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_tiankong is stopping this frame...
        if key_resp_tiankong.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_tiankong.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_tiankong.tStop = t  # not accounting for scr refresh
                key_resp_tiankong.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_tiankong.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_tiankong.stopped')
                # update status
                key_resp_tiankong.status = FINISHED
                key_resp_tiankong.status = FINISHED
        if key_resp_tiankong.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_tiankong.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_tiankong_allKeys.extend(theseKeys)
            if len(_key_resp_tiankong_allKeys):
                key_resp_tiankong.keys = _key_resp_tiankong_allKeys[0].name  # just the first key pressed
                key_resp_tiankong.rt = _key_resp_tiankong_allKeys[0].rt
                key_resp_tiankong.duration = _key_resp_tiankong_allKeys[0].duration
                # was this correct?
                if (key_resp_tiankong.keys == str("'left'")) or (key_resp_tiankong.keys == "'left'"):
                    key_resp_tiankong.corr = 1
                else:
                    key_resp_tiankong.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_tiankong]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_tiankong.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_tiankong.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_tiankong" ---
    for thisComponent in trial_tiankong.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_tiankong
    trial_tiankong.tStop = globalClock.getTime(format='float')
    trial_tiankong.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_tiankong.stopped', trial_tiankong.tStop)
    sound_tiankong.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_tiankong.keys in ['', [], None]:  # No response was made
        key_resp_tiankong.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_tiankong.corr = 1;  # correct non-response
        else:
           key_resp_tiankong.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_tiankong.keys',key_resp_tiankong.keys)
    thisExp.addData('key_resp_tiankong.corr', key_resp_tiankong.corr)
    if key_resp_tiankong.keys != None:  # we had a response
        thisExp.addData('key_resp_tiankong.rt', key_resp_tiankong.rt)
        thisExp.addData('key_resp_tiankong.duration', key_resp_tiankong.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_tiankong.maxDurationReached:
        routineTimer.addTime(-trial_tiankong.maxDuration)
    elif trial_tiankong.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_luotuo1" ---
    # create an object to store info about Routine trial_luotuo1
    trial_luotuo1 = data.Routine(
        name='trial_luotuo1',
        components=[text_luotuo1, sound_luotuo1, text_65, text_66, key_resp_luotuo1],
    )
    trial_luotuo1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_luotuo1.setSound('audio/luotuo1.wav', secs=3, hamming=True)
    sound_luotuo1.setVolume(1.0, log=False)
    sound_luotuo1.seek(0)
    # create starting attributes for key_resp_luotuo1
    key_resp_luotuo1.keys = []
    key_resp_luotuo1.rt = []
    _key_resp_luotuo1_allKeys = []
    # store start times for trial_luotuo1
    trial_luotuo1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_luotuo1.tStart = globalClock.getTime(format='float')
    trial_luotuo1.status = STARTED
    thisExp.addData('trial_luotuo1.started', trial_luotuo1.tStart)
    trial_luotuo1.maxDuration = None
    # keep track of which components have finished
    trial_luotuo1Components = trial_luotuo1.components
    for thisComponent in trial_luotuo1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_luotuo1" ---
    trial_luotuo1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_luotuo1* updates
        
        # if text_luotuo1 is starting this frame...
        if text_luotuo1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_luotuo1.frameNStart = frameN  # exact frame index
            text_luotuo1.tStart = t  # local t and not account for scr refresh
            text_luotuo1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_luotuo1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_luotuo1.started')
            # update status
            text_luotuo1.status = STARTED
            text_luotuo1.setAutoDraw(True)
        
        # if text_luotuo1 is active this frame...
        if text_luotuo1.status == STARTED:
            # update params
            pass
        
        # if text_luotuo1 is stopping this frame...
        if text_luotuo1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_luotuo1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_luotuo1.tStop = t  # not accounting for scr refresh
                text_luotuo1.tStopRefresh = tThisFlipGlobal  # on global time
                text_luotuo1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_luotuo1.stopped')
                # update status
                text_luotuo1.status = FINISHED
                text_luotuo1.setAutoDraw(False)
        
        # *sound_luotuo1* updates
        
        # if sound_luotuo1 is starting this frame...
        if sound_luotuo1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_luotuo1.frameNStart = frameN  # exact frame index
            sound_luotuo1.tStart = t  # local t and not account for scr refresh
            sound_luotuo1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_luotuo1.started', tThisFlipGlobal)
            # update status
            sound_luotuo1.status = STARTED
            sound_luotuo1.play(when=win)  # sync with win flip
        
        # if sound_luotuo1 is stopping this frame...
        if sound_luotuo1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_luotuo1.tStartRefresh + 3-frameTolerance or sound_luotuo1.isFinished:
                # keep track of stop time/frame for later
                sound_luotuo1.tStop = t  # not accounting for scr refresh
                sound_luotuo1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_luotuo1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_luotuo1.stopped')
                # update status
                sound_luotuo1.status = FINISHED
                sound_luotuo1.stop()
        
        # *text_65* updates
        
        # if text_65 is starting this frame...
        if text_65.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_65.frameNStart = frameN  # exact frame index
            text_65.tStart = t  # local t and not account for scr refresh
            text_65.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_65, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_65.started')
            # update status
            text_65.status = STARTED
            text_65.setAutoDraw(True)
        
        # if text_65 is active this frame...
        if text_65.status == STARTED:
            # update params
            pass
        
        # if text_65 is stopping this frame...
        if text_65.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_65.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_65.tStop = t  # not accounting for scr refresh
                text_65.tStopRefresh = tThisFlipGlobal  # on global time
                text_65.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_65.stopped')
                # update status
                text_65.status = FINISHED
                text_65.setAutoDraw(False)
        
        # *text_66* updates
        
        # if text_66 is starting this frame...
        if text_66.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_66.frameNStart = frameN  # exact frame index
            text_66.tStart = t  # local t and not account for scr refresh
            text_66.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_66, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_66.started')
            # update status
            text_66.status = STARTED
            text_66.setAutoDraw(True)
        
        # if text_66 is active this frame...
        if text_66.status == STARTED:
            # update params
            pass
        
        # if text_66 is stopping this frame...
        if text_66.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_66.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_66.tStop = t  # not accounting for scr refresh
                text_66.tStopRefresh = tThisFlipGlobal  # on global time
                text_66.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_66.stopped')
                # update status
                text_66.status = FINISHED
                text_66.setAutoDraw(False)
        
        # *key_resp_luotuo1* updates
        waitOnFlip = False
        
        # if key_resp_luotuo1 is starting this frame...
        if key_resp_luotuo1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_luotuo1.frameNStart = frameN  # exact frame index
            key_resp_luotuo1.tStart = t  # local t and not account for scr refresh
            key_resp_luotuo1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_luotuo1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_luotuo1.started')
            # update status
            key_resp_luotuo1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_luotuo1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_luotuo1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_luotuo1 is stopping this frame...
        if key_resp_luotuo1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_luotuo1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_luotuo1.tStop = t  # not accounting for scr refresh
                key_resp_luotuo1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_luotuo1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_luotuo1.stopped')
                # update status
                key_resp_luotuo1.status = FINISHED
                key_resp_luotuo1.status = FINISHED
        if key_resp_luotuo1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_luotuo1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_luotuo1_allKeys.extend(theseKeys)
            if len(_key_resp_luotuo1_allKeys):
                key_resp_luotuo1.keys = _key_resp_luotuo1_allKeys[0].name  # just the first key pressed
                key_resp_luotuo1.rt = _key_resp_luotuo1_allKeys[0].rt
                key_resp_luotuo1.duration = _key_resp_luotuo1_allKeys[0].duration
                # was this correct?
                if (key_resp_luotuo1.keys == str("'right'")) or (key_resp_luotuo1.keys == "'right'"):
                    key_resp_luotuo1.corr = 1
                else:
                    key_resp_luotuo1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_luotuo1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_luotuo1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_luotuo1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_luotuo1" ---
    for thisComponent in trial_luotuo1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_luotuo1
    trial_luotuo1.tStop = globalClock.getTime(format='float')
    trial_luotuo1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_luotuo1.stopped', trial_luotuo1.tStop)
    sound_luotuo1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_luotuo1.keys in ['', [], None]:  # No response was made
        key_resp_luotuo1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_luotuo1.corr = 1;  # correct non-response
        else:
           key_resp_luotuo1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_luotuo1.keys',key_resp_luotuo1.keys)
    thisExp.addData('key_resp_luotuo1.corr', key_resp_luotuo1.corr)
    if key_resp_luotuo1.keys != None:  # we had a response
        thisExp.addData('key_resp_luotuo1.rt', key_resp_luotuo1.rt)
        thisExp.addData('key_resp_luotuo1.duration', key_resp_luotuo1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_luotuo1.maxDurationReached:
        routineTimer.addTime(-trial_luotuo1.maxDuration)
    elif trial_luotuo1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_fuqin1" ---
    # create an object to store info about Routine trial_fuqin1
    trial_fuqin1 = data.Routine(
        name='trial_fuqin1',
        components=[text_fuqin1, sound_fuqin1, text_67, text_68, key_resp_fuqin1],
    )
    trial_fuqin1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_fuqin1.setSound('audio/fuqin1.wav', secs=3.0, hamming=True)
    sound_fuqin1.setVolume(1.0, log=False)
    sound_fuqin1.seek(0)
    # create starting attributes for key_resp_fuqin1
    key_resp_fuqin1.keys = []
    key_resp_fuqin1.rt = []
    _key_resp_fuqin1_allKeys = []
    # store start times for trial_fuqin1
    trial_fuqin1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_fuqin1.tStart = globalClock.getTime(format='float')
    trial_fuqin1.status = STARTED
    thisExp.addData('trial_fuqin1.started', trial_fuqin1.tStart)
    trial_fuqin1.maxDuration = None
    # keep track of which components have finished
    trial_fuqin1Components = trial_fuqin1.components
    for thisComponent in trial_fuqin1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_fuqin1" ---
    trial_fuqin1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_fuqin1* updates
        
        # if text_fuqin1 is starting this frame...
        if text_fuqin1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_fuqin1.frameNStart = frameN  # exact frame index
            text_fuqin1.tStart = t  # local t and not account for scr refresh
            text_fuqin1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_fuqin1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_fuqin1.started')
            # update status
            text_fuqin1.status = STARTED
            text_fuqin1.setAutoDraw(True)
        
        # if text_fuqin1 is active this frame...
        if text_fuqin1.status == STARTED:
            # update params
            pass
        
        # if text_fuqin1 is stopping this frame...
        if text_fuqin1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_fuqin1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_fuqin1.tStop = t  # not accounting for scr refresh
                text_fuqin1.tStopRefresh = tThisFlipGlobal  # on global time
                text_fuqin1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_fuqin1.stopped')
                # update status
                text_fuqin1.status = FINISHED
                text_fuqin1.setAutoDraw(False)
        
        # *sound_fuqin1* updates
        
        # if sound_fuqin1 is starting this frame...
        if sound_fuqin1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_fuqin1.frameNStart = frameN  # exact frame index
            sound_fuqin1.tStart = t  # local t and not account for scr refresh
            sound_fuqin1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_fuqin1.started', tThisFlipGlobal)
            # update status
            sound_fuqin1.status = STARTED
            sound_fuqin1.play(when=win)  # sync with win flip
        
        # if sound_fuqin1 is stopping this frame...
        if sound_fuqin1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_fuqin1.tStartRefresh + 3.0-frameTolerance or sound_fuqin1.isFinished:
                # keep track of stop time/frame for later
                sound_fuqin1.tStop = t  # not accounting for scr refresh
                sound_fuqin1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_fuqin1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_fuqin1.stopped')
                # update status
                sound_fuqin1.status = FINISHED
                sound_fuqin1.stop()
        
        # *text_67* updates
        
        # if text_67 is starting this frame...
        if text_67.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_67.frameNStart = frameN  # exact frame index
            text_67.tStart = t  # local t and not account for scr refresh
            text_67.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_67, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_67.started')
            # update status
            text_67.status = STARTED
            text_67.setAutoDraw(True)
        
        # if text_67 is active this frame...
        if text_67.status == STARTED:
            # update params
            pass
        
        # if text_67 is stopping this frame...
        if text_67.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_67.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_67.tStop = t  # not accounting for scr refresh
                text_67.tStopRefresh = tThisFlipGlobal  # on global time
                text_67.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_67.stopped')
                # update status
                text_67.status = FINISHED
                text_67.setAutoDraw(False)
        
        # *text_68* updates
        
        # if text_68 is starting this frame...
        if text_68.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_68.frameNStart = frameN  # exact frame index
            text_68.tStart = t  # local t and not account for scr refresh
            text_68.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_68, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_68.started')
            # update status
            text_68.status = STARTED
            text_68.setAutoDraw(True)
        
        # if text_68 is active this frame...
        if text_68.status == STARTED:
            # update params
            pass
        
        # if text_68 is stopping this frame...
        if text_68.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_68.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_68.tStop = t  # not accounting for scr refresh
                text_68.tStopRefresh = tThisFlipGlobal  # on global time
                text_68.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_68.stopped')
                # update status
                text_68.status = FINISHED
                text_68.setAutoDraw(False)
        
        # *key_resp_fuqin1* updates
        waitOnFlip = False
        
        # if key_resp_fuqin1 is starting this frame...
        if key_resp_fuqin1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_fuqin1.frameNStart = frameN  # exact frame index
            key_resp_fuqin1.tStart = t  # local t and not account for scr refresh
            key_resp_fuqin1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_fuqin1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_fuqin1.started')
            # update status
            key_resp_fuqin1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_fuqin1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_fuqin1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_fuqin1 is stopping this frame...
        if key_resp_fuqin1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_fuqin1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_fuqin1.tStop = t  # not accounting for scr refresh
                key_resp_fuqin1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_fuqin1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_fuqin1.stopped')
                # update status
                key_resp_fuqin1.status = FINISHED
                key_resp_fuqin1.status = FINISHED
        if key_resp_fuqin1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_fuqin1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_fuqin1_allKeys.extend(theseKeys)
            if len(_key_resp_fuqin1_allKeys):
                key_resp_fuqin1.keys = _key_resp_fuqin1_allKeys[0].name  # just the first key pressed
                key_resp_fuqin1.rt = _key_resp_fuqin1_allKeys[0].rt
                key_resp_fuqin1.duration = _key_resp_fuqin1_allKeys[0].duration
                # was this correct?
                if (key_resp_fuqin1.keys == str("'right'")) or (key_resp_fuqin1.keys == "'right'"):
                    key_resp_fuqin1.corr = 1
                else:
                    key_resp_fuqin1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_fuqin1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_fuqin1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_fuqin1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_fuqin1" ---
    for thisComponent in trial_fuqin1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_fuqin1
    trial_fuqin1.tStop = globalClock.getTime(format='float')
    trial_fuqin1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_fuqin1.stopped', trial_fuqin1.tStop)
    sound_fuqin1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_fuqin1.keys in ['', [], None]:  # No response was made
        key_resp_fuqin1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_fuqin1.corr = 1;  # correct non-response
        else:
           key_resp_fuqin1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_fuqin1.keys',key_resp_fuqin1.keys)
    thisExp.addData('key_resp_fuqin1.corr', key_resp_fuqin1.corr)
    if key_resp_fuqin1.keys != None:  # we had a response
        thisExp.addData('key_resp_fuqin1.rt', key_resp_fuqin1.rt)
        thisExp.addData('key_resp_fuqin1.duration', key_resp_fuqin1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_fuqin1.maxDurationReached:
        routineTimer.addTime(-trial_fuqin1.maxDuration)
    elif trial_fuqin1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_luotuo0" ---
    # create an object to store info about Routine trial_luotuo0
    trial_luotuo0 = data.Routine(
        name='trial_luotuo0',
        components=[text_luotuo0, sound_luotuo0, text_69, text_70, key_resp_luotuo0],
    )
    trial_luotuo0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_luotuo0.setSound('audio/luotuo0.wav', secs=3, hamming=True)
    sound_luotuo0.setVolume(1.0, log=False)
    sound_luotuo0.seek(0)
    # create starting attributes for key_resp_luotuo0
    key_resp_luotuo0.keys = []
    key_resp_luotuo0.rt = []
    _key_resp_luotuo0_allKeys = []
    # store start times for trial_luotuo0
    trial_luotuo0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_luotuo0.tStart = globalClock.getTime(format='float')
    trial_luotuo0.status = STARTED
    thisExp.addData('trial_luotuo0.started', trial_luotuo0.tStart)
    trial_luotuo0.maxDuration = None
    # keep track of which components have finished
    trial_luotuo0Components = trial_luotuo0.components
    for thisComponent in trial_luotuo0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_luotuo0" ---
    trial_luotuo0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_luotuo0* updates
        
        # if text_luotuo0 is starting this frame...
        if text_luotuo0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_luotuo0.frameNStart = frameN  # exact frame index
            text_luotuo0.tStart = t  # local t and not account for scr refresh
            text_luotuo0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_luotuo0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_luotuo0.started')
            # update status
            text_luotuo0.status = STARTED
            text_luotuo0.setAutoDraw(True)
        
        # if text_luotuo0 is active this frame...
        if text_luotuo0.status == STARTED:
            # update params
            pass
        
        # if text_luotuo0 is stopping this frame...
        if text_luotuo0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_luotuo0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_luotuo0.tStop = t  # not accounting for scr refresh
                text_luotuo0.tStopRefresh = tThisFlipGlobal  # on global time
                text_luotuo0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_luotuo0.stopped')
                # update status
                text_luotuo0.status = FINISHED
                text_luotuo0.setAutoDraw(False)
        
        # *sound_luotuo0* updates
        
        # if sound_luotuo0 is starting this frame...
        if sound_luotuo0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_luotuo0.frameNStart = frameN  # exact frame index
            sound_luotuo0.tStart = t  # local t and not account for scr refresh
            sound_luotuo0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_luotuo0.started', tThisFlipGlobal)
            # update status
            sound_luotuo0.status = STARTED
            sound_luotuo0.play(when=win)  # sync with win flip
        
        # if sound_luotuo0 is stopping this frame...
        if sound_luotuo0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_luotuo0.tStartRefresh + 3-frameTolerance or sound_luotuo0.isFinished:
                # keep track of stop time/frame for later
                sound_luotuo0.tStop = t  # not accounting for scr refresh
                sound_luotuo0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_luotuo0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_luotuo0.stopped')
                # update status
                sound_luotuo0.status = FINISHED
                sound_luotuo0.stop()
        
        # *text_69* updates
        
        # if text_69 is starting this frame...
        if text_69.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_69.frameNStart = frameN  # exact frame index
            text_69.tStart = t  # local t and not account for scr refresh
            text_69.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_69, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_69.started')
            # update status
            text_69.status = STARTED
            text_69.setAutoDraw(True)
        
        # if text_69 is active this frame...
        if text_69.status == STARTED:
            # update params
            pass
        
        # if text_69 is stopping this frame...
        if text_69.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_69.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_69.tStop = t  # not accounting for scr refresh
                text_69.tStopRefresh = tThisFlipGlobal  # on global time
                text_69.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_69.stopped')
                # update status
                text_69.status = FINISHED
                text_69.setAutoDraw(False)
        
        # *text_70* updates
        
        # if text_70 is starting this frame...
        if text_70.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_70.frameNStart = frameN  # exact frame index
            text_70.tStart = t  # local t and not account for scr refresh
            text_70.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_70, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_70.started')
            # update status
            text_70.status = STARTED
            text_70.setAutoDraw(True)
        
        # if text_70 is active this frame...
        if text_70.status == STARTED:
            # update params
            pass
        
        # if text_70 is stopping this frame...
        if text_70.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_70.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_70.tStop = t  # not accounting for scr refresh
                text_70.tStopRefresh = tThisFlipGlobal  # on global time
                text_70.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_70.stopped')
                # update status
                text_70.status = FINISHED
                text_70.setAutoDraw(False)
        
        # *key_resp_luotuo0* updates
        waitOnFlip = False
        
        # if key_resp_luotuo0 is starting this frame...
        if key_resp_luotuo0.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_luotuo0.frameNStart = frameN  # exact frame index
            key_resp_luotuo0.tStart = t  # local t and not account for scr refresh
            key_resp_luotuo0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_luotuo0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_luotuo0.started')
            # update status
            key_resp_luotuo0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_luotuo0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_luotuo0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_luotuo0 is stopping this frame...
        if key_resp_luotuo0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_luotuo0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_luotuo0.tStop = t  # not accounting for scr refresh
                key_resp_luotuo0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_luotuo0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_luotuo0.stopped')
                # update status
                key_resp_luotuo0.status = FINISHED
                key_resp_luotuo0.status = FINISHED
        if key_resp_luotuo0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_luotuo0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_luotuo0_allKeys.extend(theseKeys)
            if len(_key_resp_luotuo0_allKeys):
                key_resp_luotuo0.keys = _key_resp_luotuo0_allKeys[0].name  # just the first key pressed
                key_resp_luotuo0.rt = _key_resp_luotuo0_allKeys[0].rt
                key_resp_luotuo0.duration = _key_resp_luotuo0_allKeys[0].duration
                # was this correct?
                if (key_resp_luotuo0.keys == str("'left'")) or (key_resp_luotuo0.keys == "'left'"):
                    key_resp_luotuo0.corr = 1
                else:
                    key_resp_luotuo0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_luotuo0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_luotuo0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_luotuo0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_luotuo0" ---
    for thisComponent in trial_luotuo0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_luotuo0
    trial_luotuo0.tStop = globalClock.getTime(format='float')
    trial_luotuo0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_luotuo0.stopped', trial_luotuo0.tStop)
    sound_luotuo0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_luotuo0.keys in ['', [], None]:  # No response was made
        key_resp_luotuo0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_luotuo0.corr = 1;  # correct non-response
        else:
           key_resp_luotuo0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_luotuo0.keys',key_resp_luotuo0.keys)
    thisExp.addData('key_resp_luotuo0.corr', key_resp_luotuo0.corr)
    if key_resp_luotuo0.keys != None:  # we had a response
        thisExp.addData('key_resp_luotuo0.rt', key_resp_luotuo0.rt)
        thisExp.addData('key_resp_luotuo0.duration', key_resp_luotuo0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_luotuo0.maxDurationReached:
        routineTimer.addTime(-trial_luotuo0.maxDuration)
    elif trial_luotuo0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_weicheng0" ---
    # create an object to store info about Routine trial_weicheng0
    trial_weicheng0 = data.Routine(
        name='trial_weicheng0',
        components=[text_weicheng0, sound_weicheng0, text_71, text_72, key_resp_weicheng0],
    )
    trial_weicheng0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_weicheng0.setSound('audio/weicheng0.wav', secs=3, hamming=True)
    sound_weicheng0.setVolume(1.0, log=False)
    sound_weicheng0.seek(0)
    # create starting attributes for key_resp_weicheng0
    key_resp_weicheng0.keys = []
    key_resp_weicheng0.rt = []
    _key_resp_weicheng0_allKeys = []
    # store start times for trial_weicheng0
    trial_weicheng0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_weicheng0.tStart = globalClock.getTime(format='float')
    trial_weicheng0.status = STARTED
    thisExp.addData('trial_weicheng0.started', trial_weicheng0.tStart)
    trial_weicheng0.maxDuration = None
    # keep track of which components have finished
    trial_weicheng0Components = trial_weicheng0.components
    for thisComponent in trial_weicheng0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_weicheng0" ---
    trial_weicheng0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_weicheng0* updates
        
        # if text_weicheng0 is starting this frame...
        if text_weicheng0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_weicheng0.frameNStart = frameN  # exact frame index
            text_weicheng0.tStart = t  # local t and not account for scr refresh
            text_weicheng0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_weicheng0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_weicheng0.started')
            # update status
            text_weicheng0.status = STARTED
            text_weicheng0.setAutoDraw(True)
        
        # if text_weicheng0 is active this frame...
        if text_weicheng0.status == STARTED:
            # update params
            pass
        
        # if text_weicheng0 is stopping this frame...
        if text_weicheng0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_weicheng0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_weicheng0.tStop = t  # not accounting for scr refresh
                text_weicheng0.tStopRefresh = tThisFlipGlobal  # on global time
                text_weicheng0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_weicheng0.stopped')
                # update status
                text_weicheng0.status = FINISHED
                text_weicheng0.setAutoDraw(False)
        
        # *sound_weicheng0* updates
        
        # if sound_weicheng0 is starting this frame...
        if sound_weicheng0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_weicheng0.frameNStart = frameN  # exact frame index
            sound_weicheng0.tStart = t  # local t and not account for scr refresh
            sound_weicheng0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_weicheng0.started', tThisFlipGlobal)
            # update status
            sound_weicheng0.status = STARTED
            sound_weicheng0.play(when=win)  # sync with win flip
        
        # if sound_weicheng0 is stopping this frame...
        if sound_weicheng0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_weicheng0.tStartRefresh + 3-frameTolerance or sound_weicheng0.isFinished:
                # keep track of stop time/frame for later
                sound_weicheng0.tStop = t  # not accounting for scr refresh
                sound_weicheng0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_weicheng0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_weicheng0.stopped')
                # update status
                sound_weicheng0.status = FINISHED
                sound_weicheng0.stop()
        
        # *text_71* updates
        
        # if text_71 is starting this frame...
        if text_71.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_71.frameNStart = frameN  # exact frame index
            text_71.tStart = t  # local t and not account for scr refresh
            text_71.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_71, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_71.started')
            # update status
            text_71.status = STARTED
            text_71.setAutoDraw(True)
        
        # if text_71 is active this frame...
        if text_71.status == STARTED:
            # update params
            pass
        
        # if text_71 is stopping this frame...
        if text_71.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_71.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_71.tStop = t  # not accounting for scr refresh
                text_71.tStopRefresh = tThisFlipGlobal  # on global time
                text_71.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_71.stopped')
                # update status
                text_71.status = FINISHED
                text_71.setAutoDraw(False)
        
        # *text_72* updates
        
        # if text_72 is starting this frame...
        if text_72.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_72.frameNStart = frameN  # exact frame index
            text_72.tStart = t  # local t and not account for scr refresh
            text_72.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_72, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_72.started')
            # update status
            text_72.status = STARTED
            text_72.setAutoDraw(True)
        
        # if text_72 is active this frame...
        if text_72.status == STARTED:
            # update params
            pass
        
        # if text_72 is stopping this frame...
        if text_72.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_72.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_72.tStop = t  # not accounting for scr refresh
                text_72.tStopRefresh = tThisFlipGlobal  # on global time
                text_72.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_72.stopped')
                # update status
                text_72.status = FINISHED
                text_72.setAutoDraw(False)
        
        # *key_resp_weicheng0* updates
        waitOnFlip = False
        
        # if key_resp_weicheng0 is starting this frame...
        if key_resp_weicheng0.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_weicheng0.frameNStart = frameN  # exact frame index
            key_resp_weicheng0.tStart = t  # local t and not account for scr refresh
            key_resp_weicheng0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_weicheng0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_weicheng0.started')
            # update status
            key_resp_weicheng0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_weicheng0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_weicheng0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_weicheng0 is stopping this frame...
        if key_resp_weicheng0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_weicheng0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_weicheng0.tStop = t  # not accounting for scr refresh
                key_resp_weicheng0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_weicheng0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_weicheng0.stopped')
                # update status
                key_resp_weicheng0.status = FINISHED
                key_resp_weicheng0.status = FINISHED
        if key_resp_weicheng0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_weicheng0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_weicheng0_allKeys.extend(theseKeys)
            if len(_key_resp_weicheng0_allKeys):
                key_resp_weicheng0.keys = _key_resp_weicheng0_allKeys[0].name  # just the first key pressed
                key_resp_weicheng0.rt = _key_resp_weicheng0_allKeys[0].rt
                key_resp_weicheng0.duration = _key_resp_weicheng0_allKeys[0].duration
                # was this correct?
                if (key_resp_weicheng0.keys == str("'left'")) or (key_resp_weicheng0.keys == "'left'"):
                    key_resp_weicheng0.corr = 1
                else:
                    key_resp_weicheng0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_weicheng0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_weicheng0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_weicheng0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_weicheng0" ---
    for thisComponent in trial_weicheng0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_weicheng0
    trial_weicheng0.tStop = globalClock.getTime(format='float')
    trial_weicheng0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_weicheng0.stopped', trial_weicheng0.tStop)
    sound_weicheng0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_weicheng0.keys in ['', [], None]:  # No response was made
        key_resp_weicheng0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_weicheng0.corr = 1;  # correct non-response
        else:
           key_resp_weicheng0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_weicheng0.keys',key_resp_weicheng0.keys)
    thisExp.addData('key_resp_weicheng0.corr', key_resp_weicheng0.corr)
    if key_resp_weicheng0.keys != None:  # we had a response
        thisExp.addData('key_resp_weicheng0.rt', key_resp_weicheng0.rt)
        thisExp.addData('key_resp_weicheng0.duration', key_resp_weicheng0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_weicheng0.maxDurationReached:
        routineTimer.addTime(-trial_weicheng0.maxDuration)
    elif trial_weicheng0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_chuanghu" ---
    # create an object to store info about Routine trial_chuanghu
    trial_chuanghu = data.Routine(
        name='trial_chuanghu',
        components=[text_chuanghu, sound_chuanghu, text_73, text_74, key_resp_chuanghu],
    )
    trial_chuanghu.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_chuanghu.setSound('audio/chuanghu.wav', secs=3.0, hamming=True)
    sound_chuanghu.setVolume(1.0, log=False)
    sound_chuanghu.seek(0)
    # create starting attributes for key_resp_chuanghu
    key_resp_chuanghu.keys = []
    key_resp_chuanghu.rt = []
    _key_resp_chuanghu_allKeys = []
    # store start times for trial_chuanghu
    trial_chuanghu.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_chuanghu.tStart = globalClock.getTime(format='float')
    trial_chuanghu.status = STARTED
    thisExp.addData('trial_chuanghu.started', trial_chuanghu.tStart)
    trial_chuanghu.maxDuration = None
    # keep track of which components have finished
    trial_chuanghuComponents = trial_chuanghu.components
    for thisComponent in trial_chuanghu.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_chuanghu" ---
    trial_chuanghu.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_chuanghu* updates
        
        # if text_chuanghu is starting this frame...
        if text_chuanghu.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_chuanghu.frameNStart = frameN  # exact frame index
            text_chuanghu.tStart = t  # local t and not account for scr refresh
            text_chuanghu.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_chuanghu, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_chuanghu.started')
            # update status
            text_chuanghu.status = STARTED
            text_chuanghu.setAutoDraw(True)
        
        # if text_chuanghu is active this frame...
        if text_chuanghu.status == STARTED:
            # update params
            pass
        
        # if text_chuanghu is stopping this frame...
        if text_chuanghu.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_chuanghu.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_chuanghu.tStop = t  # not accounting for scr refresh
                text_chuanghu.tStopRefresh = tThisFlipGlobal  # on global time
                text_chuanghu.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_chuanghu.stopped')
                # update status
                text_chuanghu.status = FINISHED
                text_chuanghu.setAutoDraw(False)
        
        # *sound_chuanghu* updates
        
        # if sound_chuanghu is starting this frame...
        if sound_chuanghu.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_chuanghu.frameNStart = frameN  # exact frame index
            sound_chuanghu.tStart = t  # local t and not account for scr refresh
            sound_chuanghu.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_chuanghu.started', tThisFlipGlobal)
            # update status
            sound_chuanghu.status = STARTED
            sound_chuanghu.play(when=win)  # sync with win flip
        
        # if sound_chuanghu is stopping this frame...
        if sound_chuanghu.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_chuanghu.tStartRefresh + 3.0-frameTolerance or sound_chuanghu.isFinished:
                # keep track of stop time/frame for later
                sound_chuanghu.tStop = t  # not accounting for scr refresh
                sound_chuanghu.tStopRefresh = tThisFlipGlobal  # on global time
                sound_chuanghu.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_chuanghu.stopped')
                # update status
                sound_chuanghu.status = FINISHED
                sound_chuanghu.stop()
        
        # *text_73* updates
        
        # if text_73 is starting this frame...
        if text_73.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_73.frameNStart = frameN  # exact frame index
            text_73.tStart = t  # local t and not account for scr refresh
            text_73.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_73, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_73.started')
            # update status
            text_73.status = STARTED
            text_73.setAutoDraw(True)
        
        # if text_73 is active this frame...
        if text_73.status == STARTED:
            # update params
            pass
        
        # if text_73 is stopping this frame...
        if text_73.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_73.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_73.tStop = t  # not accounting for scr refresh
                text_73.tStopRefresh = tThisFlipGlobal  # on global time
                text_73.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_73.stopped')
                # update status
                text_73.status = FINISHED
                text_73.setAutoDraw(False)
        
        # *text_74* updates
        
        # if text_74 is starting this frame...
        if text_74.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_74.frameNStart = frameN  # exact frame index
            text_74.tStart = t  # local t and not account for scr refresh
            text_74.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_74, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_74.started')
            # update status
            text_74.status = STARTED
            text_74.setAutoDraw(True)
        
        # if text_74 is active this frame...
        if text_74.status == STARTED:
            # update params
            pass
        
        # if text_74 is stopping this frame...
        if text_74.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_74.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_74.tStop = t  # not accounting for scr refresh
                text_74.tStopRefresh = tThisFlipGlobal  # on global time
                text_74.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_74.stopped')
                # update status
                text_74.status = FINISHED
                text_74.setAutoDraw(False)
        
        # *key_resp_chuanghu* updates
        waitOnFlip = False
        
        # if key_resp_chuanghu is starting this frame...
        if key_resp_chuanghu.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_chuanghu.frameNStart = frameN  # exact frame index
            key_resp_chuanghu.tStart = t  # local t and not account for scr refresh
            key_resp_chuanghu.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_chuanghu, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_chuanghu.started')
            # update status
            key_resp_chuanghu.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_chuanghu.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_chuanghu.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_chuanghu is stopping this frame...
        if key_resp_chuanghu.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_chuanghu.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_chuanghu.tStop = t  # not accounting for scr refresh
                key_resp_chuanghu.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_chuanghu.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_chuanghu.stopped')
                # update status
                key_resp_chuanghu.status = FINISHED
                key_resp_chuanghu.status = FINISHED
        if key_resp_chuanghu.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_chuanghu.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_chuanghu_allKeys.extend(theseKeys)
            if len(_key_resp_chuanghu_allKeys):
                key_resp_chuanghu.keys = _key_resp_chuanghu_allKeys[0].name  # just the first key pressed
                key_resp_chuanghu.rt = _key_resp_chuanghu_allKeys[0].rt
                key_resp_chuanghu.duration = _key_resp_chuanghu_allKeys[0].duration
                # was this correct?
                if (key_resp_chuanghu.keys == str("'left'")) or (key_resp_chuanghu.keys == "'left'"):
                    key_resp_chuanghu.corr = 1
                else:
                    key_resp_chuanghu.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_chuanghu]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_chuanghu.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_chuanghu.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_chuanghu" ---
    for thisComponent in trial_chuanghu.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_chuanghu
    trial_chuanghu.tStop = globalClock.getTime(format='float')
    trial_chuanghu.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_chuanghu.stopped', trial_chuanghu.tStop)
    sound_chuanghu.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_chuanghu.keys in ['', [], None]:  # No response was made
        key_resp_chuanghu.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_chuanghu.corr = 1;  # correct non-response
        else:
           key_resp_chuanghu.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_chuanghu.keys',key_resp_chuanghu.keys)
    thisExp.addData('key_resp_chuanghu.corr', key_resp_chuanghu.corr)
    if key_resp_chuanghu.keys != None:  # we had a response
        thisExp.addData('key_resp_chuanghu.rt', key_resp_chuanghu.rt)
        thisExp.addData('key_resp_chuanghu.duration', key_resp_chuanghu.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_chuanghu.maxDurationReached:
        routineTimer.addTime(-trial_chuanghu.maxDuration)
    elif trial_chuanghu.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_mutou" ---
    # create an object to store info about Routine trial_mutou
    trial_mutou = data.Routine(
        name='trial_mutou',
        components=[text_mutou, sound_mutou, text_79, text_80, key_resp_mutou],
    )
    trial_mutou.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_mutou.setSound('audio/mutou.wav', secs=3.0, hamming=True)
    sound_mutou.setVolume(1.0, log=False)
    sound_mutou.seek(0)
    # create starting attributes for key_resp_mutou
    key_resp_mutou.keys = []
    key_resp_mutou.rt = []
    _key_resp_mutou_allKeys = []
    # store start times for trial_mutou
    trial_mutou.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_mutou.tStart = globalClock.getTime(format='float')
    trial_mutou.status = STARTED
    thisExp.addData('trial_mutou.started', trial_mutou.tStart)
    trial_mutou.maxDuration = None
    # keep track of which components have finished
    trial_mutouComponents = trial_mutou.components
    for thisComponent in trial_mutou.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_mutou" ---
    trial_mutou.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_mutou* updates
        
        # if text_mutou is starting this frame...
        if text_mutou.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_mutou.frameNStart = frameN  # exact frame index
            text_mutou.tStart = t  # local t and not account for scr refresh
            text_mutou.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_mutou, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_mutou.started')
            # update status
            text_mutou.status = STARTED
            text_mutou.setAutoDraw(True)
        
        # if text_mutou is active this frame...
        if text_mutou.status == STARTED:
            # update params
            pass
        
        # if text_mutou is stopping this frame...
        if text_mutou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_mutou.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_mutou.tStop = t  # not accounting for scr refresh
                text_mutou.tStopRefresh = tThisFlipGlobal  # on global time
                text_mutou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_mutou.stopped')
                # update status
                text_mutou.status = FINISHED
                text_mutou.setAutoDraw(False)
        
        # *sound_mutou* updates
        
        # if sound_mutou is starting this frame...
        if sound_mutou.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_mutou.frameNStart = frameN  # exact frame index
            sound_mutou.tStart = t  # local t and not account for scr refresh
            sound_mutou.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_mutou.started', tThisFlipGlobal)
            # update status
            sound_mutou.status = STARTED
            sound_mutou.play(when=win)  # sync with win flip
        
        # if sound_mutou is stopping this frame...
        if sound_mutou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_mutou.tStartRefresh + 3.0-frameTolerance or sound_mutou.isFinished:
                # keep track of stop time/frame for later
                sound_mutou.tStop = t  # not accounting for scr refresh
                sound_mutou.tStopRefresh = tThisFlipGlobal  # on global time
                sound_mutou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_mutou.stopped')
                # update status
                sound_mutou.status = FINISHED
                sound_mutou.stop()
        
        # *text_79* updates
        
        # if text_79 is starting this frame...
        if text_79.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_79.frameNStart = frameN  # exact frame index
            text_79.tStart = t  # local t and not account for scr refresh
            text_79.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_79, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_79.started')
            # update status
            text_79.status = STARTED
            text_79.setAutoDraw(True)
        
        # if text_79 is active this frame...
        if text_79.status == STARTED:
            # update params
            pass
        
        # if text_79 is stopping this frame...
        if text_79.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_79.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_79.tStop = t  # not accounting for scr refresh
                text_79.tStopRefresh = tThisFlipGlobal  # on global time
                text_79.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_79.stopped')
                # update status
                text_79.status = FINISHED
                text_79.setAutoDraw(False)
        
        # *text_80* updates
        
        # if text_80 is starting this frame...
        if text_80.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_80.frameNStart = frameN  # exact frame index
            text_80.tStart = t  # local t and not account for scr refresh
            text_80.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_80, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_80.started')
            # update status
            text_80.status = STARTED
            text_80.setAutoDraw(True)
        
        # if text_80 is active this frame...
        if text_80.status == STARTED:
            # update params
            pass
        
        # if text_80 is stopping this frame...
        if text_80.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_80.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_80.tStop = t  # not accounting for scr refresh
                text_80.tStopRefresh = tThisFlipGlobal  # on global time
                text_80.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_80.stopped')
                # update status
                text_80.status = FINISHED
                text_80.setAutoDraw(False)
        
        # *key_resp_mutou* updates
        waitOnFlip = False
        
        # if key_resp_mutou is starting this frame...
        if key_resp_mutou.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_mutou.frameNStart = frameN  # exact frame index
            key_resp_mutou.tStart = t  # local t and not account for scr refresh
            key_resp_mutou.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_mutou, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_mutou.started')
            # update status
            key_resp_mutou.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_mutou.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_mutou.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_mutou is stopping this frame...
        if key_resp_mutou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_mutou.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_mutou.tStop = t  # not accounting for scr refresh
                key_resp_mutou.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_mutou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_mutou.stopped')
                # update status
                key_resp_mutou.status = FINISHED
                key_resp_mutou.status = FINISHED
        if key_resp_mutou.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_mutou.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_mutou_allKeys.extend(theseKeys)
            if len(_key_resp_mutou_allKeys):
                key_resp_mutou.keys = _key_resp_mutou_allKeys[0].name  # just the first key pressed
                key_resp_mutou.rt = _key_resp_mutou_allKeys[0].rt
                key_resp_mutou.duration = _key_resp_mutou_allKeys[0].duration
                # was this correct?
                if (key_resp_mutou.keys == str("'left'")) or (key_resp_mutou.keys == "'left'"):
                    key_resp_mutou.corr = 1
                else:
                    key_resp_mutou.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_mutou]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_mutou.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_mutou.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_mutou" ---
    for thisComponent in trial_mutou.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_mutou
    trial_mutou.tStop = globalClock.getTime(format='float')
    trial_mutou.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_mutou.stopped', trial_mutou.tStop)
    sound_mutou.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_mutou.keys in ['', [], None]:  # No response was made
        key_resp_mutou.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_mutou.corr = 1;  # correct non-response
        else:
           key_resp_mutou.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_mutou.keys',key_resp_mutou.keys)
    thisExp.addData('key_resp_mutou.corr', key_resp_mutou.corr)
    if key_resp_mutou.keys != None:  # we had a response
        thisExp.addData('key_resp_mutou.rt', key_resp_mutou.rt)
        thisExp.addData('key_resp_mutou.duration', key_resp_mutou.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_mutou.maxDurationReached:
        routineTimer.addTime(-trial_mutou.maxDuration)
    elif trial_mutou.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_jiemei" ---
    # create an object to store info about Routine trial_jiemei
    trial_jiemei = data.Routine(
        name='trial_jiemei',
        components=[text_jiemei, sound_jiemei, text_81, text_82, key_resp_jiemei],
    )
    trial_jiemei.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_jiemei.setSound('audio/jiemei.wav', secs=3.0, hamming=True)
    sound_jiemei.setVolume(1.0, log=False)
    sound_jiemei.seek(0)
    # create starting attributes for key_resp_jiemei
    key_resp_jiemei.keys = []
    key_resp_jiemei.rt = []
    _key_resp_jiemei_allKeys = []
    # store start times for trial_jiemei
    trial_jiemei.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_jiemei.tStart = globalClock.getTime(format='float')
    trial_jiemei.status = STARTED
    thisExp.addData('trial_jiemei.started', trial_jiemei.tStart)
    trial_jiemei.maxDuration = None
    # keep track of which components have finished
    trial_jiemeiComponents = trial_jiemei.components
    for thisComponent in trial_jiemei.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_jiemei" ---
    trial_jiemei.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_jiemei* updates
        
        # if text_jiemei is starting this frame...
        if text_jiemei.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_jiemei.frameNStart = frameN  # exact frame index
            text_jiemei.tStart = t  # local t and not account for scr refresh
            text_jiemei.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_jiemei, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_jiemei.started')
            # update status
            text_jiemei.status = STARTED
            text_jiemei.setAutoDraw(True)
        
        # if text_jiemei is active this frame...
        if text_jiemei.status == STARTED:
            # update params
            pass
        
        # if text_jiemei is stopping this frame...
        if text_jiemei.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_jiemei.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_jiemei.tStop = t  # not accounting for scr refresh
                text_jiemei.tStopRefresh = tThisFlipGlobal  # on global time
                text_jiemei.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_jiemei.stopped')
                # update status
                text_jiemei.status = FINISHED
                text_jiemei.setAutoDraw(False)
        
        # *sound_jiemei* updates
        
        # if sound_jiemei is starting this frame...
        if sound_jiemei.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_jiemei.frameNStart = frameN  # exact frame index
            sound_jiemei.tStart = t  # local t and not account for scr refresh
            sound_jiemei.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_jiemei.started', tThisFlipGlobal)
            # update status
            sound_jiemei.status = STARTED
            sound_jiemei.play(when=win)  # sync with win flip
        
        # if sound_jiemei is stopping this frame...
        if sound_jiemei.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_jiemei.tStartRefresh + 3.0-frameTolerance or sound_jiemei.isFinished:
                # keep track of stop time/frame for later
                sound_jiemei.tStop = t  # not accounting for scr refresh
                sound_jiemei.tStopRefresh = tThisFlipGlobal  # on global time
                sound_jiemei.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_jiemei.stopped')
                # update status
                sound_jiemei.status = FINISHED
                sound_jiemei.stop()
        
        # *text_81* updates
        
        # if text_81 is starting this frame...
        if text_81.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_81.frameNStart = frameN  # exact frame index
            text_81.tStart = t  # local t and not account for scr refresh
            text_81.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_81, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_81.started')
            # update status
            text_81.status = STARTED
            text_81.setAutoDraw(True)
        
        # if text_81 is active this frame...
        if text_81.status == STARTED:
            # update params
            pass
        
        # if text_81 is stopping this frame...
        if text_81.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_81.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_81.tStop = t  # not accounting for scr refresh
                text_81.tStopRefresh = tThisFlipGlobal  # on global time
                text_81.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_81.stopped')
                # update status
                text_81.status = FINISHED
                text_81.setAutoDraw(False)
        
        # *text_82* updates
        
        # if text_82 is starting this frame...
        if text_82.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_82.frameNStart = frameN  # exact frame index
            text_82.tStart = t  # local t and not account for scr refresh
            text_82.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_82, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_82.started')
            # update status
            text_82.status = STARTED
            text_82.setAutoDraw(True)
        
        # if text_82 is active this frame...
        if text_82.status == STARTED:
            # update params
            pass
        
        # if text_82 is stopping this frame...
        if text_82.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_82.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_82.tStop = t  # not accounting for scr refresh
                text_82.tStopRefresh = tThisFlipGlobal  # on global time
                text_82.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_82.stopped')
                # update status
                text_82.status = FINISHED
                text_82.setAutoDraw(False)
        
        # *key_resp_jiemei* updates
        waitOnFlip = False
        
        # if key_resp_jiemei is starting this frame...
        if key_resp_jiemei.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_jiemei.frameNStart = frameN  # exact frame index
            key_resp_jiemei.tStart = t  # local t and not account for scr refresh
            key_resp_jiemei.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_jiemei, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_jiemei.started')
            # update status
            key_resp_jiemei.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_jiemei.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_jiemei.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_jiemei is stopping this frame...
        if key_resp_jiemei.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_jiemei.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_jiemei.tStop = t  # not accounting for scr refresh
                key_resp_jiemei.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_jiemei.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_jiemei.stopped')
                # update status
                key_resp_jiemei.status = FINISHED
                key_resp_jiemei.status = FINISHED
        if key_resp_jiemei.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_jiemei.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_jiemei_allKeys.extend(theseKeys)
            if len(_key_resp_jiemei_allKeys):
                key_resp_jiemei.keys = _key_resp_jiemei_allKeys[0].name  # just the first key pressed
                key_resp_jiemei.rt = _key_resp_jiemei_allKeys[0].rt
                key_resp_jiemei.duration = _key_resp_jiemei_allKeys[0].duration
                # was this correct?
                if (key_resp_jiemei.keys == str("'left'")) or (key_resp_jiemei.keys == "'left'"):
                    key_resp_jiemei.corr = 1
                else:
                    key_resp_jiemei.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_jiemei]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_jiemei.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_jiemei.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_jiemei" ---
    for thisComponent in trial_jiemei.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_jiemei
    trial_jiemei.tStop = globalClock.getTime(format='float')
    trial_jiemei.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_jiemei.stopped', trial_jiemei.tStop)
    sound_jiemei.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_jiemei.keys in ['', [], None]:  # No response was made
        key_resp_jiemei.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_jiemei.corr = 1;  # correct non-response
        else:
           key_resp_jiemei.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_jiemei.keys',key_resp_jiemei.keys)
    thisExp.addData('key_resp_jiemei.corr', key_resp_jiemei.corr)
    if key_resp_jiemei.keys != None:  # we had a response
        thisExp.addData('key_resp_jiemei.rt', key_resp_jiemei.rt)
        thisExp.addData('key_resp_jiemei.duration', key_resp_jiemei.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_jiemei.maxDurationReached:
        routineTimer.addTime(-trial_jiemei.maxDuration)
    elif trial_jiemei.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_huahai1" ---
    # create an object to store info about Routine trial_huahai1
    trial_huahai1 = data.Routine(
        name='trial_huahai1',
        components=[text_huahai1, sound_huahi1, text_83, text_84, key_resp_huahai1],
    )
    trial_huahai1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_huahi1.setSound('audio/huahai1.wav', secs=3.0, hamming=True)
    sound_huahi1.setVolume(1.0, log=False)
    sound_huahi1.seek(0)
    # create starting attributes for key_resp_huahai1
    key_resp_huahai1.keys = []
    key_resp_huahai1.rt = []
    _key_resp_huahai1_allKeys = []
    # store start times for trial_huahai1
    trial_huahai1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_huahai1.tStart = globalClock.getTime(format='float')
    trial_huahai1.status = STARTED
    thisExp.addData('trial_huahai1.started', trial_huahai1.tStart)
    trial_huahai1.maxDuration = None
    # keep track of which components have finished
    trial_huahai1Components = trial_huahai1.components
    for thisComponent in trial_huahai1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_huahai1" ---
    trial_huahai1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_huahai1* updates
        
        # if text_huahai1 is starting this frame...
        if text_huahai1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_huahai1.frameNStart = frameN  # exact frame index
            text_huahai1.tStart = t  # local t and not account for scr refresh
            text_huahai1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_huahai1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_huahai1.started')
            # update status
            text_huahai1.status = STARTED
            text_huahai1.setAutoDraw(True)
        
        # if text_huahai1 is active this frame...
        if text_huahai1.status == STARTED:
            # update params
            pass
        
        # if text_huahai1 is stopping this frame...
        if text_huahai1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_huahai1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_huahai1.tStop = t  # not accounting for scr refresh
                text_huahai1.tStopRefresh = tThisFlipGlobal  # on global time
                text_huahai1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_huahai1.stopped')
                # update status
                text_huahai1.status = FINISHED
                text_huahai1.setAutoDraw(False)
        
        # *sound_huahi1* updates
        
        # if sound_huahi1 is starting this frame...
        if sound_huahi1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_huahi1.frameNStart = frameN  # exact frame index
            sound_huahi1.tStart = t  # local t and not account for scr refresh
            sound_huahi1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_huahi1.started', tThisFlipGlobal)
            # update status
            sound_huahi1.status = STARTED
            sound_huahi1.play(when=win)  # sync with win flip
        
        # if sound_huahi1 is stopping this frame...
        if sound_huahi1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_huahi1.tStartRefresh + 3.0-frameTolerance or sound_huahi1.isFinished:
                # keep track of stop time/frame for later
                sound_huahi1.tStop = t  # not accounting for scr refresh
                sound_huahi1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_huahi1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_huahi1.stopped')
                # update status
                sound_huahi1.status = FINISHED
                sound_huahi1.stop()
        
        # *text_83* updates
        
        # if text_83 is starting this frame...
        if text_83.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_83.frameNStart = frameN  # exact frame index
            text_83.tStart = t  # local t and not account for scr refresh
            text_83.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_83, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_83.started')
            # update status
            text_83.status = STARTED
            text_83.setAutoDraw(True)
        
        # if text_83 is active this frame...
        if text_83.status == STARTED:
            # update params
            pass
        
        # if text_83 is stopping this frame...
        if text_83.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_83.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_83.tStop = t  # not accounting for scr refresh
                text_83.tStopRefresh = tThisFlipGlobal  # on global time
                text_83.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_83.stopped')
                # update status
                text_83.status = FINISHED
                text_83.setAutoDraw(False)
        
        # *text_84* updates
        
        # if text_84 is starting this frame...
        if text_84.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_84.frameNStart = frameN  # exact frame index
            text_84.tStart = t  # local t and not account for scr refresh
            text_84.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_84, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_84.started')
            # update status
            text_84.status = STARTED
            text_84.setAutoDraw(True)
        
        # if text_84 is active this frame...
        if text_84.status == STARTED:
            # update params
            pass
        
        # if text_84 is stopping this frame...
        if text_84.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_84.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_84.tStop = t  # not accounting for scr refresh
                text_84.tStopRefresh = tThisFlipGlobal  # on global time
                text_84.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_84.stopped')
                # update status
                text_84.status = FINISHED
                text_84.setAutoDraw(False)
        
        # *key_resp_huahai1* updates
        waitOnFlip = False
        
        # if key_resp_huahai1 is starting this frame...
        if key_resp_huahai1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_huahai1.frameNStart = frameN  # exact frame index
            key_resp_huahai1.tStart = t  # local t and not account for scr refresh
            key_resp_huahai1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_huahai1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_huahai1.started')
            # update status
            key_resp_huahai1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_huahai1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_huahai1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_huahai1 is stopping this frame...
        if key_resp_huahai1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_huahai1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_huahai1.tStop = t  # not accounting for scr refresh
                key_resp_huahai1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_huahai1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_huahai1.stopped')
                # update status
                key_resp_huahai1.status = FINISHED
                key_resp_huahai1.status = FINISHED
        if key_resp_huahai1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_huahai1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_huahai1_allKeys.extend(theseKeys)
            if len(_key_resp_huahai1_allKeys):
                key_resp_huahai1.keys = _key_resp_huahai1_allKeys[0].name  # just the first key pressed
                key_resp_huahai1.rt = _key_resp_huahai1_allKeys[0].rt
                key_resp_huahai1.duration = _key_resp_huahai1_allKeys[0].duration
                # was this correct?
                if (key_resp_huahai1.keys == str("'right'")) or (key_resp_huahai1.keys == "'right'"):
                    key_resp_huahai1.corr = 1
                else:
                    key_resp_huahai1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_huahi1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_huahai1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_huahai1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_huahai1" ---
    for thisComponent in trial_huahai1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_huahai1
    trial_huahai1.tStop = globalClock.getTime(format='float')
    trial_huahai1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_huahai1.stopped', trial_huahai1.tStop)
    sound_huahi1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_huahai1.keys in ['', [], None]:  # No response was made
        key_resp_huahai1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_huahai1.corr = 1;  # correct non-response
        else:
           key_resp_huahai1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_huahai1.keys',key_resp_huahai1.keys)
    thisExp.addData('key_resp_huahai1.corr', key_resp_huahai1.corr)
    if key_resp_huahai1.keys != None:  # we had a response
        thisExp.addData('key_resp_huahai1.rt', key_resp_huahai1.rt)
        thisExp.addData('key_resp_huahai1.duration', key_resp_huahai1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_huahai1.maxDurationReached:
        routineTimer.addTime(-trial_huahai1.maxDuration)
    elif trial_huahai1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_lixiang0" ---
    # create an object to store info about Routine trial_lixiang0
    trial_lixiang0 = data.Routine(
        name='trial_lixiang0',
        components=[text_lixiang0, sound_lixiang0, text_85, text_86, key_resp_lixiang0],
    )
    trial_lixiang0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_lixiang0.setSound('audio/lixiang0.wav', secs=3.0, hamming=True)
    sound_lixiang0.setVolume(1.0, log=False)
    sound_lixiang0.seek(0)
    # create starting attributes for key_resp_lixiang0
    key_resp_lixiang0.keys = []
    key_resp_lixiang0.rt = []
    _key_resp_lixiang0_allKeys = []
    # store start times for trial_lixiang0
    trial_lixiang0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_lixiang0.tStart = globalClock.getTime(format='float')
    trial_lixiang0.status = STARTED
    thisExp.addData('trial_lixiang0.started', trial_lixiang0.tStart)
    trial_lixiang0.maxDuration = None
    # keep track of which components have finished
    trial_lixiang0Components = trial_lixiang0.components
    for thisComponent in trial_lixiang0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_lixiang0" ---
    trial_lixiang0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_lixiang0* updates
        
        # if text_lixiang0 is starting this frame...
        if text_lixiang0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_lixiang0.frameNStart = frameN  # exact frame index
            text_lixiang0.tStart = t  # local t and not account for scr refresh
            text_lixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_lixiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_lixiang0.started')
            # update status
            text_lixiang0.status = STARTED
            text_lixiang0.setAutoDraw(True)
        
        # if text_lixiang0 is active this frame...
        if text_lixiang0.status == STARTED:
            # update params
            pass
        
        # if text_lixiang0 is stopping this frame...
        if text_lixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_lixiang0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_lixiang0.tStop = t  # not accounting for scr refresh
                text_lixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                text_lixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_lixiang0.stopped')
                # update status
                text_lixiang0.status = FINISHED
                text_lixiang0.setAutoDraw(False)
        
        # *sound_lixiang0* updates
        
        # if sound_lixiang0 is starting this frame...
        if sound_lixiang0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_lixiang0.frameNStart = frameN  # exact frame index
            sound_lixiang0.tStart = t  # local t and not account for scr refresh
            sound_lixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_lixiang0.started', tThisFlipGlobal)
            # update status
            sound_lixiang0.status = STARTED
            sound_lixiang0.play(when=win)  # sync with win flip
        
        # if sound_lixiang0 is stopping this frame...
        if sound_lixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_lixiang0.tStartRefresh + 3.0-frameTolerance or sound_lixiang0.isFinished:
                # keep track of stop time/frame for later
                sound_lixiang0.tStop = t  # not accounting for scr refresh
                sound_lixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_lixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_lixiang0.stopped')
                # update status
                sound_lixiang0.status = FINISHED
                sound_lixiang0.stop()
        
        # *text_85* updates
        
        # if text_85 is starting this frame...
        if text_85.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_85.frameNStart = frameN  # exact frame index
            text_85.tStart = t  # local t and not account for scr refresh
            text_85.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_85, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_85.started')
            # update status
            text_85.status = STARTED
            text_85.setAutoDraw(True)
        
        # if text_85 is active this frame...
        if text_85.status == STARTED:
            # update params
            pass
        
        # if text_85 is stopping this frame...
        if text_85.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_85.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_85.tStop = t  # not accounting for scr refresh
                text_85.tStopRefresh = tThisFlipGlobal  # on global time
                text_85.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_85.stopped')
                # update status
                text_85.status = FINISHED
                text_85.setAutoDraw(False)
        
        # *text_86* updates
        
        # if text_86 is starting this frame...
        if text_86.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_86.frameNStart = frameN  # exact frame index
            text_86.tStart = t  # local t and not account for scr refresh
            text_86.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_86, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_86.started')
            # update status
            text_86.status = STARTED
            text_86.setAutoDraw(True)
        
        # if text_86 is active this frame...
        if text_86.status == STARTED:
            # update params
            pass
        
        # if text_86 is stopping this frame...
        if text_86.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_86.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_86.tStop = t  # not accounting for scr refresh
                text_86.tStopRefresh = tThisFlipGlobal  # on global time
                text_86.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_86.stopped')
                # update status
                text_86.status = FINISHED
                text_86.setAutoDraw(False)
        
        # *key_resp_lixiang0* updates
        waitOnFlip = False
        
        # if key_resp_lixiang0 is starting this frame...
        if key_resp_lixiang0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_lixiang0.frameNStart = frameN  # exact frame index
            key_resp_lixiang0.tStart = t  # local t and not account for scr refresh
            key_resp_lixiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_lixiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_lixiang0.started')
            # update status
            key_resp_lixiang0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_lixiang0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_lixiang0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_lixiang0 is stopping this frame...
        if key_resp_lixiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_lixiang0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_lixiang0.tStop = t  # not accounting for scr refresh
                key_resp_lixiang0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_lixiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_lixiang0.stopped')
                # update status
                key_resp_lixiang0.status = FINISHED
                key_resp_lixiang0.status = FINISHED
        if key_resp_lixiang0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_lixiang0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_lixiang0_allKeys.extend(theseKeys)
            if len(_key_resp_lixiang0_allKeys):
                key_resp_lixiang0.keys = _key_resp_lixiang0_allKeys[0].name  # just the first key pressed
                key_resp_lixiang0.rt = _key_resp_lixiang0_allKeys[0].rt
                key_resp_lixiang0.duration = _key_resp_lixiang0_allKeys[0].duration
                # was this correct?
                if (key_resp_lixiang0.keys == str("'left'")) or (key_resp_lixiang0.keys == "'left'"):
                    key_resp_lixiang0.corr = 1
                else:
                    key_resp_lixiang0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_lixiang0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_lixiang0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_lixiang0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_lixiang0" ---
    for thisComponent in trial_lixiang0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_lixiang0
    trial_lixiang0.tStop = globalClock.getTime(format='float')
    trial_lixiang0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_lixiang0.stopped', trial_lixiang0.tStop)
    sound_lixiang0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_lixiang0.keys in ['', [], None]:  # No response was made
        key_resp_lixiang0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_lixiang0.corr = 1;  # correct non-response
        else:
           key_resp_lixiang0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_lixiang0.keys',key_resp_lixiang0.keys)
    thisExp.addData('key_resp_lixiang0.corr', key_resp_lixiang0.corr)
    if key_resp_lixiang0.keys != None:  # we had a response
        thisExp.addData('key_resp_lixiang0.rt', key_resp_lixiang0.rt)
        thisExp.addData('key_resp_lixiang0.duration', key_resp_lixiang0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_lixiang0.maxDurationReached:
        routineTimer.addTime(-trial_lixiang0.maxDuration)
    elif trial_lixiang0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_heimei1" ---
    # create an object to store info about Routine trial_heimei1
    trial_heimei1 = data.Routine(
        name='trial_heimei1',
        components=[text_heimei1, sound_heimei1, text_87, text_88, key_resp_heimei1],
    )
    trial_heimei1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_heimei1.setSound('audio/heimei1.wav', secs=3, hamming=True)
    sound_heimei1.setVolume(1.0, log=False)
    sound_heimei1.seek(0)
    # create starting attributes for key_resp_heimei1
    key_resp_heimei1.keys = []
    key_resp_heimei1.rt = []
    _key_resp_heimei1_allKeys = []
    # store start times for trial_heimei1
    trial_heimei1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_heimei1.tStart = globalClock.getTime(format='float')
    trial_heimei1.status = STARTED
    thisExp.addData('trial_heimei1.started', trial_heimei1.tStart)
    trial_heimei1.maxDuration = None
    # keep track of which components have finished
    trial_heimei1Components = trial_heimei1.components
    for thisComponent in trial_heimei1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_heimei1" ---
    trial_heimei1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_heimei1* updates
        
        # if text_heimei1 is starting this frame...
        if text_heimei1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_heimei1.frameNStart = frameN  # exact frame index
            text_heimei1.tStart = t  # local t and not account for scr refresh
            text_heimei1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_heimei1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_heimei1.started')
            # update status
            text_heimei1.status = STARTED
            text_heimei1.setAutoDraw(True)
        
        # if text_heimei1 is active this frame...
        if text_heimei1.status == STARTED:
            # update params
            pass
        
        # if text_heimei1 is stopping this frame...
        if text_heimei1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_heimei1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_heimei1.tStop = t  # not accounting for scr refresh
                text_heimei1.tStopRefresh = tThisFlipGlobal  # on global time
                text_heimei1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_heimei1.stopped')
                # update status
                text_heimei1.status = FINISHED
                text_heimei1.setAutoDraw(False)
        
        # *sound_heimei1* updates
        
        # if sound_heimei1 is starting this frame...
        if sound_heimei1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_heimei1.frameNStart = frameN  # exact frame index
            sound_heimei1.tStart = t  # local t and not account for scr refresh
            sound_heimei1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_heimei1.started', tThisFlipGlobal)
            # update status
            sound_heimei1.status = STARTED
            sound_heimei1.play(when=win)  # sync with win flip
        
        # if sound_heimei1 is stopping this frame...
        if sound_heimei1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_heimei1.tStartRefresh + 3-frameTolerance or sound_heimei1.isFinished:
                # keep track of stop time/frame for later
                sound_heimei1.tStop = t  # not accounting for scr refresh
                sound_heimei1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_heimei1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_heimei1.stopped')
                # update status
                sound_heimei1.status = FINISHED
                sound_heimei1.stop()
        
        # *text_87* updates
        
        # if text_87 is starting this frame...
        if text_87.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_87.frameNStart = frameN  # exact frame index
            text_87.tStart = t  # local t and not account for scr refresh
            text_87.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_87, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_87.started')
            # update status
            text_87.status = STARTED
            text_87.setAutoDraw(True)
        
        # if text_87 is active this frame...
        if text_87.status == STARTED:
            # update params
            pass
        
        # if text_87 is stopping this frame...
        if text_87.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_87.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_87.tStop = t  # not accounting for scr refresh
                text_87.tStopRefresh = tThisFlipGlobal  # on global time
                text_87.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_87.stopped')
                # update status
                text_87.status = FINISHED
                text_87.setAutoDraw(False)
        
        # *text_88* updates
        
        # if text_88 is starting this frame...
        if text_88.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_88.frameNStart = frameN  # exact frame index
            text_88.tStart = t  # local t and not account for scr refresh
            text_88.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_88, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_88.started')
            # update status
            text_88.status = STARTED
            text_88.setAutoDraw(True)
        
        # if text_88 is active this frame...
        if text_88.status == STARTED:
            # update params
            pass
        
        # if text_88 is stopping this frame...
        if text_88.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_88.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_88.tStop = t  # not accounting for scr refresh
                text_88.tStopRefresh = tThisFlipGlobal  # on global time
                text_88.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_88.stopped')
                # update status
                text_88.status = FINISHED
                text_88.setAutoDraw(False)
        
        # *key_resp_heimei1* updates
        waitOnFlip = False
        
        # if key_resp_heimei1 is starting this frame...
        if key_resp_heimei1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_heimei1.frameNStart = frameN  # exact frame index
            key_resp_heimei1.tStart = t  # local t and not account for scr refresh
            key_resp_heimei1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_heimei1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_heimei1.started')
            # update status
            key_resp_heimei1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_heimei1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_heimei1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_heimei1 is stopping this frame...
        if key_resp_heimei1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_heimei1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_heimei1.tStop = t  # not accounting for scr refresh
                key_resp_heimei1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_heimei1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_heimei1.stopped')
                # update status
                key_resp_heimei1.status = FINISHED
                key_resp_heimei1.status = FINISHED
        if key_resp_heimei1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_heimei1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_heimei1_allKeys.extend(theseKeys)
            if len(_key_resp_heimei1_allKeys):
                key_resp_heimei1.keys = _key_resp_heimei1_allKeys[0].name  # just the first key pressed
                key_resp_heimei1.rt = _key_resp_heimei1_allKeys[0].rt
                key_resp_heimei1.duration = _key_resp_heimei1_allKeys[0].duration
                # was this correct?
                if (key_resp_heimei1.keys == str("'right'")) or (key_resp_heimei1.keys == "'right'"):
                    key_resp_heimei1.corr = 1
                else:
                    key_resp_heimei1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_heimei1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_heimei1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_heimei1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_heimei1" ---
    for thisComponent in trial_heimei1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_heimei1
    trial_heimei1.tStop = globalClock.getTime(format='float')
    trial_heimei1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_heimei1.stopped', trial_heimei1.tStop)
    sound_heimei1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_heimei1.keys in ['', [], None]:  # No response was made
        key_resp_heimei1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_heimei1.corr = 1;  # correct non-response
        else:
           key_resp_heimei1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_heimei1.keys',key_resp_heimei1.keys)
    thisExp.addData('key_resp_heimei1.corr', key_resp_heimei1.corr)
    if key_resp_heimei1.keys != None:  # we had a response
        thisExp.addData('key_resp_heimei1.rt', key_resp_heimei1.rt)
        thisExp.addData('key_resp_heimei1.duration', key_resp_heimei1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_heimei1.maxDurationReached:
        routineTimer.addTime(-trial_heimei1.maxDuration)
    elif trial_heimei1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_yintian1" ---
    # create an object to store info about Routine trial_yintian1
    trial_yintian1 = data.Routine(
        name='trial_yintian1',
        components=[text_yintian1, sound_yintian1, text_89, text_90, key_resp_yintian1],
    )
    trial_yintian1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_yintian1.setSound('audio/yintian1.wav', secs=3.0, hamming=True)
    sound_yintian1.setVolume(1.0, log=False)
    sound_yintian1.seek(0)
    # create starting attributes for key_resp_yintian1
    key_resp_yintian1.keys = []
    key_resp_yintian1.rt = []
    _key_resp_yintian1_allKeys = []
    # store start times for trial_yintian1
    trial_yintian1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_yintian1.tStart = globalClock.getTime(format='float')
    trial_yintian1.status = STARTED
    thisExp.addData('trial_yintian1.started', trial_yintian1.tStart)
    trial_yintian1.maxDuration = None
    # keep track of which components have finished
    trial_yintian1Components = trial_yintian1.components
    for thisComponent in trial_yintian1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_yintian1" ---
    trial_yintian1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_yintian1* updates
        
        # if text_yintian1 is starting this frame...
        if text_yintian1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_yintian1.frameNStart = frameN  # exact frame index
            text_yintian1.tStart = t  # local t and not account for scr refresh
            text_yintian1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_yintian1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_yintian1.started')
            # update status
            text_yintian1.status = STARTED
            text_yintian1.setAutoDraw(True)
        
        # if text_yintian1 is active this frame...
        if text_yintian1.status == STARTED:
            # update params
            pass
        
        # if text_yintian1 is stopping this frame...
        if text_yintian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_yintian1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_yintian1.tStop = t  # not accounting for scr refresh
                text_yintian1.tStopRefresh = tThisFlipGlobal  # on global time
                text_yintian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_yintian1.stopped')
                # update status
                text_yintian1.status = FINISHED
                text_yintian1.setAutoDraw(False)
        
        # *sound_yintian1* updates
        
        # if sound_yintian1 is starting this frame...
        if sound_yintian1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_yintian1.frameNStart = frameN  # exact frame index
            sound_yintian1.tStart = t  # local t and not account for scr refresh
            sound_yintian1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_yintian1.started', tThisFlipGlobal)
            # update status
            sound_yintian1.status = STARTED
            sound_yintian1.play(when=win)  # sync with win flip
        
        # if sound_yintian1 is stopping this frame...
        if sound_yintian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_yintian1.tStartRefresh + 3.0-frameTolerance or sound_yintian1.isFinished:
                # keep track of stop time/frame for later
                sound_yintian1.tStop = t  # not accounting for scr refresh
                sound_yintian1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_yintian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_yintian1.stopped')
                # update status
                sound_yintian1.status = FINISHED
                sound_yintian1.stop()
        
        # *text_89* updates
        
        # if text_89 is starting this frame...
        if text_89.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_89.frameNStart = frameN  # exact frame index
            text_89.tStart = t  # local t and not account for scr refresh
            text_89.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_89, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_89.started')
            # update status
            text_89.status = STARTED
            text_89.setAutoDraw(True)
        
        # if text_89 is active this frame...
        if text_89.status == STARTED:
            # update params
            pass
        
        # if text_89 is stopping this frame...
        if text_89.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_89.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_89.tStop = t  # not accounting for scr refresh
                text_89.tStopRefresh = tThisFlipGlobal  # on global time
                text_89.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_89.stopped')
                # update status
                text_89.status = FINISHED
                text_89.setAutoDraw(False)
        
        # *text_90* updates
        
        # if text_90 is starting this frame...
        if text_90.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_90.frameNStart = frameN  # exact frame index
            text_90.tStart = t  # local t and not account for scr refresh
            text_90.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_90, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_90.started')
            # update status
            text_90.status = STARTED
            text_90.setAutoDraw(True)
        
        # if text_90 is active this frame...
        if text_90.status == STARTED:
            # update params
            pass
        
        # if text_90 is stopping this frame...
        if text_90.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_90.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_90.tStop = t  # not accounting for scr refresh
                text_90.tStopRefresh = tThisFlipGlobal  # on global time
                text_90.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_90.stopped')
                # update status
                text_90.status = FINISHED
                text_90.setAutoDraw(False)
        
        # *key_resp_yintian1* updates
        waitOnFlip = False
        
        # if key_resp_yintian1 is starting this frame...
        if key_resp_yintian1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_yintian1.frameNStart = frameN  # exact frame index
            key_resp_yintian1.tStart = t  # local t and not account for scr refresh
            key_resp_yintian1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_yintian1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_yintian1.started')
            # update status
            key_resp_yintian1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_yintian1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_yintian1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_yintian1 is stopping this frame...
        if key_resp_yintian1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_yintian1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_yintian1.tStop = t  # not accounting for scr refresh
                key_resp_yintian1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_yintian1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_yintian1.stopped')
                # update status
                key_resp_yintian1.status = FINISHED
                key_resp_yintian1.status = FINISHED
        if key_resp_yintian1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_yintian1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_yintian1_allKeys.extend(theseKeys)
            if len(_key_resp_yintian1_allKeys):
                key_resp_yintian1.keys = _key_resp_yintian1_allKeys[0].name  # just the first key pressed
                key_resp_yintian1.rt = _key_resp_yintian1_allKeys[0].rt
                key_resp_yintian1.duration = _key_resp_yintian1_allKeys[0].duration
                # was this correct?
                if (key_resp_yintian1.keys == str("'right'")) or (key_resp_yintian1.keys == "'right'"):
                    key_resp_yintian1.corr = 1
                else:
                    key_resp_yintian1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_yintian1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_yintian1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_yintian1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_yintian1" ---
    for thisComponent in trial_yintian1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_yintian1
    trial_yintian1.tStop = globalClock.getTime(format='float')
    trial_yintian1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_yintian1.stopped', trial_yintian1.tStop)
    sound_yintian1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_yintian1.keys in ['', [], None]:  # No response was made
        key_resp_yintian1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_yintian1.corr = 1;  # correct non-response
        else:
           key_resp_yintian1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_yintian1.keys',key_resp_yintian1.keys)
    thisExp.addData('key_resp_yintian1.corr', key_resp_yintian1.corr)
    if key_resp_yintian1.keys != None:  # we had a response
        thisExp.addData('key_resp_yintian1.rt', key_resp_yintian1.rt)
        thisExp.addData('key_resp_yintian1.duration', key_resp_yintian1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_yintian1.maxDurationReached:
        routineTimer.addTime(-trial_yintian1.maxDuration)
    elif trial_yintian1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_danche0" ---
    # create an object to store info about Routine trial_danche0
    trial_danche0 = data.Routine(
        name='trial_danche0',
        components=[text_danche0, sound_danche0, text_91, text_92, key_resp_danche0],
    )
    trial_danche0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_danche0.setSound('audio/danche0.wav', secs=3.0, hamming=True)
    sound_danche0.setVolume(1.0, log=False)
    sound_danche0.seek(0)
    # create starting attributes for key_resp_danche0
    key_resp_danche0.keys = []
    key_resp_danche0.rt = []
    _key_resp_danche0_allKeys = []
    # store start times for trial_danche0
    trial_danche0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_danche0.tStart = globalClock.getTime(format='float')
    trial_danche0.status = STARTED
    thisExp.addData('trial_danche0.started', trial_danche0.tStart)
    trial_danche0.maxDuration = None
    # keep track of which components have finished
    trial_danche0Components = trial_danche0.components
    for thisComponent in trial_danche0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_danche0" ---
    trial_danche0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_danche0* updates
        
        # if text_danche0 is starting this frame...
        if text_danche0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_danche0.frameNStart = frameN  # exact frame index
            text_danche0.tStart = t  # local t and not account for scr refresh
            text_danche0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_danche0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_danche0.started')
            # update status
            text_danche0.status = STARTED
            text_danche0.setAutoDraw(True)
        
        # if text_danche0 is active this frame...
        if text_danche0.status == STARTED:
            # update params
            pass
        
        # if text_danche0 is stopping this frame...
        if text_danche0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_danche0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_danche0.tStop = t  # not accounting for scr refresh
                text_danche0.tStopRefresh = tThisFlipGlobal  # on global time
                text_danche0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_danche0.stopped')
                # update status
                text_danche0.status = FINISHED
                text_danche0.setAutoDraw(False)
        
        # *sound_danche0* updates
        
        # if sound_danche0 is starting this frame...
        if sound_danche0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_danche0.frameNStart = frameN  # exact frame index
            sound_danche0.tStart = t  # local t and not account for scr refresh
            sound_danche0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_danche0.started', tThisFlipGlobal)
            # update status
            sound_danche0.status = STARTED
            sound_danche0.play(when=win)  # sync with win flip
        
        # if sound_danche0 is stopping this frame...
        if sound_danche0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_danche0.tStartRefresh + 3.0-frameTolerance or sound_danche0.isFinished:
                # keep track of stop time/frame for later
                sound_danche0.tStop = t  # not accounting for scr refresh
                sound_danche0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_danche0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_danche0.stopped')
                # update status
                sound_danche0.status = FINISHED
                sound_danche0.stop()
        
        # *text_91* updates
        
        # if text_91 is starting this frame...
        if text_91.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_91.frameNStart = frameN  # exact frame index
            text_91.tStart = t  # local t and not account for scr refresh
            text_91.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_91, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_91.started')
            # update status
            text_91.status = STARTED
            text_91.setAutoDraw(True)
        
        # if text_91 is active this frame...
        if text_91.status == STARTED:
            # update params
            pass
        
        # if text_91 is stopping this frame...
        if text_91.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_91.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_91.tStop = t  # not accounting for scr refresh
                text_91.tStopRefresh = tThisFlipGlobal  # on global time
                text_91.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_91.stopped')
                # update status
                text_91.status = FINISHED
                text_91.setAutoDraw(False)
        
        # *text_92* updates
        
        # if text_92 is starting this frame...
        if text_92.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_92.frameNStart = frameN  # exact frame index
            text_92.tStart = t  # local t and not account for scr refresh
            text_92.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_92, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_92.started')
            # update status
            text_92.status = STARTED
            text_92.setAutoDraw(True)
        
        # if text_92 is active this frame...
        if text_92.status == STARTED:
            # update params
            pass
        
        # if text_92 is stopping this frame...
        if text_92.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_92.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_92.tStop = t  # not accounting for scr refresh
                text_92.tStopRefresh = tThisFlipGlobal  # on global time
                text_92.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_92.stopped')
                # update status
                text_92.status = FINISHED
                text_92.setAutoDraw(False)
        
        # *key_resp_danche0* updates
        waitOnFlip = False
        
        # if key_resp_danche0 is starting this frame...
        if key_resp_danche0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_danche0.frameNStart = frameN  # exact frame index
            key_resp_danche0.tStart = t  # local t and not account for scr refresh
            key_resp_danche0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_danche0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_danche0.started')
            # update status
            key_resp_danche0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_danche0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_danche0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_danche0 is stopping this frame...
        if key_resp_danche0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_danche0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_danche0.tStop = t  # not accounting for scr refresh
                key_resp_danche0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_danche0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_danche0.stopped')
                # update status
                key_resp_danche0.status = FINISHED
                key_resp_danche0.status = FINISHED
        if key_resp_danche0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_danche0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_danche0_allKeys.extend(theseKeys)
            if len(_key_resp_danche0_allKeys):
                key_resp_danche0.keys = _key_resp_danche0_allKeys[0].name  # just the first key pressed
                key_resp_danche0.rt = _key_resp_danche0_allKeys[0].rt
                key_resp_danche0.duration = _key_resp_danche0_allKeys[0].duration
                # was this correct?
                if (key_resp_danche0.keys == str("'left'")) or (key_resp_danche0.keys == "'left'"):
                    key_resp_danche0.corr = 1
                else:
                    key_resp_danche0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_danche0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_danche0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_danche0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_danche0" ---
    for thisComponent in trial_danche0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_danche0
    trial_danche0.tStop = globalClock.getTime(format='float')
    trial_danche0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_danche0.stopped', trial_danche0.tStop)
    sound_danche0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_danche0.keys in ['', [], None]:  # No response was made
        key_resp_danche0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_danche0.corr = 1;  # correct non-response
        else:
           key_resp_danche0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_danche0.keys',key_resp_danche0.keys)
    thisExp.addData('key_resp_danche0.corr', key_resp_danche0.corr)
    if key_resp_danche0.keys != None:  # we had a response
        thisExp.addData('key_resp_danche0.rt', key_resp_danche0.rt)
        thisExp.addData('key_resp_danche0.duration', key_resp_danche0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_danche0.maxDurationReached:
        routineTimer.addTime(-trial_danche0.maxDuration)
    elif trial_danche0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baoma0" ---
    # create an object to store info about Routine trial_baoma0
    trial_baoma0 = data.Routine(
        name='trial_baoma0',
        components=[text_baoma0, sound_baoma0, text_93, text_94, key_resp_baoma0],
    )
    trial_baoma0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baoma0.setSound('audio/baoma0.wav', secs=3.0, hamming=True)
    sound_baoma0.setVolume(1.0, log=False)
    sound_baoma0.seek(0)
    # create starting attributes for key_resp_baoma0
    key_resp_baoma0.keys = []
    key_resp_baoma0.rt = []
    _key_resp_baoma0_allKeys = []
    # store start times for trial_baoma0
    trial_baoma0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baoma0.tStart = globalClock.getTime(format='float')
    trial_baoma0.status = STARTED
    thisExp.addData('trial_baoma0.started', trial_baoma0.tStart)
    trial_baoma0.maxDuration = None
    # keep track of which components have finished
    trial_baoma0Components = trial_baoma0.components
    for thisComponent in trial_baoma0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baoma0" ---
    trial_baoma0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baoma0* updates
        
        # if text_baoma0 is starting this frame...
        if text_baoma0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baoma0.frameNStart = frameN  # exact frame index
            text_baoma0.tStart = t  # local t and not account for scr refresh
            text_baoma0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baoma0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baoma0.started')
            # update status
            text_baoma0.status = STARTED
            text_baoma0.setAutoDraw(True)
        
        # if text_baoma0 is active this frame...
        if text_baoma0.status == STARTED:
            # update params
            pass
        
        # if text_baoma0 is stopping this frame...
        if text_baoma0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baoma0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_baoma0.tStop = t  # not accounting for scr refresh
                text_baoma0.tStopRefresh = tThisFlipGlobal  # on global time
                text_baoma0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baoma0.stopped')
                # update status
                text_baoma0.status = FINISHED
                text_baoma0.setAutoDraw(False)
        
        # *sound_baoma0* updates
        
        # if sound_baoma0 is starting this frame...
        if sound_baoma0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_baoma0.frameNStart = frameN  # exact frame index
            sound_baoma0.tStart = t  # local t and not account for scr refresh
            sound_baoma0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baoma0.started', tThisFlipGlobal)
            # update status
            sound_baoma0.status = STARTED
            sound_baoma0.play(when=win)  # sync with win flip
        
        # if sound_baoma0 is stopping this frame...
        if sound_baoma0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baoma0.tStartRefresh + 3.0-frameTolerance or sound_baoma0.isFinished:
                # keep track of stop time/frame for later
                sound_baoma0.tStop = t  # not accounting for scr refresh
                sound_baoma0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baoma0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baoma0.stopped')
                # update status
                sound_baoma0.status = FINISHED
                sound_baoma0.stop()
        
        # *text_93* updates
        
        # if text_93 is starting this frame...
        if text_93.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_93.frameNStart = frameN  # exact frame index
            text_93.tStart = t  # local t and not account for scr refresh
            text_93.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_93, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_93.started')
            # update status
            text_93.status = STARTED
            text_93.setAutoDraw(True)
        
        # if text_93 is active this frame...
        if text_93.status == STARTED:
            # update params
            pass
        
        # if text_93 is stopping this frame...
        if text_93.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_93.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_93.tStop = t  # not accounting for scr refresh
                text_93.tStopRefresh = tThisFlipGlobal  # on global time
                text_93.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_93.stopped')
                # update status
                text_93.status = FINISHED
                text_93.setAutoDraw(False)
        
        # *text_94* updates
        
        # if text_94 is starting this frame...
        if text_94.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_94.frameNStart = frameN  # exact frame index
            text_94.tStart = t  # local t and not account for scr refresh
            text_94.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_94, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_94.started')
            # update status
            text_94.status = STARTED
            text_94.setAutoDraw(True)
        
        # if text_94 is active this frame...
        if text_94.status == STARTED:
            # update params
            pass
        
        # if text_94 is stopping this frame...
        if text_94.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_94.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_94.tStop = t  # not accounting for scr refresh
                text_94.tStopRefresh = tThisFlipGlobal  # on global time
                text_94.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_94.stopped')
                # update status
                text_94.status = FINISHED
                text_94.setAutoDraw(False)
        
        # *key_resp_baoma0* updates
        waitOnFlip = False
        
        # if key_resp_baoma0 is starting this frame...
        if key_resp_baoma0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baoma0.frameNStart = frameN  # exact frame index
            key_resp_baoma0.tStart = t  # local t and not account for scr refresh
            key_resp_baoma0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baoma0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baoma0.started')
            # update status
            key_resp_baoma0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baoma0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baoma0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baoma0 is stopping this frame...
        if key_resp_baoma0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baoma0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baoma0.tStop = t  # not accounting for scr refresh
                key_resp_baoma0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baoma0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baoma0.stopped')
                # update status
                key_resp_baoma0.status = FINISHED
                key_resp_baoma0.status = FINISHED
        if key_resp_baoma0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baoma0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baoma0_allKeys.extend(theseKeys)
            if len(_key_resp_baoma0_allKeys):
                key_resp_baoma0.keys = _key_resp_baoma0_allKeys[0].name  # just the first key pressed
                key_resp_baoma0.rt = _key_resp_baoma0_allKeys[0].rt
                key_resp_baoma0.duration = _key_resp_baoma0_allKeys[0].duration
                # was this correct?
                if (key_resp_baoma0.keys == str("'left'")) or (key_resp_baoma0.keys == "'left'"):
                    key_resp_baoma0.corr = 1
                else:
                    key_resp_baoma0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baoma0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baoma0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baoma0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baoma0" ---
    for thisComponent in trial_baoma0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baoma0
    trial_baoma0.tStop = globalClock.getTime(format='float')
    trial_baoma0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baoma0.stopped', trial_baoma0.tStop)
    sound_baoma0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baoma0.keys in ['', [], None]:  # No response was made
        key_resp_baoma0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_baoma0.corr = 1;  # correct non-response
        else:
           key_resp_baoma0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baoma0.keys',key_resp_baoma0.keys)
    thisExp.addData('key_resp_baoma0.corr', key_resp_baoma0.corr)
    if key_resp_baoma0.keys != None:  # we had a response
        thisExp.addData('key_resp_baoma0.rt', key_resp_baoma0.rt)
        thisExp.addData('key_resp_baoma0.duration', key_resp_baoma0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baoma0.maxDurationReached:
        routineTimer.addTime(-trial_baoma0.maxDuration)
    elif trial_baoma0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_huahai0" ---
    # create an object to store info about Routine trial_huahai0
    trial_huahai0 = data.Routine(
        name='trial_huahai0',
        components=[text_huahai0, sound_huahai0, text_95, text_96, key_resp_huahai0],
    )
    trial_huahai0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_huahai0.setSound('audio/huahai0.wav', secs=3.0, hamming=True)
    sound_huahai0.setVolume(1.0, log=False)
    sound_huahai0.seek(0)
    # create starting attributes for key_resp_huahai0
    key_resp_huahai0.keys = []
    key_resp_huahai0.rt = []
    _key_resp_huahai0_allKeys = []
    # store start times for trial_huahai0
    trial_huahai0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_huahai0.tStart = globalClock.getTime(format='float')
    trial_huahai0.status = STARTED
    thisExp.addData('trial_huahai0.started', trial_huahai0.tStart)
    trial_huahai0.maxDuration = None
    # keep track of which components have finished
    trial_huahai0Components = trial_huahai0.components
    for thisComponent in trial_huahai0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_huahai0" ---
    trial_huahai0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_huahai0* updates
        
        # if text_huahai0 is starting this frame...
        if text_huahai0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_huahai0.frameNStart = frameN  # exact frame index
            text_huahai0.tStart = t  # local t and not account for scr refresh
            text_huahai0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_huahai0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_huahai0.started')
            # update status
            text_huahai0.status = STARTED
            text_huahai0.setAutoDraw(True)
        
        # if text_huahai0 is active this frame...
        if text_huahai0.status == STARTED:
            # update params
            pass
        
        # if text_huahai0 is stopping this frame...
        if text_huahai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_huahai0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_huahai0.tStop = t  # not accounting for scr refresh
                text_huahai0.tStopRefresh = tThisFlipGlobal  # on global time
                text_huahai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_huahai0.stopped')
                # update status
                text_huahai0.status = FINISHED
                text_huahai0.setAutoDraw(False)
        
        # *sound_huahai0* updates
        
        # if sound_huahai0 is starting this frame...
        if sound_huahai0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_huahai0.frameNStart = frameN  # exact frame index
            sound_huahai0.tStart = t  # local t and not account for scr refresh
            sound_huahai0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_huahai0.started', tThisFlipGlobal)
            # update status
            sound_huahai0.status = STARTED
            sound_huahai0.play(when=win)  # sync with win flip
        
        # if sound_huahai0 is stopping this frame...
        if sound_huahai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_huahai0.tStartRefresh + 3.0-frameTolerance or sound_huahai0.isFinished:
                # keep track of stop time/frame for later
                sound_huahai0.tStop = t  # not accounting for scr refresh
                sound_huahai0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_huahai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_huahai0.stopped')
                # update status
                sound_huahai0.status = FINISHED
                sound_huahai0.stop()
        
        # *text_95* updates
        
        # if text_95 is starting this frame...
        if text_95.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_95.frameNStart = frameN  # exact frame index
            text_95.tStart = t  # local t and not account for scr refresh
            text_95.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_95, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_95.started')
            # update status
            text_95.status = STARTED
            text_95.setAutoDraw(True)
        
        # if text_95 is active this frame...
        if text_95.status == STARTED:
            # update params
            pass
        
        # if text_95 is stopping this frame...
        if text_95.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_95.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_95.tStop = t  # not accounting for scr refresh
                text_95.tStopRefresh = tThisFlipGlobal  # on global time
                text_95.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_95.stopped')
                # update status
                text_95.status = FINISHED
                text_95.setAutoDraw(False)
        
        # *text_96* updates
        
        # if text_96 is starting this frame...
        if text_96.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_96.frameNStart = frameN  # exact frame index
            text_96.tStart = t  # local t and not account for scr refresh
            text_96.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_96, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_96.started')
            # update status
            text_96.status = STARTED
            text_96.setAutoDraw(True)
        
        # if text_96 is active this frame...
        if text_96.status == STARTED:
            # update params
            pass
        
        # if text_96 is stopping this frame...
        if text_96.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_96.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_96.tStop = t  # not accounting for scr refresh
                text_96.tStopRefresh = tThisFlipGlobal  # on global time
                text_96.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_96.stopped')
                # update status
                text_96.status = FINISHED
                text_96.setAutoDraw(False)
        
        # *key_resp_huahai0* updates
        waitOnFlip = False
        
        # if key_resp_huahai0 is starting this frame...
        if key_resp_huahai0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_huahai0.frameNStart = frameN  # exact frame index
            key_resp_huahai0.tStart = t  # local t and not account for scr refresh
            key_resp_huahai0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_huahai0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_huahai0.started')
            # update status
            key_resp_huahai0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_huahai0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_huahai0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_huahai0 is stopping this frame...
        if key_resp_huahai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_huahai0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_huahai0.tStop = t  # not accounting for scr refresh
                key_resp_huahai0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_huahai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_huahai0.stopped')
                # update status
                key_resp_huahai0.status = FINISHED
                key_resp_huahai0.status = FINISHED
        if key_resp_huahai0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_huahai0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_huahai0_allKeys.extend(theseKeys)
            if len(_key_resp_huahai0_allKeys):
                key_resp_huahai0.keys = _key_resp_huahai0_allKeys[0].name  # just the first key pressed
                key_resp_huahai0.rt = _key_resp_huahai0_allKeys[0].rt
                key_resp_huahai0.duration = _key_resp_huahai0_allKeys[0].duration
                # was this correct?
                if (key_resp_huahai0.keys == str("'left'")) or (key_resp_huahai0.keys == "'left'"):
                    key_resp_huahai0.corr = 1
                else:
                    key_resp_huahai0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_huahai0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_huahai0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_huahai0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_huahai0" ---
    for thisComponent in trial_huahai0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_huahai0
    trial_huahai0.tStop = globalClock.getTime(format='float')
    trial_huahai0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_huahai0.stopped', trial_huahai0.tStop)
    sound_huahai0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_huahai0.keys in ['', [], None]:  # No response was made
        key_resp_huahai0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_huahai0.corr = 1;  # correct non-response
        else:
           key_resp_huahai0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_huahai0.keys',key_resp_huahai0.keys)
    thisExp.addData('key_resp_huahai0.corr', key_resp_huahai0.corr)
    if key_resp_huahai0.keys != None:  # we had a response
        thisExp.addData('key_resp_huahai0.rt', key_resp_huahai0.rt)
        thisExp.addData('key_resp_huahai0.duration', key_resp_huahai0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_huahai0.maxDurationReached:
        routineTimer.addTime(-trial_huahai0.maxDuration)
    elif trial_huahai0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_lixiang1" ---
    # create an object to store info about Routine trial_lixiang1
    trial_lixiang1 = data.Routine(
        name='trial_lixiang1',
        components=[text_lixiang1, sound_lixiang1, text_97, text_98, key_resp_lixiang1],
    )
    trial_lixiang1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_lixiang1.setSound('audio/lixiang1.wav', secs=3.0, hamming=True)
    sound_lixiang1.setVolume(1.0, log=False)
    sound_lixiang1.seek(0)
    # create starting attributes for key_resp_lixiang1
    key_resp_lixiang1.keys = []
    key_resp_lixiang1.rt = []
    _key_resp_lixiang1_allKeys = []
    # store start times for trial_lixiang1
    trial_lixiang1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_lixiang1.tStart = globalClock.getTime(format='float')
    trial_lixiang1.status = STARTED
    thisExp.addData('trial_lixiang1.started', trial_lixiang1.tStart)
    trial_lixiang1.maxDuration = None
    # keep track of which components have finished
    trial_lixiang1Components = trial_lixiang1.components
    for thisComponent in trial_lixiang1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_lixiang1" ---
    trial_lixiang1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_lixiang1* updates
        
        # if text_lixiang1 is starting this frame...
        if text_lixiang1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_lixiang1.frameNStart = frameN  # exact frame index
            text_lixiang1.tStart = t  # local t and not account for scr refresh
            text_lixiang1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_lixiang1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_lixiang1.started')
            # update status
            text_lixiang1.status = STARTED
            text_lixiang1.setAutoDraw(True)
        
        # if text_lixiang1 is active this frame...
        if text_lixiang1.status == STARTED:
            # update params
            pass
        
        # if text_lixiang1 is stopping this frame...
        if text_lixiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_lixiang1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_lixiang1.tStop = t  # not accounting for scr refresh
                text_lixiang1.tStopRefresh = tThisFlipGlobal  # on global time
                text_lixiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_lixiang1.stopped')
                # update status
                text_lixiang1.status = FINISHED
                text_lixiang1.setAutoDraw(False)
        
        # *sound_lixiang1* updates
        
        # if sound_lixiang1 is starting this frame...
        if sound_lixiang1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_lixiang1.frameNStart = frameN  # exact frame index
            sound_lixiang1.tStart = t  # local t and not account for scr refresh
            sound_lixiang1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_lixiang1.started', tThisFlipGlobal)
            # update status
            sound_lixiang1.status = STARTED
            sound_lixiang1.play(when=win)  # sync with win flip
        
        # if sound_lixiang1 is stopping this frame...
        if sound_lixiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_lixiang1.tStartRefresh + 3.0-frameTolerance or sound_lixiang1.isFinished:
                # keep track of stop time/frame for later
                sound_lixiang1.tStop = t  # not accounting for scr refresh
                sound_lixiang1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_lixiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_lixiang1.stopped')
                # update status
                sound_lixiang1.status = FINISHED
                sound_lixiang1.stop()
        
        # *text_97* updates
        
        # if text_97 is starting this frame...
        if text_97.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_97.frameNStart = frameN  # exact frame index
            text_97.tStart = t  # local t and not account for scr refresh
            text_97.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_97, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_97.started')
            # update status
            text_97.status = STARTED
            text_97.setAutoDraw(True)
        
        # if text_97 is active this frame...
        if text_97.status == STARTED:
            # update params
            pass
        
        # if text_97 is stopping this frame...
        if text_97.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_97.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_97.tStop = t  # not accounting for scr refresh
                text_97.tStopRefresh = tThisFlipGlobal  # on global time
                text_97.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_97.stopped')
                # update status
                text_97.status = FINISHED
                text_97.setAutoDraw(False)
        
        # *text_98* updates
        
        # if text_98 is starting this frame...
        if text_98.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_98.frameNStart = frameN  # exact frame index
            text_98.tStart = t  # local t and not account for scr refresh
            text_98.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_98, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_98.started')
            # update status
            text_98.status = STARTED
            text_98.setAutoDraw(True)
        
        # if text_98 is active this frame...
        if text_98.status == STARTED:
            # update params
            pass
        
        # if text_98 is stopping this frame...
        if text_98.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_98.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_98.tStop = t  # not accounting for scr refresh
                text_98.tStopRefresh = tThisFlipGlobal  # on global time
                text_98.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_98.stopped')
                # update status
                text_98.status = FINISHED
                text_98.setAutoDraw(False)
        
        # *key_resp_lixiang1* updates
        waitOnFlip = False
        
        # if key_resp_lixiang1 is starting this frame...
        if key_resp_lixiang1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_lixiang1.frameNStart = frameN  # exact frame index
            key_resp_lixiang1.tStart = t  # local t and not account for scr refresh
            key_resp_lixiang1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_lixiang1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_lixiang1.started')
            # update status
            key_resp_lixiang1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_lixiang1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_lixiang1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_lixiang1 is stopping this frame...
        if key_resp_lixiang1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_lixiang1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_lixiang1.tStop = t  # not accounting for scr refresh
                key_resp_lixiang1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_lixiang1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_lixiang1.stopped')
                # update status
                key_resp_lixiang1.status = FINISHED
                key_resp_lixiang1.status = FINISHED
        if key_resp_lixiang1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_lixiang1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_lixiang1_allKeys.extend(theseKeys)
            if len(_key_resp_lixiang1_allKeys):
                key_resp_lixiang1.keys = _key_resp_lixiang1_allKeys[0].name  # just the first key pressed
                key_resp_lixiang1.rt = _key_resp_lixiang1_allKeys[0].rt
                key_resp_lixiang1.duration = _key_resp_lixiang1_allKeys[0].duration
                # was this correct?
                if (key_resp_lixiang1.keys == str("'right'")) or (key_resp_lixiang1.keys == "'right'"):
                    key_resp_lixiang1.corr = 1
                else:
                    key_resp_lixiang1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_lixiang1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_lixiang1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_lixiang1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_lixiang1" ---
    for thisComponent in trial_lixiang1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_lixiang1
    trial_lixiang1.tStop = globalClock.getTime(format='float')
    trial_lixiang1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_lixiang1.stopped', trial_lixiang1.tStop)
    sound_lixiang1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_lixiang1.keys in ['', [], None]:  # No response was made
        key_resp_lixiang1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_lixiang1.corr = 1;  # correct non-response
        else:
           key_resp_lixiang1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_lixiang1.keys',key_resp_lixiang1.keys)
    thisExp.addData('key_resp_lixiang1.corr', key_resp_lixiang1.corr)
    if key_resp_lixiang1.keys != None:  # we had a response
        thisExp.addData('key_resp_lixiang1.rt', key_resp_lixiang1.rt)
        thisExp.addData('key_resp_lixiang1.duration', key_resp_lixiang1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_lixiang1.maxDurationReached:
        routineTimer.addTime(-trial_lixiang1.maxDuration)
    elif trial_lixiang1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_beiying0" ---
    # create an object to store info about Routine trial_beiying0
    trial_beiying0 = data.Routine(
        name='trial_beiying0',
        components=[text_beiying0, sound_beiying0, text_99, text_100, key_resp_beiying0],
    )
    trial_beiying0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_beiying0.setSound('audio/beiying0.wav', secs=3, hamming=True)
    sound_beiying0.setVolume(1.0, log=False)
    sound_beiying0.seek(0)
    # create starting attributes for key_resp_beiying0
    key_resp_beiying0.keys = []
    key_resp_beiying0.rt = []
    _key_resp_beiying0_allKeys = []
    # store start times for trial_beiying0
    trial_beiying0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_beiying0.tStart = globalClock.getTime(format='float')
    trial_beiying0.status = STARTED
    thisExp.addData('trial_beiying0.started', trial_beiying0.tStart)
    trial_beiying0.maxDuration = None
    # keep track of which components have finished
    trial_beiying0Components = trial_beiying0.components
    for thisComponent in trial_beiying0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_beiying0" ---
    trial_beiying0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_beiying0* updates
        
        # if text_beiying0 is starting this frame...
        if text_beiying0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_beiying0.frameNStart = frameN  # exact frame index
            text_beiying0.tStart = t  # local t and not account for scr refresh
            text_beiying0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_beiying0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_beiying0.started')
            # update status
            text_beiying0.status = STARTED
            text_beiying0.setAutoDraw(True)
        
        # if text_beiying0 is active this frame...
        if text_beiying0.status == STARTED:
            # update params
            pass
        
        # if text_beiying0 is stopping this frame...
        if text_beiying0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_beiying0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_beiying0.tStop = t  # not accounting for scr refresh
                text_beiying0.tStopRefresh = tThisFlipGlobal  # on global time
                text_beiying0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_beiying0.stopped')
                # update status
                text_beiying0.status = FINISHED
                text_beiying0.setAutoDraw(False)
        
        # *sound_beiying0* updates
        
        # if sound_beiying0 is starting this frame...
        if sound_beiying0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_beiying0.frameNStart = frameN  # exact frame index
            sound_beiying0.tStart = t  # local t and not account for scr refresh
            sound_beiying0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_beiying0.started', tThisFlipGlobal)
            # update status
            sound_beiying0.status = STARTED
            sound_beiying0.play(when=win)  # sync with win flip
        
        # if sound_beiying0 is stopping this frame...
        if sound_beiying0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_beiying0.tStartRefresh + 3-frameTolerance or sound_beiying0.isFinished:
                # keep track of stop time/frame for later
                sound_beiying0.tStop = t  # not accounting for scr refresh
                sound_beiying0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_beiying0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_beiying0.stopped')
                # update status
                sound_beiying0.status = FINISHED
                sound_beiying0.stop()
        
        # *text_99* updates
        
        # if text_99 is starting this frame...
        if text_99.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_99.frameNStart = frameN  # exact frame index
            text_99.tStart = t  # local t and not account for scr refresh
            text_99.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_99, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_99.started')
            # update status
            text_99.status = STARTED
            text_99.setAutoDraw(True)
        
        # if text_99 is active this frame...
        if text_99.status == STARTED:
            # update params
            pass
        
        # if text_99 is stopping this frame...
        if text_99.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_99.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_99.tStop = t  # not accounting for scr refresh
                text_99.tStopRefresh = tThisFlipGlobal  # on global time
                text_99.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_99.stopped')
                # update status
                text_99.status = FINISHED
                text_99.setAutoDraw(False)
        
        # *text_100* updates
        
        # if text_100 is starting this frame...
        if text_100.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_100.frameNStart = frameN  # exact frame index
            text_100.tStart = t  # local t and not account for scr refresh
            text_100.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_100, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_100.started')
            # update status
            text_100.status = STARTED
            text_100.setAutoDraw(True)
        
        # if text_100 is active this frame...
        if text_100.status == STARTED:
            # update params
            pass
        
        # if text_100 is stopping this frame...
        if text_100.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_100.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_100.tStop = t  # not accounting for scr refresh
                text_100.tStopRefresh = tThisFlipGlobal  # on global time
                text_100.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_100.stopped')
                # update status
                text_100.status = FINISHED
                text_100.setAutoDraw(False)
        
        # *key_resp_beiying0* updates
        
        # if key_resp_beiying0 is starting this frame...
        if key_resp_beiying0.status == NOT_STARTED and t >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_beiying0.frameNStart = frameN  # exact frame index
            key_resp_beiying0.tStart = t  # local t and not account for scr refresh
            key_resp_beiying0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_beiying0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.addData('key_resp_beiying0.started', t)
            # update status
            key_resp_beiying0.status = STARTED
            # keyboard checking is just starting
            key_resp_beiying0.clock.reset()  # now t=0
            key_resp_beiying0.clearEvents(eventType='keyboard')
        
        # if key_resp_beiying0 is stopping this frame...
        if key_resp_beiying0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_beiying0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_beiying0.tStop = t  # not accounting for scr refresh
                key_resp_beiying0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_beiying0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.addData('key_resp_beiying0.stopped', t)
                # update status
                key_resp_beiying0.status = FINISHED
                key_resp_beiying0.status = FINISHED
        if key_resp_beiying0.status == STARTED:
            theseKeys = key_resp_beiying0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_beiying0_allKeys.extend(theseKeys)
            if len(_key_resp_beiying0_allKeys):
                key_resp_beiying0.keys = _key_resp_beiying0_allKeys[0].name  # just the first key pressed
                key_resp_beiying0.rt = _key_resp_beiying0_allKeys[0].rt
                key_resp_beiying0.duration = _key_resp_beiying0_allKeys[0].duration
                # was this correct?
                if (key_resp_beiying0.keys == str("'left'")) or (key_resp_beiying0.keys == "'left'"):
                    key_resp_beiying0.corr = 1
                else:
                    key_resp_beiying0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_beiying0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_beiying0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_beiying0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_beiying0" ---
    for thisComponent in trial_beiying0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_beiying0
    trial_beiying0.tStop = globalClock.getTime(format='float')
    trial_beiying0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_beiying0.stopped', trial_beiying0.tStop)
    sound_beiying0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_beiying0.keys in ['', [], None]:  # No response was made
        key_resp_beiying0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_beiying0.corr = 1;  # correct non-response
        else:
           key_resp_beiying0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_beiying0.keys',key_resp_beiying0.keys)
    thisExp.addData('key_resp_beiying0.corr', key_resp_beiying0.corr)
    if key_resp_beiying0.keys != None:  # we had a response
        thisExp.addData('key_resp_beiying0.rt', key_resp_beiying0.rt)
        thisExp.addData('key_resp_beiying0.duration', key_resp_beiying0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_beiying0.maxDurationReached:
        routineTimer.addTime(-trial_beiying0.maxDuration)
    elif trial_beiying0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_lianxiang0" ---
    # create an object to store info about Routine trial_lianxiang0
    trial_lianxiang0 = data.Routine(
        name='trial_lianxiang0',
        components=[text_lianxiang0, sound_lianxiang0, text_101, text_102, key_resp_lianxiang0],
    )
    trial_lianxiang0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_lianxiang0.setSound('audio/lianxiang0.wav', secs=3.0, hamming=True)
    sound_lianxiang0.setVolume(1.0, log=False)
    sound_lianxiang0.seek(0)
    # create starting attributes for key_resp_lianxiang0
    key_resp_lianxiang0.keys = []
    key_resp_lianxiang0.rt = []
    _key_resp_lianxiang0_allKeys = []
    # store start times for trial_lianxiang0
    trial_lianxiang0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_lianxiang0.tStart = globalClock.getTime(format='float')
    trial_lianxiang0.status = STARTED
    thisExp.addData('trial_lianxiang0.started', trial_lianxiang0.tStart)
    trial_lianxiang0.maxDuration = None
    # keep track of which components have finished
    trial_lianxiang0Components = trial_lianxiang0.components
    for thisComponent in trial_lianxiang0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_lianxiang0" ---
    trial_lianxiang0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_lianxiang0* updates
        
        # if text_lianxiang0 is starting this frame...
        if text_lianxiang0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_lianxiang0.frameNStart = frameN  # exact frame index
            text_lianxiang0.tStart = t  # local t and not account for scr refresh
            text_lianxiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_lianxiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_lianxiang0.started')
            # update status
            text_lianxiang0.status = STARTED
            text_lianxiang0.setAutoDraw(True)
        
        # if text_lianxiang0 is active this frame...
        if text_lianxiang0.status == STARTED:
            # update params
            pass
        
        # if text_lianxiang0 is stopping this frame...
        if text_lianxiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_lianxiang0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_lianxiang0.tStop = t  # not accounting for scr refresh
                text_lianxiang0.tStopRefresh = tThisFlipGlobal  # on global time
                text_lianxiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_lianxiang0.stopped')
                # update status
                text_lianxiang0.status = FINISHED
                text_lianxiang0.setAutoDraw(False)
        
        # *sound_lianxiang0* updates
        
        # if sound_lianxiang0 is starting this frame...
        if sound_lianxiang0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_lianxiang0.frameNStart = frameN  # exact frame index
            sound_lianxiang0.tStart = t  # local t and not account for scr refresh
            sound_lianxiang0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_lianxiang0.started', tThisFlipGlobal)
            # update status
            sound_lianxiang0.status = STARTED
            sound_lianxiang0.play(when=win)  # sync with win flip
        
        # if sound_lianxiang0 is stopping this frame...
        if sound_lianxiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_lianxiang0.tStartRefresh + 3.0-frameTolerance or sound_lianxiang0.isFinished:
                # keep track of stop time/frame for later
                sound_lianxiang0.tStop = t  # not accounting for scr refresh
                sound_lianxiang0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_lianxiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_lianxiang0.stopped')
                # update status
                sound_lianxiang0.status = FINISHED
                sound_lianxiang0.stop()
        
        # *text_101* updates
        
        # if text_101 is starting this frame...
        if text_101.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_101.frameNStart = frameN  # exact frame index
            text_101.tStart = t  # local t and not account for scr refresh
            text_101.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_101, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_101.started')
            # update status
            text_101.status = STARTED
            text_101.setAutoDraw(True)
        
        # if text_101 is active this frame...
        if text_101.status == STARTED:
            # update params
            pass
        
        # if text_101 is stopping this frame...
        if text_101.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_101.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_101.tStop = t  # not accounting for scr refresh
                text_101.tStopRefresh = tThisFlipGlobal  # on global time
                text_101.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_101.stopped')
                # update status
                text_101.status = FINISHED
                text_101.setAutoDraw(False)
        
        # *text_102* updates
        
        # if text_102 is starting this frame...
        if text_102.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_102.frameNStart = frameN  # exact frame index
            text_102.tStart = t  # local t and not account for scr refresh
            text_102.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_102, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_102.started')
            # update status
            text_102.status = STARTED
            text_102.setAutoDraw(True)
        
        # if text_102 is active this frame...
        if text_102.status == STARTED:
            # update params
            pass
        
        # if text_102 is stopping this frame...
        if text_102.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_102.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_102.tStop = t  # not accounting for scr refresh
                text_102.tStopRefresh = tThisFlipGlobal  # on global time
                text_102.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_102.stopped')
                # update status
                text_102.status = FINISHED
                text_102.setAutoDraw(False)
        
        # *key_resp_lianxiang0* updates
        waitOnFlip = False
        
        # if key_resp_lianxiang0 is starting this frame...
        if key_resp_lianxiang0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_lianxiang0.frameNStart = frameN  # exact frame index
            key_resp_lianxiang0.tStart = t  # local t and not account for scr refresh
            key_resp_lianxiang0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_lianxiang0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_lianxiang0.started')
            # update status
            key_resp_lianxiang0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_lianxiang0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_lianxiang0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_lianxiang0 is stopping this frame...
        if key_resp_lianxiang0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_lianxiang0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_lianxiang0.tStop = t  # not accounting for scr refresh
                key_resp_lianxiang0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_lianxiang0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_lianxiang0.stopped')
                # update status
                key_resp_lianxiang0.status = FINISHED
                key_resp_lianxiang0.status = FINISHED
        if key_resp_lianxiang0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_lianxiang0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_lianxiang0_allKeys.extend(theseKeys)
            if len(_key_resp_lianxiang0_allKeys):
                key_resp_lianxiang0.keys = _key_resp_lianxiang0_allKeys[0].name  # just the first key pressed
                key_resp_lianxiang0.rt = _key_resp_lianxiang0_allKeys[0].rt
                key_resp_lianxiang0.duration = _key_resp_lianxiang0_allKeys[0].duration
                # was this correct?
                if (key_resp_lianxiang0.keys == str("'left'")) or (key_resp_lianxiang0.keys == "'left'"):
                    key_resp_lianxiang0.corr = 1
                else:
                    key_resp_lianxiang0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_lianxiang0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_lianxiang0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_lianxiang0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_lianxiang0" ---
    for thisComponent in trial_lianxiang0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_lianxiang0
    trial_lianxiang0.tStop = globalClock.getTime(format='float')
    trial_lianxiang0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_lianxiang0.stopped', trial_lianxiang0.tStop)
    sound_lianxiang0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_lianxiang0.keys in ['', [], None]:  # No response was made
        key_resp_lianxiang0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_lianxiang0.corr = 1;  # correct non-response
        else:
           key_resp_lianxiang0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_lianxiang0.keys',key_resp_lianxiang0.keys)
    thisExp.addData('key_resp_lianxiang0.corr', key_resp_lianxiang0.corr)
    if key_resp_lianxiang0.keys != None:  # we had a response
        thisExp.addData('key_resp_lianxiang0.rt', key_resp_lianxiang0.rt)
        thisExp.addData('key_resp_lianxiang0.duration', key_resp_lianxiang0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_lianxiang0.maxDurationReached:
        routineTimer.addTime(-trial_lianxiang0.maxDuration)
    elif trial_lianxiang0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_gongfu1" ---
    # create an object to store info about Routine trial_gongfu1
    trial_gongfu1 = data.Routine(
        name='trial_gongfu1',
        components=[text_gongfu1, sound_gongfu1, text_105, text_106, key_resp_gongfu1],
    )
    trial_gongfu1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_gongfu1.setSound('audio/gongfu1.wav', secs=3.0, hamming=True)
    sound_gongfu1.setVolume(1.0, log=False)
    sound_gongfu1.seek(0)
    # create starting attributes for key_resp_gongfu1
    key_resp_gongfu1.keys = []
    key_resp_gongfu1.rt = []
    _key_resp_gongfu1_allKeys = []
    # store start times for trial_gongfu1
    trial_gongfu1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_gongfu1.tStart = globalClock.getTime(format='float')
    trial_gongfu1.status = STARTED
    thisExp.addData('trial_gongfu1.started', trial_gongfu1.tStart)
    trial_gongfu1.maxDuration = None
    # keep track of which components have finished
    trial_gongfu1Components = trial_gongfu1.components
    for thisComponent in trial_gongfu1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_gongfu1" ---
    trial_gongfu1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_gongfu1* updates
        
        # if text_gongfu1 is starting this frame...
        if text_gongfu1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_gongfu1.frameNStart = frameN  # exact frame index
            text_gongfu1.tStart = t  # local t and not account for scr refresh
            text_gongfu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_gongfu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_gongfu1.started')
            # update status
            text_gongfu1.status = STARTED
            text_gongfu1.setAutoDraw(True)
        
        # if text_gongfu1 is active this frame...
        if text_gongfu1.status == STARTED:
            # update params
            pass
        
        # if text_gongfu1 is stopping this frame...
        if text_gongfu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_gongfu1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_gongfu1.tStop = t  # not accounting for scr refresh
                text_gongfu1.tStopRefresh = tThisFlipGlobal  # on global time
                text_gongfu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_gongfu1.stopped')
                # update status
                text_gongfu1.status = FINISHED
                text_gongfu1.setAutoDraw(False)
        
        # *sound_gongfu1* updates
        
        # if sound_gongfu1 is starting this frame...
        if sound_gongfu1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_gongfu1.frameNStart = frameN  # exact frame index
            sound_gongfu1.tStart = t  # local t and not account for scr refresh
            sound_gongfu1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_gongfu1.started', tThisFlipGlobal)
            # update status
            sound_gongfu1.status = STARTED
            sound_gongfu1.play(when=win)  # sync with win flip
        
        # if sound_gongfu1 is stopping this frame...
        if sound_gongfu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_gongfu1.tStartRefresh + 3.0-frameTolerance or sound_gongfu1.isFinished:
                # keep track of stop time/frame for later
                sound_gongfu1.tStop = t  # not accounting for scr refresh
                sound_gongfu1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_gongfu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_gongfu1.stopped')
                # update status
                sound_gongfu1.status = FINISHED
                sound_gongfu1.stop()
        
        # *text_105* updates
        
        # if text_105 is starting this frame...
        if text_105.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_105.frameNStart = frameN  # exact frame index
            text_105.tStart = t  # local t and not account for scr refresh
            text_105.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_105, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_105.started')
            # update status
            text_105.status = STARTED
            text_105.setAutoDraw(True)
        
        # if text_105 is active this frame...
        if text_105.status == STARTED:
            # update params
            pass
        
        # if text_105 is stopping this frame...
        if text_105.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_105.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_105.tStop = t  # not accounting for scr refresh
                text_105.tStopRefresh = tThisFlipGlobal  # on global time
                text_105.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_105.stopped')
                # update status
                text_105.status = FINISHED
                text_105.setAutoDraw(False)
        
        # *text_106* updates
        
        # if text_106 is starting this frame...
        if text_106.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_106.frameNStart = frameN  # exact frame index
            text_106.tStart = t  # local t and not account for scr refresh
            text_106.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_106, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_106.started')
            # update status
            text_106.status = STARTED
            text_106.setAutoDraw(True)
        
        # if text_106 is active this frame...
        if text_106.status == STARTED:
            # update params
            pass
        
        # if text_106 is stopping this frame...
        if text_106.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_106.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_106.tStop = t  # not accounting for scr refresh
                text_106.tStopRefresh = tThisFlipGlobal  # on global time
                text_106.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_106.stopped')
                # update status
                text_106.status = FINISHED
                text_106.setAutoDraw(False)
        
        # *key_resp_gongfu1* updates
        waitOnFlip = False
        
        # if key_resp_gongfu1 is starting this frame...
        if key_resp_gongfu1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_gongfu1.frameNStart = frameN  # exact frame index
            key_resp_gongfu1.tStart = t  # local t and not account for scr refresh
            key_resp_gongfu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_gongfu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_gongfu1.started')
            # update status
            key_resp_gongfu1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_gongfu1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_gongfu1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_gongfu1 is stopping this frame...
        if key_resp_gongfu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_gongfu1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_gongfu1.tStop = t  # not accounting for scr refresh
                key_resp_gongfu1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_gongfu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_gongfu1.stopped')
                # update status
                key_resp_gongfu1.status = FINISHED
                key_resp_gongfu1.status = FINISHED
        if key_resp_gongfu1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_gongfu1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_gongfu1_allKeys.extend(theseKeys)
            if len(_key_resp_gongfu1_allKeys):
                key_resp_gongfu1.keys = _key_resp_gongfu1_allKeys[0].name  # just the first key pressed
                key_resp_gongfu1.rt = _key_resp_gongfu1_allKeys[0].rt
                key_resp_gongfu1.duration = _key_resp_gongfu1_allKeys[0].duration
                # was this correct?
                if (key_resp_gongfu1.keys == str("'right'")) or (key_resp_gongfu1.keys == "'right'"):
                    key_resp_gongfu1.corr = 1
                else:
                    key_resp_gongfu1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_gongfu1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_gongfu1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_gongfu1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_gongfu1" ---
    for thisComponent in trial_gongfu1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_gongfu1
    trial_gongfu1.tStop = globalClock.getTime(format='float')
    trial_gongfu1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_gongfu1.stopped', trial_gongfu1.tStop)
    sound_gongfu1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_gongfu1.keys in ['', [], None]:  # No response was made
        key_resp_gongfu1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_gongfu1.corr = 1;  # correct non-response
        else:
           key_resp_gongfu1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_gongfu1.keys',key_resp_gongfu1.keys)
    thisExp.addData('key_resp_gongfu1.corr', key_resp_gongfu1.corr)
    if key_resp_gongfu1.keys != None:  # we had a response
        thisExp.addData('key_resp_gongfu1.rt', key_resp_gongfu1.rt)
        thisExp.addData('key_resp_gongfu1.duration', key_resp_gongfu1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_gongfu1.maxDurationReached:
        routineTimer.addTime(-trial_gongfu1.maxDuration)
    elif trial_gongfu1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_miantiao" ---
    # create an object to store info about Routine trial_miantiao
    trial_miantiao = data.Routine(
        name='trial_miantiao',
        components=[text_miantiao, sound_miantiao, text_107, text_108, key_resp_miantiao],
    )
    trial_miantiao.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_miantiao.setSound('audio/miantiao.wav', secs=3.0, hamming=True)
    sound_miantiao.setVolume(1.0, log=False)
    sound_miantiao.seek(0)
    # create starting attributes for key_resp_miantiao
    key_resp_miantiao.keys = []
    key_resp_miantiao.rt = []
    _key_resp_miantiao_allKeys = []
    # store start times for trial_miantiao
    trial_miantiao.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_miantiao.tStart = globalClock.getTime(format='float')
    trial_miantiao.status = STARTED
    thisExp.addData('trial_miantiao.started', trial_miantiao.tStart)
    trial_miantiao.maxDuration = None
    # keep track of which components have finished
    trial_miantiaoComponents = trial_miantiao.components
    for thisComponent in trial_miantiao.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_miantiao" ---
    trial_miantiao.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_miantiao* updates
        
        # if text_miantiao is starting this frame...
        if text_miantiao.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_miantiao.frameNStart = frameN  # exact frame index
            text_miantiao.tStart = t  # local t and not account for scr refresh
            text_miantiao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_miantiao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_miantiao.started')
            # update status
            text_miantiao.status = STARTED
            text_miantiao.setAutoDraw(True)
        
        # if text_miantiao is active this frame...
        if text_miantiao.status == STARTED:
            # update params
            pass
        
        # if text_miantiao is stopping this frame...
        if text_miantiao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_miantiao.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_miantiao.tStop = t  # not accounting for scr refresh
                text_miantiao.tStopRefresh = tThisFlipGlobal  # on global time
                text_miantiao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_miantiao.stopped')
                # update status
                text_miantiao.status = FINISHED
                text_miantiao.setAutoDraw(False)
        
        # *sound_miantiao* updates
        
        # if sound_miantiao is starting this frame...
        if sound_miantiao.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_miantiao.frameNStart = frameN  # exact frame index
            sound_miantiao.tStart = t  # local t and not account for scr refresh
            sound_miantiao.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_miantiao.started', tThisFlipGlobal)
            # update status
            sound_miantiao.status = STARTED
            sound_miantiao.play(when=win)  # sync with win flip
        
        # if sound_miantiao is stopping this frame...
        if sound_miantiao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_miantiao.tStartRefresh + 3.0-frameTolerance or sound_miantiao.isFinished:
                # keep track of stop time/frame for later
                sound_miantiao.tStop = t  # not accounting for scr refresh
                sound_miantiao.tStopRefresh = tThisFlipGlobal  # on global time
                sound_miantiao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_miantiao.stopped')
                # update status
                sound_miantiao.status = FINISHED
                sound_miantiao.stop()
        
        # *text_107* updates
        
        # if text_107 is starting this frame...
        if text_107.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_107.frameNStart = frameN  # exact frame index
            text_107.tStart = t  # local t and not account for scr refresh
            text_107.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_107, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_107.started')
            # update status
            text_107.status = STARTED
            text_107.setAutoDraw(True)
        
        # if text_107 is active this frame...
        if text_107.status == STARTED:
            # update params
            pass
        
        # if text_107 is stopping this frame...
        if text_107.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_107.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_107.tStop = t  # not accounting for scr refresh
                text_107.tStopRefresh = tThisFlipGlobal  # on global time
                text_107.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_107.stopped')
                # update status
                text_107.status = FINISHED
                text_107.setAutoDraw(False)
        
        # *text_108* updates
        
        # if text_108 is starting this frame...
        if text_108.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_108.frameNStart = frameN  # exact frame index
            text_108.tStart = t  # local t and not account for scr refresh
            text_108.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_108, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_108.started')
            # update status
            text_108.status = STARTED
            text_108.setAutoDraw(True)
        
        # if text_108 is active this frame...
        if text_108.status == STARTED:
            # update params
            pass
        
        # if text_108 is stopping this frame...
        if text_108.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_108.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_108.tStop = t  # not accounting for scr refresh
                text_108.tStopRefresh = tThisFlipGlobal  # on global time
                text_108.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_108.stopped')
                # update status
                text_108.status = FINISHED
                text_108.setAutoDraw(False)
        
        # *key_resp_miantiao* updates
        waitOnFlip = False
        
        # if key_resp_miantiao is starting this frame...
        if key_resp_miantiao.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_miantiao.frameNStart = frameN  # exact frame index
            key_resp_miantiao.tStart = t  # local t and not account for scr refresh
            key_resp_miantiao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_miantiao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_miantiao.started')
            # update status
            key_resp_miantiao.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_miantiao.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_miantiao.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_miantiao is stopping this frame...
        if key_resp_miantiao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_miantiao.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_miantiao.tStop = t  # not accounting for scr refresh
                key_resp_miantiao.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_miantiao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_miantiao.stopped')
                # update status
                key_resp_miantiao.status = FINISHED
                key_resp_miantiao.status = FINISHED
        if key_resp_miantiao.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_miantiao.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_miantiao_allKeys.extend(theseKeys)
            if len(_key_resp_miantiao_allKeys):
                key_resp_miantiao.keys = _key_resp_miantiao_allKeys[0].name  # just the first key pressed
                key_resp_miantiao.rt = _key_resp_miantiao_allKeys[0].rt
                key_resp_miantiao.duration = _key_resp_miantiao_allKeys[0].duration
                # was this correct?
                if (key_resp_miantiao.keys == str("'left'")) or (key_resp_miantiao.keys == "'left'"):
                    key_resp_miantiao.corr = 1
                else:
                    key_resp_miantiao.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_miantiao]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_miantiao.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_miantiao.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_miantiao" ---
    for thisComponent in trial_miantiao.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_miantiao
    trial_miantiao.tStop = globalClock.getTime(format='float')
    trial_miantiao.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_miantiao.stopped', trial_miantiao.tStop)
    sound_miantiao.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_miantiao.keys in ['', [], None]:  # No response was made
        key_resp_miantiao.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_miantiao.corr = 1;  # correct non-response
        else:
           key_resp_miantiao.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_miantiao.keys',key_resp_miantiao.keys)
    thisExp.addData('key_resp_miantiao.corr', key_resp_miantiao.corr)
    if key_resp_miantiao.keys != None:  # we had a response
        thisExp.addData('key_resp_miantiao.rt', key_resp_miantiao.rt)
        thisExp.addData('key_resp_miantiao.duration', key_resp_miantiao.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_miantiao.maxDurationReached:
        routineTimer.addTime(-trial_miantiao.maxDuration)
    elif trial_miantiao.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_heimao" ---
    # create an object to store info about Routine trial_heimao
    trial_heimao = data.Routine(
        name='trial_heimao',
        components=[text_heimao, sound_heimao, text_109, text_110, key_resp_heimao],
    )
    trial_heimao.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_heimao.setSound('audio/heimao.wav', secs=3.0, hamming=True)
    sound_heimao.setVolume(1.0, log=False)
    sound_heimao.seek(0)
    # create starting attributes for key_resp_heimao
    key_resp_heimao.keys = []
    key_resp_heimao.rt = []
    _key_resp_heimao_allKeys = []
    # store start times for trial_heimao
    trial_heimao.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_heimao.tStart = globalClock.getTime(format='float')
    trial_heimao.status = STARTED
    thisExp.addData('trial_heimao.started', trial_heimao.tStart)
    trial_heimao.maxDuration = None
    # keep track of which components have finished
    trial_heimaoComponents = trial_heimao.components
    for thisComponent in trial_heimao.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_heimao" ---
    trial_heimao.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_heimao* updates
        
        # if text_heimao is starting this frame...
        if text_heimao.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_heimao.frameNStart = frameN  # exact frame index
            text_heimao.tStart = t  # local t and not account for scr refresh
            text_heimao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_heimao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_heimao.started')
            # update status
            text_heimao.status = STARTED
            text_heimao.setAutoDraw(True)
        
        # if text_heimao is active this frame...
        if text_heimao.status == STARTED:
            # update params
            pass
        
        # if text_heimao is stopping this frame...
        if text_heimao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_heimao.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_heimao.tStop = t  # not accounting for scr refresh
                text_heimao.tStopRefresh = tThisFlipGlobal  # on global time
                text_heimao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_heimao.stopped')
                # update status
                text_heimao.status = FINISHED
                text_heimao.setAutoDraw(False)
        
        # *sound_heimao* updates
        
        # if sound_heimao is starting this frame...
        if sound_heimao.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_heimao.frameNStart = frameN  # exact frame index
            sound_heimao.tStart = t  # local t and not account for scr refresh
            sound_heimao.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_heimao.started', tThisFlipGlobal)
            # update status
            sound_heimao.status = STARTED
            sound_heimao.play(when=win)  # sync with win flip
        
        # if sound_heimao is stopping this frame...
        if sound_heimao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_heimao.tStartRefresh + 3.0-frameTolerance or sound_heimao.isFinished:
                # keep track of stop time/frame for later
                sound_heimao.tStop = t  # not accounting for scr refresh
                sound_heimao.tStopRefresh = tThisFlipGlobal  # on global time
                sound_heimao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_heimao.stopped')
                # update status
                sound_heimao.status = FINISHED
                sound_heimao.stop()
        
        # *text_109* updates
        
        # if text_109 is starting this frame...
        if text_109.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_109.frameNStart = frameN  # exact frame index
            text_109.tStart = t  # local t and not account for scr refresh
            text_109.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_109, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_109.started')
            # update status
            text_109.status = STARTED
            text_109.setAutoDraw(True)
        
        # if text_109 is active this frame...
        if text_109.status == STARTED:
            # update params
            pass
        
        # if text_109 is stopping this frame...
        if text_109.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_109.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_109.tStop = t  # not accounting for scr refresh
                text_109.tStopRefresh = tThisFlipGlobal  # on global time
                text_109.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_109.stopped')
                # update status
                text_109.status = FINISHED
                text_109.setAutoDraw(False)
        
        # *text_110* updates
        
        # if text_110 is starting this frame...
        if text_110.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_110.frameNStart = frameN  # exact frame index
            text_110.tStart = t  # local t and not account for scr refresh
            text_110.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_110, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_110.started')
            # update status
            text_110.status = STARTED
            text_110.setAutoDraw(True)
        
        # if text_110 is active this frame...
        if text_110.status == STARTED:
            # update params
            pass
        
        # if text_110 is stopping this frame...
        if text_110.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_110.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_110.tStop = t  # not accounting for scr refresh
                text_110.tStopRefresh = tThisFlipGlobal  # on global time
                text_110.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_110.stopped')
                # update status
                text_110.status = FINISHED
                text_110.setAutoDraw(False)
        
        # *key_resp_heimao* updates
        waitOnFlip = False
        
        # if key_resp_heimao is starting this frame...
        if key_resp_heimao.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_heimao.frameNStart = frameN  # exact frame index
            key_resp_heimao.tStart = t  # local t and not account for scr refresh
            key_resp_heimao.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_heimao, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_heimao.started')
            # update status
            key_resp_heimao.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_heimao.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_heimao.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_heimao is stopping this frame...
        if key_resp_heimao.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_heimao.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_heimao.tStop = t  # not accounting for scr refresh
                key_resp_heimao.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_heimao.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_heimao.stopped')
                # update status
                key_resp_heimao.status = FINISHED
                key_resp_heimao.status = FINISHED
        if key_resp_heimao.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_heimao.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_heimao_allKeys.extend(theseKeys)
            if len(_key_resp_heimao_allKeys):
                key_resp_heimao.keys = _key_resp_heimao_allKeys[0].name  # just the first key pressed
                key_resp_heimao.rt = _key_resp_heimao_allKeys[0].rt
                key_resp_heimao.duration = _key_resp_heimao_allKeys[0].duration
                # was this correct?
                if (key_resp_heimao.keys == str("'left'")) or (key_resp_heimao.keys == "'left'"):
                    key_resp_heimao.corr = 1
                else:
                    key_resp_heimao.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_heimao]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_heimao.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_heimao.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_heimao" ---
    for thisComponent in trial_heimao.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_heimao
    trial_heimao.tStop = globalClock.getTime(format='float')
    trial_heimao.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_heimao.stopped', trial_heimao.tStop)
    sound_heimao.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_heimao.keys in ['', [], None]:  # No response was made
        key_resp_heimao.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_heimao.corr = 1;  # correct non-response
        else:
           key_resp_heimao.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_heimao.keys',key_resp_heimao.keys)
    thisExp.addData('key_resp_heimao.corr', key_resp_heimao.corr)
    if key_resp_heimao.keys != None:  # we had a response
        thisExp.addData('key_resp_heimao.rt', key_resp_heimao.rt)
        thisExp.addData('key_resp_heimao.duration', key_resp_heimao.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_heimao.maxDurationReached:
        routineTimer.addTime(-trial_heimao.maxDuration)
    elif trial_heimao.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_beiying1" ---
    # create an object to store info about Routine trial_beiying1
    trial_beiying1 = data.Routine(
        name='trial_beiying1',
        components=[text_beiying1, sound_beiying1, text_111, text_112, key_resp_beiying1],
    )
    trial_beiying1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_beiying1.setSound('audio/beiying1.wav', secs=3, hamming=True)
    sound_beiying1.setVolume(1.0, log=False)
    sound_beiying1.seek(0)
    # create starting attributes for key_resp_beiying1
    key_resp_beiying1.keys = []
    key_resp_beiying1.rt = []
    _key_resp_beiying1_allKeys = []
    # store start times for trial_beiying1
    trial_beiying1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_beiying1.tStart = globalClock.getTime(format='float')
    trial_beiying1.status = STARTED
    thisExp.addData('trial_beiying1.started', trial_beiying1.tStart)
    trial_beiying1.maxDuration = None
    # keep track of which components have finished
    trial_beiying1Components = trial_beiying1.components
    for thisComponent in trial_beiying1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_beiying1" ---
    trial_beiying1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_beiying1* updates
        
        # if text_beiying1 is starting this frame...
        if text_beiying1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_beiying1.frameNStart = frameN  # exact frame index
            text_beiying1.tStart = t  # local t and not account for scr refresh
            text_beiying1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_beiying1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_beiying1.started')
            # update status
            text_beiying1.status = STARTED
            text_beiying1.setAutoDraw(True)
        
        # if text_beiying1 is active this frame...
        if text_beiying1.status == STARTED:
            # update params
            pass
        
        # if text_beiying1 is stopping this frame...
        if text_beiying1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_beiying1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_beiying1.tStop = t  # not accounting for scr refresh
                text_beiying1.tStopRefresh = tThisFlipGlobal  # on global time
                text_beiying1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_beiying1.stopped')
                # update status
                text_beiying1.status = FINISHED
                text_beiying1.setAutoDraw(False)
        
        # *sound_beiying1* updates
        
        # if sound_beiying1 is starting this frame...
        if sound_beiying1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_beiying1.frameNStart = frameN  # exact frame index
            sound_beiying1.tStart = t  # local t and not account for scr refresh
            sound_beiying1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_beiying1.started', tThisFlipGlobal)
            # update status
            sound_beiying1.status = STARTED
            sound_beiying1.play(when=win)  # sync with win flip
        
        # if sound_beiying1 is stopping this frame...
        if sound_beiying1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_beiying1.tStartRefresh + 3-frameTolerance or sound_beiying1.isFinished:
                # keep track of stop time/frame for later
                sound_beiying1.tStop = t  # not accounting for scr refresh
                sound_beiying1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_beiying1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_beiying1.stopped')
                # update status
                sound_beiying1.status = FINISHED
                sound_beiying1.stop()
        
        # *text_111* updates
        
        # if text_111 is starting this frame...
        if text_111.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_111.frameNStart = frameN  # exact frame index
            text_111.tStart = t  # local t and not account for scr refresh
            text_111.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_111, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_111.started')
            # update status
            text_111.status = STARTED
            text_111.setAutoDraw(True)
        
        # if text_111 is active this frame...
        if text_111.status == STARTED:
            # update params
            pass
        
        # if text_111 is stopping this frame...
        if text_111.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_111.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_111.tStop = t  # not accounting for scr refresh
                text_111.tStopRefresh = tThisFlipGlobal  # on global time
                text_111.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_111.stopped')
                # update status
                text_111.status = FINISHED
                text_111.setAutoDraw(False)
        
        # *text_112* updates
        
        # if text_112 is starting this frame...
        if text_112.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_112.frameNStart = frameN  # exact frame index
            text_112.tStart = t  # local t and not account for scr refresh
            text_112.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_112, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_112.started')
            # update status
            text_112.status = STARTED
            text_112.setAutoDraw(True)
        
        # if text_112 is active this frame...
        if text_112.status == STARTED:
            # update params
            pass
        
        # if text_112 is stopping this frame...
        if text_112.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_112.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_112.tStop = t  # not accounting for scr refresh
                text_112.tStopRefresh = tThisFlipGlobal  # on global time
                text_112.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_112.stopped')
                # update status
                text_112.status = FINISHED
                text_112.setAutoDraw(False)
        
        # *key_resp_beiying1* updates
        waitOnFlip = False
        
        # if key_resp_beiying1 is starting this frame...
        if key_resp_beiying1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_beiying1.frameNStart = frameN  # exact frame index
            key_resp_beiying1.tStart = t  # local t and not account for scr refresh
            key_resp_beiying1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_beiying1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_beiying1.started')
            # update status
            key_resp_beiying1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_beiying1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_beiying1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_beiying1 is stopping this frame...
        if key_resp_beiying1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_beiying1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_beiying1.tStop = t  # not accounting for scr refresh
                key_resp_beiying1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_beiying1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_beiying1.stopped')
                # update status
                key_resp_beiying1.status = FINISHED
                key_resp_beiying1.status = FINISHED
        if key_resp_beiying1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_beiying1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_beiying1_allKeys.extend(theseKeys)
            if len(_key_resp_beiying1_allKeys):
                key_resp_beiying1.keys = _key_resp_beiying1_allKeys[0].name  # just the first key pressed
                key_resp_beiying1.rt = _key_resp_beiying1_allKeys[0].rt
                key_resp_beiying1.duration = _key_resp_beiying1_allKeys[0].duration
                # was this correct?
                if (key_resp_beiying1.keys == str("'right'")) or (key_resp_beiying1.keys == "'right'"):
                    key_resp_beiying1.corr = 1
                else:
                    key_resp_beiying1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_beiying1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_beiying1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_beiying1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_beiying1" ---
    for thisComponent in trial_beiying1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_beiying1
    trial_beiying1.tStop = globalClock.getTime(format='float')
    trial_beiying1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_beiying1.stopped', trial_beiying1.tStop)
    sound_beiying1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_beiying1.keys in ['', [], None]:  # No response was made
        key_resp_beiying1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_beiying1.corr = 1;  # correct non-response
        else:
           key_resp_beiying1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_beiying1.keys',key_resp_beiying1.keys)
    thisExp.addData('key_resp_beiying1.corr', key_resp_beiying1.corr)
    if key_resp_beiying1.keys != None:  # we had a response
        thisExp.addData('key_resp_beiying1.rt', key_resp_beiying1.rt)
        thisExp.addData('key_resp_beiying1.duration', key_resp_beiying1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_beiying1.maxDurationReached:
        routineTimer.addTime(-trial_beiying1.maxDuration)
    elif trial_beiying1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_danche1" ---
    # create an object to store info about Routine trial_danche1
    trial_danche1 = data.Routine(
        name='trial_danche1',
        components=[text_danche1, sound_danche1, text_113, text_114, key_resp_danche1],
    )
    trial_danche1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_danche1.setSound('audio/danche1.wav', secs=3.0, hamming=True)
    sound_danche1.setVolume(1.0, log=False)
    sound_danche1.seek(0)
    # create starting attributes for key_resp_danche1
    key_resp_danche1.keys = []
    key_resp_danche1.rt = []
    _key_resp_danche1_allKeys = []
    # store start times for trial_danche1
    trial_danche1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_danche1.tStart = globalClock.getTime(format='float')
    trial_danche1.status = STARTED
    thisExp.addData('trial_danche1.started', trial_danche1.tStart)
    trial_danche1.maxDuration = None
    # keep track of which components have finished
    trial_danche1Components = trial_danche1.components
    for thisComponent in trial_danche1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_danche1" ---
    trial_danche1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_danche1* updates
        
        # if text_danche1 is starting this frame...
        if text_danche1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_danche1.frameNStart = frameN  # exact frame index
            text_danche1.tStart = t  # local t and not account for scr refresh
            text_danche1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_danche1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_danche1.started')
            # update status
            text_danche1.status = STARTED
            text_danche1.setAutoDraw(True)
        
        # if text_danche1 is active this frame...
        if text_danche1.status == STARTED:
            # update params
            pass
        
        # if text_danche1 is stopping this frame...
        if text_danche1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_danche1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_danche1.tStop = t  # not accounting for scr refresh
                text_danche1.tStopRefresh = tThisFlipGlobal  # on global time
                text_danche1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_danche1.stopped')
                # update status
                text_danche1.status = FINISHED
                text_danche1.setAutoDraw(False)
        
        # *sound_danche1* updates
        
        # if sound_danche1 is starting this frame...
        if sound_danche1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_danche1.frameNStart = frameN  # exact frame index
            sound_danche1.tStart = t  # local t and not account for scr refresh
            sound_danche1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_danche1.started', tThisFlipGlobal)
            # update status
            sound_danche1.status = STARTED
            sound_danche1.play(when=win)  # sync with win flip
        
        # if sound_danche1 is stopping this frame...
        if sound_danche1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_danche1.tStartRefresh + 3.0-frameTolerance or sound_danche1.isFinished:
                # keep track of stop time/frame for later
                sound_danche1.tStop = t  # not accounting for scr refresh
                sound_danche1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_danche1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_danche1.stopped')
                # update status
                sound_danche1.status = FINISHED
                sound_danche1.stop()
        
        # *text_113* updates
        
        # if text_113 is starting this frame...
        if text_113.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_113.frameNStart = frameN  # exact frame index
            text_113.tStart = t  # local t and not account for scr refresh
            text_113.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_113, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_113.started')
            # update status
            text_113.status = STARTED
            text_113.setAutoDraw(True)
        
        # if text_113 is active this frame...
        if text_113.status == STARTED:
            # update params
            pass
        
        # if text_113 is stopping this frame...
        if text_113.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_113.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_113.tStop = t  # not accounting for scr refresh
                text_113.tStopRefresh = tThisFlipGlobal  # on global time
                text_113.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_113.stopped')
                # update status
                text_113.status = FINISHED
                text_113.setAutoDraw(False)
        
        # *text_114* updates
        
        # if text_114 is starting this frame...
        if text_114.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_114.frameNStart = frameN  # exact frame index
            text_114.tStart = t  # local t and not account for scr refresh
            text_114.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_114, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_114.started')
            # update status
            text_114.status = STARTED
            text_114.setAutoDraw(True)
        
        # if text_114 is active this frame...
        if text_114.status == STARTED:
            # update params
            pass
        
        # if text_114 is stopping this frame...
        if text_114.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_114.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_114.tStop = t  # not accounting for scr refresh
                text_114.tStopRefresh = tThisFlipGlobal  # on global time
                text_114.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_114.stopped')
                # update status
                text_114.status = FINISHED
                text_114.setAutoDraw(False)
        
        # *key_resp_danche1* updates
        waitOnFlip = False
        
        # if key_resp_danche1 is starting this frame...
        if key_resp_danche1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_danche1.frameNStart = frameN  # exact frame index
            key_resp_danche1.tStart = t  # local t and not account for scr refresh
            key_resp_danche1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_danche1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_danche1.started')
            # update status
            key_resp_danche1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_danche1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_danche1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_danche1 is stopping this frame...
        if key_resp_danche1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_danche1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_danche1.tStop = t  # not accounting for scr refresh
                key_resp_danche1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_danche1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_danche1.stopped')
                # update status
                key_resp_danche1.status = FINISHED
                key_resp_danche1.status = FINISHED
        if key_resp_danche1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_danche1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_danche1_allKeys.extend(theseKeys)
            if len(_key_resp_danche1_allKeys):
                key_resp_danche1.keys = _key_resp_danche1_allKeys[0].name  # just the first key pressed
                key_resp_danche1.rt = _key_resp_danche1_allKeys[0].rt
                key_resp_danche1.duration = _key_resp_danche1_allKeys[0].duration
                # was this correct?
                if (key_resp_danche1.keys == str("'right'")) or (key_resp_danche1.keys == "'right'"):
                    key_resp_danche1.corr = 1
                else:
                    key_resp_danche1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_danche1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_danche1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_danche1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_danche1" ---
    for thisComponent in trial_danche1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_danche1
    trial_danche1.tStop = globalClock.getTime(format='float')
    trial_danche1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_danche1.stopped', trial_danche1.tStop)
    sound_danche1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_danche1.keys in ['', [], None]:  # No response was made
        key_resp_danche1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_danche1.corr = 1;  # correct non-response
        else:
           key_resp_danche1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_danche1.keys',key_resp_danche1.keys)
    thisExp.addData('key_resp_danche1.corr', key_resp_danche1.corr)
    if key_resp_danche1.keys != None:  # we had a response
        thisExp.addData('key_resp_danche1.rt', key_resp_danche1.rt)
        thisExp.addData('key_resp_danche1.duration', key_resp_danche1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_danche1.maxDurationReached:
        routineTimer.addTime(-trial_danche1.maxDuration)
    elif trial_danche1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_dianying" ---
    # create an object to store info about Routine trial_dianying
    trial_dianying = data.Routine(
        name='trial_dianying',
        components=[text_dianying, sound_dianying, text_115, text_116, key_resp_dianying],
    )
    trial_dianying.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_dianying.setSound('audio/dianying.wav', secs=3.0, hamming=True)
    sound_dianying.setVolume(1.0, log=False)
    sound_dianying.seek(0)
    # create starting attributes for key_resp_dianying
    key_resp_dianying.keys = []
    key_resp_dianying.rt = []
    _key_resp_dianying_allKeys = []
    # store start times for trial_dianying
    trial_dianying.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_dianying.tStart = globalClock.getTime(format='float')
    trial_dianying.status = STARTED
    thisExp.addData('trial_dianying.started', trial_dianying.tStart)
    trial_dianying.maxDuration = None
    # keep track of which components have finished
    trial_dianyingComponents = trial_dianying.components
    for thisComponent in trial_dianying.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_dianying" ---
    trial_dianying.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_dianying* updates
        
        # if text_dianying is starting this frame...
        if text_dianying.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_dianying.frameNStart = frameN  # exact frame index
            text_dianying.tStart = t  # local t and not account for scr refresh
            text_dianying.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_dianying, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_dianying.started')
            # update status
            text_dianying.status = STARTED
            text_dianying.setAutoDraw(True)
        
        # if text_dianying is active this frame...
        if text_dianying.status == STARTED:
            # update params
            pass
        
        # if text_dianying is stopping this frame...
        if text_dianying.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_dianying.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_dianying.tStop = t  # not accounting for scr refresh
                text_dianying.tStopRefresh = tThisFlipGlobal  # on global time
                text_dianying.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_dianying.stopped')
                # update status
                text_dianying.status = FINISHED
                text_dianying.setAutoDraw(False)
        
        # *sound_dianying* updates
        
        # if sound_dianying is starting this frame...
        if sound_dianying.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_dianying.frameNStart = frameN  # exact frame index
            sound_dianying.tStart = t  # local t and not account for scr refresh
            sound_dianying.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_dianying.started', tThisFlipGlobal)
            # update status
            sound_dianying.status = STARTED
            sound_dianying.play(when=win)  # sync with win flip
        
        # if sound_dianying is stopping this frame...
        if sound_dianying.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_dianying.tStartRefresh + 3.0-frameTolerance or sound_dianying.isFinished:
                # keep track of stop time/frame for later
                sound_dianying.tStop = t  # not accounting for scr refresh
                sound_dianying.tStopRefresh = tThisFlipGlobal  # on global time
                sound_dianying.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_dianying.stopped')
                # update status
                sound_dianying.status = FINISHED
                sound_dianying.stop()
        
        # *text_115* updates
        
        # if text_115 is starting this frame...
        if text_115.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_115.frameNStart = frameN  # exact frame index
            text_115.tStart = t  # local t and not account for scr refresh
            text_115.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_115, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_115.started')
            # update status
            text_115.status = STARTED
            text_115.setAutoDraw(True)
        
        # if text_115 is active this frame...
        if text_115.status == STARTED:
            # update params
            pass
        
        # if text_115 is stopping this frame...
        if text_115.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_115.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_115.tStop = t  # not accounting for scr refresh
                text_115.tStopRefresh = tThisFlipGlobal  # on global time
                text_115.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_115.stopped')
                # update status
                text_115.status = FINISHED
                text_115.setAutoDraw(False)
        
        # *text_116* updates
        
        # if text_116 is starting this frame...
        if text_116.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_116.frameNStart = frameN  # exact frame index
            text_116.tStart = t  # local t and not account for scr refresh
            text_116.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_116, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_116.started')
            # update status
            text_116.status = STARTED
            text_116.setAutoDraw(True)
        
        # if text_116 is active this frame...
        if text_116.status == STARTED:
            # update params
            pass
        
        # if text_116 is stopping this frame...
        if text_116.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_116.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_116.tStop = t  # not accounting for scr refresh
                text_116.tStopRefresh = tThisFlipGlobal  # on global time
                text_116.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_116.stopped')
                # update status
                text_116.status = FINISHED
                text_116.setAutoDraw(False)
        
        # *key_resp_dianying* updates
        waitOnFlip = False
        
        # if key_resp_dianying is starting this frame...
        if key_resp_dianying.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_dianying.frameNStart = frameN  # exact frame index
            key_resp_dianying.tStart = t  # local t and not account for scr refresh
            key_resp_dianying.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_dianying, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_dianying.started')
            # update status
            key_resp_dianying.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_dianying.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_dianying.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_dianying is stopping this frame...
        if key_resp_dianying.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_dianying.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_dianying.tStop = t  # not accounting for scr refresh
                key_resp_dianying.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_dianying.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_dianying.stopped')
                # update status
                key_resp_dianying.status = FINISHED
                key_resp_dianying.status = FINISHED
        if key_resp_dianying.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_dianying.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_dianying_allKeys.extend(theseKeys)
            if len(_key_resp_dianying_allKeys):
                key_resp_dianying.keys = _key_resp_dianying_allKeys[0].name  # just the first key pressed
                key_resp_dianying.rt = _key_resp_dianying_allKeys[0].rt
                key_resp_dianying.duration = _key_resp_dianying_allKeys[0].duration
                # was this correct?
                if (key_resp_dianying.keys == str("'left'")) or (key_resp_dianying.keys == "'left'"):
                    key_resp_dianying.corr = 1
                else:
                    key_resp_dianying.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_dianying]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_dianying.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_dianying.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_dianying" ---
    for thisComponent in trial_dianying.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_dianying
    trial_dianying.tStop = globalClock.getTime(format='float')
    trial_dianying.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_dianying.stopped', trial_dianying.tStop)
    sound_dianying.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_dianying.keys in ['', [], None]:  # No response was made
        key_resp_dianying.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_dianying.corr = 1;  # correct non-response
        else:
           key_resp_dianying.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_dianying.keys',key_resp_dianying.keys)
    thisExp.addData('key_resp_dianying.corr', key_resp_dianying.corr)
    if key_resp_dianying.keys != None:  # we had a response
        thisExp.addData('key_resp_dianying.rt', key_resp_dianying.rt)
        thisExp.addData('key_resp_dianying.duration', key_resp_dianying.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_dianying.maxDurationReached:
        routineTimer.addTime(-trial_dianying.maxDuration)
    elif trial_dianying.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shitou" ---
    # create an object to store info about Routine trial_shitou
    trial_shitou = data.Routine(
        name='trial_shitou',
        components=[text_shitou, sound_shitou, text_117, text_118, key_resp_shitou],
    )
    trial_shitou.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shitou.setSound('audio/shitou.wav', secs=3.0, hamming=True)
    sound_shitou.setVolume(1.0, log=False)
    sound_shitou.seek(0)
    # create starting attributes for key_resp_shitou
    key_resp_shitou.keys = []
    key_resp_shitou.rt = []
    _key_resp_shitou_allKeys = []
    # store start times for trial_shitou
    trial_shitou.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shitou.tStart = globalClock.getTime(format='float')
    trial_shitou.status = STARTED
    thisExp.addData('trial_shitou.started', trial_shitou.tStart)
    trial_shitou.maxDuration = None
    # keep track of which components have finished
    trial_shitouComponents = trial_shitou.components
    for thisComponent in trial_shitou.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shitou" ---
    trial_shitou.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_shitou* updates
        
        # if text_shitou is starting this frame...
        if text_shitou.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_shitou.frameNStart = frameN  # exact frame index
            text_shitou.tStart = t  # local t and not account for scr refresh
            text_shitou.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_shitou, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_shitou.started')
            # update status
            text_shitou.status = STARTED
            text_shitou.setAutoDraw(True)
        
        # if text_shitou is active this frame...
        if text_shitou.status == STARTED:
            # update params
            pass
        
        # if text_shitou is stopping this frame...
        if text_shitou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_shitou.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_shitou.tStop = t  # not accounting for scr refresh
                text_shitou.tStopRefresh = tThisFlipGlobal  # on global time
                text_shitou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_shitou.stopped')
                # update status
                text_shitou.status = FINISHED
                text_shitou.setAutoDraw(False)
        
        # *sound_shitou* updates
        
        # if sound_shitou is starting this frame...
        if sound_shitou.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_shitou.frameNStart = frameN  # exact frame index
            sound_shitou.tStart = t  # local t and not account for scr refresh
            sound_shitou.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shitou.started', tThisFlipGlobal)
            # update status
            sound_shitou.status = STARTED
            sound_shitou.play(when=win)  # sync with win flip
        
        # if sound_shitou is stopping this frame...
        if sound_shitou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shitou.tStartRefresh + 3.0-frameTolerance or sound_shitou.isFinished:
                # keep track of stop time/frame for later
                sound_shitou.tStop = t  # not accounting for scr refresh
                sound_shitou.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shitou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shitou.stopped')
                # update status
                sound_shitou.status = FINISHED
                sound_shitou.stop()
        
        # *text_117* updates
        
        # if text_117 is starting this frame...
        if text_117.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_117.frameNStart = frameN  # exact frame index
            text_117.tStart = t  # local t and not account for scr refresh
            text_117.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_117, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_117.started')
            # update status
            text_117.status = STARTED
            text_117.setAutoDraw(True)
        
        # if text_117 is active this frame...
        if text_117.status == STARTED:
            # update params
            pass
        
        # if text_117 is stopping this frame...
        if text_117.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_117.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_117.tStop = t  # not accounting for scr refresh
                text_117.tStopRefresh = tThisFlipGlobal  # on global time
                text_117.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_117.stopped')
                # update status
                text_117.status = FINISHED
                text_117.setAutoDraw(False)
        
        # *text_118* updates
        
        # if text_118 is starting this frame...
        if text_118.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_118.frameNStart = frameN  # exact frame index
            text_118.tStart = t  # local t and not account for scr refresh
            text_118.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_118, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_118.started')
            # update status
            text_118.status = STARTED
            text_118.setAutoDraw(True)
        
        # if text_118 is active this frame...
        if text_118.status == STARTED:
            # update params
            pass
        
        # if text_118 is stopping this frame...
        if text_118.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_118.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_118.tStop = t  # not accounting for scr refresh
                text_118.tStopRefresh = tThisFlipGlobal  # on global time
                text_118.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_118.stopped')
                # update status
                text_118.status = FINISHED
                text_118.setAutoDraw(False)
        
        # *key_resp_shitou* updates
        waitOnFlip = False
        
        # if key_resp_shitou is starting this frame...
        if key_resp_shitou.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shitou.frameNStart = frameN  # exact frame index
            key_resp_shitou.tStart = t  # local t and not account for scr refresh
            key_resp_shitou.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shitou, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shitou.started')
            # update status
            key_resp_shitou.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shitou.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shitou.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shitou is stopping this frame...
        if key_resp_shitou.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shitou.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shitou.tStop = t  # not accounting for scr refresh
                key_resp_shitou.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shitou.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shitou.stopped')
                # update status
                key_resp_shitou.status = FINISHED
                key_resp_shitou.status = FINISHED
        if key_resp_shitou.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shitou.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shitou_allKeys.extend(theseKeys)
            if len(_key_resp_shitou_allKeys):
                key_resp_shitou.keys = _key_resp_shitou_allKeys[0].name  # just the first key pressed
                key_resp_shitou.rt = _key_resp_shitou_allKeys[0].rt
                key_resp_shitou.duration = _key_resp_shitou_allKeys[0].duration
                # was this correct?
                if (key_resp_shitou.keys == str("'left'")) or (key_resp_shitou.keys == "'left'"):
                    key_resp_shitou.corr = 1
                else:
                    key_resp_shitou.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shitou]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shitou.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shitou.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shitou" ---
    for thisComponent in trial_shitou.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shitou
    trial_shitou.tStop = globalClock.getTime(format='float')
    trial_shitou.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shitou.stopped', trial_shitou.tStop)
    sound_shitou.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shitou.keys in ['', [], None]:  # No response was made
        key_resp_shitou.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_shitou.corr = 1;  # correct non-response
        else:
           key_resp_shitou.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shitou.keys',key_resp_shitou.keys)
    thisExp.addData('key_resp_shitou.corr', key_resp_shitou.corr)
    if key_resp_shitou.keys != None:  # we had a response
        thisExp.addData('key_resp_shitou.rt', key_resp_shitou.rt)
        thisExp.addData('key_resp_shitou.duration', key_resp_shitou.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shitou.maxDurationReached:
        routineTimer.addTime(-trial_shitou.maxDuration)
    elif trial_shitou.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_xiongdi0" ---
    # create an object to store info about Routine trial_xiongdi0
    trial_xiongdi0 = data.Routine(
        name='trial_xiongdi0',
        components=[text_xiongdi0, sound_xiongdi0, text_119, text_120, key_resp_xiongdi0],
    )
    trial_xiongdi0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_xiongdi0.setSound('audio/xiongdi0.wav', secs=3.0, hamming=True)
    sound_xiongdi0.setVolume(1.0, log=False)
    sound_xiongdi0.seek(0)
    # create starting attributes for key_resp_xiongdi0
    key_resp_xiongdi0.keys = []
    key_resp_xiongdi0.rt = []
    _key_resp_xiongdi0_allKeys = []
    # store start times for trial_xiongdi0
    trial_xiongdi0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_xiongdi0.tStart = globalClock.getTime(format='float')
    trial_xiongdi0.status = STARTED
    thisExp.addData('trial_xiongdi0.started', trial_xiongdi0.tStart)
    trial_xiongdi0.maxDuration = None
    # keep track of which components have finished
    trial_xiongdi0Components = trial_xiongdi0.components
    for thisComponent in trial_xiongdi0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_xiongdi0" ---
    trial_xiongdi0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_xiongdi0* updates
        
        # if text_xiongdi0 is starting this frame...
        if text_xiongdi0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_xiongdi0.frameNStart = frameN  # exact frame index
            text_xiongdi0.tStart = t  # local t and not account for scr refresh
            text_xiongdi0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_xiongdi0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_xiongdi0.started')
            # update status
            text_xiongdi0.status = STARTED
            text_xiongdi0.setAutoDraw(True)
        
        # if text_xiongdi0 is active this frame...
        if text_xiongdi0.status == STARTED:
            # update params
            pass
        
        # if text_xiongdi0 is stopping this frame...
        if text_xiongdi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_xiongdi0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_xiongdi0.tStop = t  # not accounting for scr refresh
                text_xiongdi0.tStopRefresh = tThisFlipGlobal  # on global time
                text_xiongdi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_xiongdi0.stopped')
                # update status
                text_xiongdi0.status = FINISHED
                text_xiongdi0.setAutoDraw(False)
        
        # *sound_xiongdi0* updates
        
        # if sound_xiongdi0 is starting this frame...
        if sound_xiongdi0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_xiongdi0.frameNStart = frameN  # exact frame index
            sound_xiongdi0.tStart = t  # local t and not account for scr refresh
            sound_xiongdi0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_xiongdi0.started', tThisFlipGlobal)
            # update status
            sound_xiongdi0.status = STARTED
            sound_xiongdi0.play(when=win)  # sync with win flip
        
        # if sound_xiongdi0 is stopping this frame...
        if sound_xiongdi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_xiongdi0.tStartRefresh + 3.0-frameTolerance or sound_xiongdi0.isFinished:
                # keep track of stop time/frame for later
                sound_xiongdi0.tStop = t  # not accounting for scr refresh
                sound_xiongdi0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_xiongdi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_xiongdi0.stopped')
                # update status
                sound_xiongdi0.status = FINISHED
                sound_xiongdi0.stop()
        
        # *text_119* updates
        
        # if text_119 is starting this frame...
        if text_119.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_119.frameNStart = frameN  # exact frame index
            text_119.tStart = t  # local t and not account for scr refresh
            text_119.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_119, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_119.started')
            # update status
            text_119.status = STARTED
            text_119.setAutoDraw(True)
        
        # if text_119 is active this frame...
        if text_119.status == STARTED:
            # update params
            pass
        
        # if text_119 is stopping this frame...
        if text_119.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_119.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_119.tStop = t  # not accounting for scr refresh
                text_119.tStopRefresh = tThisFlipGlobal  # on global time
                text_119.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_119.stopped')
                # update status
                text_119.status = FINISHED
                text_119.setAutoDraw(False)
        
        # *text_120* updates
        
        # if text_120 is starting this frame...
        if text_120.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_120.frameNStart = frameN  # exact frame index
            text_120.tStart = t  # local t and not account for scr refresh
            text_120.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_120, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_120.started')
            # update status
            text_120.status = STARTED
            text_120.setAutoDraw(True)
        
        # if text_120 is active this frame...
        if text_120.status == STARTED:
            # update params
            pass
        
        # if text_120 is stopping this frame...
        if text_120.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_120.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_120.tStop = t  # not accounting for scr refresh
                text_120.tStopRefresh = tThisFlipGlobal  # on global time
                text_120.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_120.stopped')
                # update status
                text_120.status = FINISHED
                text_120.setAutoDraw(False)
        
        # *key_resp_xiongdi0* updates
        waitOnFlip = False
        
        # if key_resp_xiongdi0 is starting this frame...
        if key_resp_xiongdi0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_xiongdi0.frameNStart = frameN  # exact frame index
            key_resp_xiongdi0.tStart = t  # local t and not account for scr refresh
            key_resp_xiongdi0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_xiongdi0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_xiongdi0.started')
            # update status
            key_resp_xiongdi0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_xiongdi0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_xiongdi0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_xiongdi0 is stopping this frame...
        if key_resp_xiongdi0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_xiongdi0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_xiongdi0.tStop = t  # not accounting for scr refresh
                key_resp_xiongdi0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_xiongdi0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_xiongdi0.stopped')
                # update status
                key_resp_xiongdi0.status = FINISHED
                key_resp_xiongdi0.status = FINISHED
        if key_resp_xiongdi0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_xiongdi0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_xiongdi0_allKeys.extend(theseKeys)
            if len(_key_resp_xiongdi0_allKeys):
                key_resp_xiongdi0.keys = _key_resp_xiongdi0_allKeys[0].name  # just the first key pressed
                key_resp_xiongdi0.rt = _key_resp_xiongdi0_allKeys[0].rt
                key_resp_xiongdi0.duration = _key_resp_xiongdi0_allKeys[0].duration
                # was this correct?
                if (key_resp_xiongdi0.keys == str("'left'")) or (key_resp_xiongdi0.keys == "'left'"):
                    key_resp_xiongdi0.corr = 1
                else:
                    key_resp_xiongdi0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_xiongdi0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_xiongdi0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_xiongdi0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_xiongdi0" ---
    for thisComponent in trial_xiongdi0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_xiongdi0
    trial_xiongdi0.tStop = globalClock.getTime(format='float')
    trial_xiongdi0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_xiongdi0.stopped', trial_xiongdi0.tStop)
    sound_xiongdi0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_xiongdi0.keys in ['', [], None]:  # No response was made
        key_resp_xiongdi0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_xiongdi0.corr = 1;  # correct non-response
        else:
           key_resp_xiongdi0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_xiongdi0.keys',key_resp_xiongdi0.keys)
    thisExp.addData('key_resp_xiongdi0.corr', key_resp_xiongdi0.corr)
    if key_resp_xiongdi0.keys != None:  # we had a response
        thisExp.addData('key_resp_xiongdi0.rt', key_resp_xiongdi0.rt)
        thisExp.addData('key_resp_xiongdi0.duration', key_resp_xiongdi0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_xiongdi0.maxDurationReached:
        routineTimer.addTime(-trial_xiongdi0.maxDuration)
    elif trial_xiongdi0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_senlin" ---
    # create an object to store info about Routine trial_senlin
    trial_senlin = data.Routine(
        name='trial_senlin',
        components=[text_senlin, sound_senlin, text_123, text_124, key_resp_senlin],
    )
    trial_senlin.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_senlin.setSound('audio/senlin.wav', secs=3.0, hamming=True)
    sound_senlin.setVolume(1.0, log=False)
    sound_senlin.seek(0)
    # create starting attributes for key_resp_senlin
    key_resp_senlin.keys = []
    key_resp_senlin.rt = []
    _key_resp_senlin_allKeys = []
    # store start times for trial_senlin
    trial_senlin.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_senlin.tStart = globalClock.getTime(format='float')
    trial_senlin.status = STARTED
    thisExp.addData('trial_senlin.started', trial_senlin.tStart)
    trial_senlin.maxDuration = None
    # keep track of which components have finished
    trial_senlinComponents = trial_senlin.components
    for thisComponent in trial_senlin.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_senlin" ---
    trial_senlin.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_senlin* updates
        
        # if text_senlin is starting this frame...
        if text_senlin.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_senlin.frameNStart = frameN  # exact frame index
            text_senlin.tStart = t  # local t and not account for scr refresh
            text_senlin.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_senlin, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_senlin.started')
            # update status
            text_senlin.status = STARTED
            text_senlin.setAutoDraw(True)
        
        # if text_senlin is active this frame...
        if text_senlin.status == STARTED:
            # update params
            pass
        
        # if text_senlin is stopping this frame...
        if text_senlin.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_senlin.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_senlin.tStop = t  # not accounting for scr refresh
                text_senlin.tStopRefresh = tThisFlipGlobal  # on global time
                text_senlin.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_senlin.stopped')
                # update status
                text_senlin.status = FINISHED
                text_senlin.setAutoDraw(False)
        
        # *sound_senlin* updates
        
        # if sound_senlin is starting this frame...
        if sound_senlin.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_senlin.frameNStart = frameN  # exact frame index
            sound_senlin.tStart = t  # local t and not account for scr refresh
            sound_senlin.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_senlin.started', tThisFlipGlobal)
            # update status
            sound_senlin.status = STARTED
            sound_senlin.play(when=win)  # sync with win flip
        
        # if sound_senlin is stopping this frame...
        if sound_senlin.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_senlin.tStartRefresh + 3.0-frameTolerance or sound_senlin.isFinished:
                # keep track of stop time/frame for later
                sound_senlin.tStop = t  # not accounting for scr refresh
                sound_senlin.tStopRefresh = tThisFlipGlobal  # on global time
                sound_senlin.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_senlin.stopped')
                # update status
                sound_senlin.status = FINISHED
                sound_senlin.stop()
        
        # *text_123* updates
        
        # if text_123 is starting this frame...
        if text_123.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_123.frameNStart = frameN  # exact frame index
            text_123.tStart = t  # local t and not account for scr refresh
            text_123.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_123, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_123.started')
            # update status
            text_123.status = STARTED
            text_123.setAutoDraw(True)
        
        # if text_123 is active this frame...
        if text_123.status == STARTED:
            # update params
            pass
        
        # if text_123 is stopping this frame...
        if text_123.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_123.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_123.tStop = t  # not accounting for scr refresh
                text_123.tStopRefresh = tThisFlipGlobal  # on global time
                text_123.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_123.stopped')
                # update status
                text_123.status = FINISHED
                text_123.setAutoDraw(False)
        
        # *text_124* updates
        
        # if text_124 is starting this frame...
        if text_124.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_124.frameNStart = frameN  # exact frame index
            text_124.tStart = t  # local t and not account for scr refresh
            text_124.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_124, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_124.started')
            # update status
            text_124.status = STARTED
            text_124.setAutoDraw(True)
        
        # if text_124 is active this frame...
        if text_124.status == STARTED:
            # update params
            pass
        
        # if text_124 is stopping this frame...
        if text_124.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_124.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_124.tStop = t  # not accounting for scr refresh
                text_124.tStopRefresh = tThisFlipGlobal  # on global time
                text_124.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_124.stopped')
                # update status
                text_124.status = FINISHED
                text_124.setAutoDraw(False)
        
        # *key_resp_senlin* updates
        waitOnFlip = False
        
        # if key_resp_senlin is starting this frame...
        if key_resp_senlin.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_senlin.frameNStart = frameN  # exact frame index
            key_resp_senlin.tStart = t  # local t and not account for scr refresh
            key_resp_senlin.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_senlin, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_senlin.started')
            # update status
            key_resp_senlin.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_senlin.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_senlin.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_senlin is stopping this frame...
        if key_resp_senlin.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_senlin.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_senlin.tStop = t  # not accounting for scr refresh
                key_resp_senlin.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_senlin.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_senlin.stopped')
                # update status
                key_resp_senlin.status = FINISHED
                key_resp_senlin.status = FINISHED
        if key_resp_senlin.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_senlin.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_senlin_allKeys.extend(theseKeys)
            if len(_key_resp_senlin_allKeys):
                key_resp_senlin.keys = _key_resp_senlin_allKeys[0].name  # just the first key pressed
                key_resp_senlin.rt = _key_resp_senlin_allKeys[0].rt
                key_resp_senlin.duration = _key_resp_senlin_allKeys[0].duration
                # was this correct?
                if (key_resp_senlin.keys == str("'left'")) or (key_resp_senlin.keys == "'left'"):
                    key_resp_senlin.corr = 1
                else:
                    key_resp_senlin.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_senlin]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_senlin.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_senlin.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_senlin" ---
    for thisComponent in trial_senlin.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_senlin
    trial_senlin.tStop = globalClock.getTime(format='float')
    trial_senlin.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_senlin.stopped', trial_senlin.tStop)
    sound_senlin.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_senlin.keys in ['', [], None]:  # No response was made
        key_resp_senlin.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_senlin.corr = 1;  # correct non-response
        else:
           key_resp_senlin.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_senlin.keys',key_resp_senlin.keys)
    thisExp.addData('key_resp_senlin.corr', key_resp_senlin.corr)
    if key_resp_senlin.keys != None:  # we had a response
        thisExp.addData('key_resp_senlin.rt', key_resp_senlin.rt)
        thisExp.addData('key_resp_senlin.duration', key_resp_senlin.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_senlin.maxDurationReached:
        routineTimer.addTime(-trial_senlin.maxDuration)
    elif trial_senlin.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_hongqi0" ---
    # create an object to store info about Routine trial_hongqi0
    trial_hongqi0 = data.Routine(
        name='trial_hongqi0',
        components=[text_hongqi_0, sound_hongqi_0, text_153, text_154, key_resp_hongqi_0],
    )
    trial_hongqi0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_hongqi_0.setSound('audio/hongqi0.wav', secs=3, hamming=True)
    sound_hongqi_0.setVolume(1.0, log=False)
    sound_hongqi_0.seek(0)
    # create starting attributes for key_resp_hongqi_0
    key_resp_hongqi_0.keys = []
    key_resp_hongqi_0.rt = []
    _key_resp_hongqi_0_allKeys = []
    # store start times for trial_hongqi0
    trial_hongqi0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_hongqi0.tStart = globalClock.getTime(format='float')
    trial_hongqi0.status = STARTED
    thisExp.addData('trial_hongqi0.started', trial_hongqi0.tStart)
    trial_hongqi0.maxDuration = None
    # keep track of which components have finished
    trial_hongqi0Components = trial_hongqi0.components
    for thisComponent in trial_hongqi0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_hongqi0" ---
    trial_hongqi0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_hongqi_0* updates
        
        # if text_hongqi_0 is starting this frame...
        if text_hongqi_0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_hongqi_0.frameNStart = frameN  # exact frame index
            text_hongqi_0.tStart = t  # local t and not account for scr refresh
            text_hongqi_0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_hongqi_0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_hongqi_0.started')
            # update status
            text_hongqi_0.status = STARTED
            text_hongqi_0.setAutoDraw(True)
        
        # if text_hongqi_0 is active this frame...
        if text_hongqi_0.status == STARTED:
            # update params
            pass
        
        # if text_hongqi_0 is stopping this frame...
        if text_hongqi_0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_hongqi_0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_hongqi_0.tStop = t  # not accounting for scr refresh
                text_hongqi_0.tStopRefresh = tThisFlipGlobal  # on global time
                text_hongqi_0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_hongqi_0.stopped')
                # update status
                text_hongqi_0.status = FINISHED
                text_hongqi_0.setAutoDraw(False)
        
        # *sound_hongqi_0* updates
        
        # if sound_hongqi_0 is starting this frame...
        if sound_hongqi_0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_hongqi_0.frameNStart = frameN  # exact frame index
            sound_hongqi_0.tStart = t  # local t and not account for scr refresh
            sound_hongqi_0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_hongqi_0.started', tThisFlipGlobal)
            # update status
            sound_hongqi_0.status = STARTED
            sound_hongqi_0.play(when=win)  # sync with win flip
        
        # if sound_hongqi_0 is stopping this frame...
        if sound_hongqi_0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_hongqi_0.tStartRefresh + 3-frameTolerance or sound_hongqi_0.isFinished:
                # keep track of stop time/frame for later
                sound_hongqi_0.tStop = t  # not accounting for scr refresh
                sound_hongqi_0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_hongqi_0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_hongqi_0.stopped')
                # update status
                sound_hongqi_0.status = FINISHED
                sound_hongqi_0.stop()
        
        # *text_153* updates
        
        # if text_153 is starting this frame...
        if text_153.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_153.frameNStart = frameN  # exact frame index
            text_153.tStart = t  # local t and not account for scr refresh
            text_153.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_153, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_153.started')
            # update status
            text_153.status = STARTED
            text_153.setAutoDraw(True)
        
        # if text_153 is active this frame...
        if text_153.status == STARTED:
            # update params
            pass
        
        # if text_153 is stopping this frame...
        if text_153.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_153.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_153.tStop = t  # not accounting for scr refresh
                text_153.tStopRefresh = tThisFlipGlobal  # on global time
                text_153.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_153.stopped')
                # update status
                text_153.status = FINISHED
                text_153.setAutoDraw(False)
        
        # *text_154* updates
        
        # if text_154 is starting this frame...
        if text_154.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_154.frameNStart = frameN  # exact frame index
            text_154.tStart = t  # local t and not account for scr refresh
            text_154.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_154, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_154.started')
            # update status
            text_154.status = STARTED
            text_154.setAutoDraw(True)
        
        # if text_154 is active this frame...
        if text_154.status == STARTED:
            # update params
            pass
        
        # if text_154 is stopping this frame...
        if text_154.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_154.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_154.tStop = t  # not accounting for scr refresh
                text_154.tStopRefresh = tThisFlipGlobal  # on global time
                text_154.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_154.stopped')
                # update status
                text_154.status = FINISHED
                text_154.setAutoDraw(False)
        
        # *key_resp_hongqi_0* updates
        waitOnFlip = False
        
        # if key_resp_hongqi_0 is starting this frame...
        if key_resp_hongqi_0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_hongqi_0.frameNStart = frameN  # exact frame index
            key_resp_hongqi_0.tStart = t  # local t and not account for scr refresh
            key_resp_hongqi_0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_hongqi_0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_hongqi_0.started')
            # update status
            key_resp_hongqi_0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_hongqi_0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_hongqi_0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_hongqi_0 is stopping this frame...
        if key_resp_hongqi_0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_hongqi_0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_hongqi_0.tStop = t  # not accounting for scr refresh
                key_resp_hongqi_0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_hongqi_0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_hongqi_0.stopped')
                # update status
                key_resp_hongqi_0.status = FINISHED
                key_resp_hongqi_0.status = FINISHED
        if key_resp_hongqi_0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_hongqi_0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_hongqi_0_allKeys.extend(theseKeys)
            if len(_key_resp_hongqi_0_allKeys):
                key_resp_hongqi_0.keys = _key_resp_hongqi_0_allKeys[0].name  # just the first key pressed
                key_resp_hongqi_0.rt = _key_resp_hongqi_0_allKeys[0].rt
                key_resp_hongqi_0.duration = _key_resp_hongqi_0_allKeys[0].duration
                # was this correct?
                if (key_resp_hongqi_0.keys == str("'left'")) or (key_resp_hongqi_0.keys == "'left'"):
                    key_resp_hongqi_0.corr = 1
                else:
                    key_resp_hongqi_0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_hongqi_0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_hongqi0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_hongqi0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_hongqi0" ---
    for thisComponent in trial_hongqi0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_hongqi0
    trial_hongqi0.tStop = globalClock.getTime(format='float')
    trial_hongqi0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_hongqi0.stopped', trial_hongqi0.tStop)
    sound_hongqi_0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_hongqi_0.keys in ['', [], None]:  # No response was made
        key_resp_hongqi_0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_hongqi_0.corr = 1;  # correct non-response
        else:
           key_resp_hongqi_0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_hongqi_0.keys',key_resp_hongqi_0.keys)
    thisExp.addData('key_resp_hongqi_0.corr', key_resp_hongqi_0.corr)
    if key_resp_hongqi_0.keys != None:  # we had a response
        thisExp.addData('key_resp_hongqi_0.rt', key_resp_hongqi_0.rt)
        thisExp.addData('key_resp_hongqi_0.duration', key_resp_hongqi_0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_hongqi0.maxDurationReached:
        routineTimer.addTime(-trial_hongqi0.maxDuration)
    elif trial_hongqi0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shenhai0" ---
    # create an object to store info about Routine trial_shenhai0
    trial_shenhai0 = data.Routine(
        name='trial_shenhai0',
        components=[text_shenhai0, sound_shenhai0, text_125, text_126, key_resp_shenhai0],
    )
    trial_shenhai0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shenhai0.setSound('audio/shenhai0.wav', secs=3.0, hamming=True)
    sound_shenhai0.setVolume(1.0, log=False)
    sound_shenhai0.seek(0)
    # create starting attributes for key_resp_shenhai0
    key_resp_shenhai0.keys = []
    key_resp_shenhai0.rt = []
    _key_resp_shenhai0_allKeys = []
    # store start times for trial_shenhai0
    trial_shenhai0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shenhai0.tStart = globalClock.getTime(format='float')
    trial_shenhai0.status = STARTED
    thisExp.addData('trial_shenhai0.started', trial_shenhai0.tStart)
    trial_shenhai0.maxDuration = None
    # keep track of which components have finished
    trial_shenhai0Components = trial_shenhai0.components
    for thisComponent in trial_shenhai0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shenhai0" ---
    trial_shenhai0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_shenhai0* updates
        
        # if text_shenhai0 is starting this frame...
        if text_shenhai0.status == NOT_STARTED and tThisFlip >= 0-frameTolerance:
            # keep track of start time/frame for later
            text_shenhai0.frameNStart = frameN  # exact frame index
            text_shenhai0.tStart = t  # local t and not account for scr refresh
            text_shenhai0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_shenhai0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_shenhai0.started')
            # update status
            text_shenhai0.status = STARTED
            text_shenhai0.setAutoDraw(True)
        
        # if text_shenhai0 is active this frame...
        if text_shenhai0.status == STARTED:
            # update params
            pass
        
        # if text_shenhai0 is stopping this frame...
        if text_shenhai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_shenhai0.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_shenhai0.tStop = t  # not accounting for scr refresh
                text_shenhai0.tStopRefresh = tThisFlipGlobal  # on global time
                text_shenhai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_shenhai0.stopped')
                # update status
                text_shenhai0.status = FINISHED
                text_shenhai0.setAutoDraw(False)
        
        # *sound_shenhai0* updates
        
        # if sound_shenhai0 is starting this frame...
        if sound_shenhai0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_shenhai0.frameNStart = frameN  # exact frame index
            sound_shenhai0.tStart = t  # local t and not account for scr refresh
            sound_shenhai0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shenhai0.started', tThisFlipGlobal)
            # update status
            sound_shenhai0.status = STARTED
            sound_shenhai0.play(when=win)  # sync with win flip
        
        # if sound_shenhai0 is stopping this frame...
        if sound_shenhai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shenhai0.tStartRefresh + 3.0-frameTolerance or sound_shenhai0.isFinished:
                # keep track of stop time/frame for later
                sound_shenhai0.tStop = t  # not accounting for scr refresh
                sound_shenhai0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shenhai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shenhai0.stopped')
                # update status
                sound_shenhai0.status = FINISHED
                sound_shenhai0.stop()
        
        # *text_125* updates
        
        # if text_125 is starting this frame...
        if text_125.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_125.frameNStart = frameN  # exact frame index
            text_125.tStart = t  # local t and not account for scr refresh
            text_125.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_125, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_125.started')
            # update status
            text_125.status = STARTED
            text_125.setAutoDraw(True)
        
        # if text_125 is active this frame...
        if text_125.status == STARTED:
            # update params
            pass
        
        # if text_125 is stopping this frame...
        if text_125.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_125.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_125.tStop = t  # not accounting for scr refresh
                text_125.tStopRefresh = tThisFlipGlobal  # on global time
                text_125.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_125.stopped')
                # update status
                text_125.status = FINISHED
                text_125.setAutoDraw(False)
        
        # *text_126* updates
        
        # if text_126 is starting this frame...
        if text_126.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_126.frameNStart = frameN  # exact frame index
            text_126.tStart = t  # local t and not account for scr refresh
            text_126.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_126, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_126.started')
            # update status
            text_126.status = STARTED
            text_126.setAutoDraw(True)
        
        # if text_126 is active this frame...
        if text_126.status == STARTED:
            # update params
            pass
        
        # if text_126 is stopping this frame...
        if text_126.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_126.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_126.tStop = t  # not accounting for scr refresh
                text_126.tStopRefresh = tThisFlipGlobal  # on global time
                text_126.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_126.stopped')
                # update status
                text_126.status = FINISHED
                text_126.setAutoDraw(False)
        
        # *key_resp_shenhai0* updates
        waitOnFlip = False
        
        # if key_resp_shenhai0 is starting this frame...
        if key_resp_shenhai0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shenhai0.frameNStart = frameN  # exact frame index
            key_resp_shenhai0.tStart = t  # local t and not account for scr refresh
            key_resp_shenhai0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shenhai0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shenhai0.started')
            # update status
            key_resp_shenhai0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shenhai0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shenhai0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shenhai0 is stopping this frame...
        if key_resp_shenhai0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shenhai0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shenhai0.tStop = t  # not accounting for scr refresh
                key_resp_shenhai0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shenhai0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shenhai0.stopped')
                # update status
                key_resp_shenhai0.status = FINISHED
                key_resp_shenhai0.status = FINISHED
        if key_resp_shenhai0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shenhai0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shenhai0_allKeys.extend(theseKeys)
            if len(_key_resp_shenhai0_allKeys):
                key_resp_shenhai0.keys = _key_resp_shenhai0_allKeys[0].name  # just the first key pressed
                key_resp_shenhai0.rt = _key_resp_shenhai0_allKeys[0].rt
                key_resp_shenhai0.duration = _key_resp_shenhai0_allKeys[0].duration
                # was this correct?
                if (key_resp_shenhai0.keys == str("'left'")) or (key_resp_shenhai0.keys == "'left'"):
                    key_resp_shenhai0.corr = 1
                else:
                    key_resp_shenhai0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shenhai0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shenhai0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shenhai0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shenhai0" ---
    for thisComponent in trial_shenhai0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shenhai0
    trial_shenhai0.tStop = globalClock.getTime(format='float')
    trial_shenhai0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shenhai0.stopped', trial_shenhai0.tStop)
    sound_shenhai0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shenhai0.keys in ['', [], None]:  # No response was made
        key_resp_shenhai0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_shenhai0.corr = 1;  # correct non-response
        else:
           key_resp_shenhai0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shenhai0.keys',key_resp_shenhai0.keys)
    thisExp.addData('key_resp_shenhai0.corr', key_resp_shenhai0.corr)
    if key_resp_shenhai0.keys != None:  # we had a response
        thisExp.addData('key_resp_shenhai0.rt', key_resp_shenhai0.rt)
        thisExp.addData('key_resp_shenhai0.duration', key_resp_shenhai0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shenhai0.maxDurationReached:
        routineTimer.addTime(-trial_shenhai0.maxDuration)
    elif trial_shenhai0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_feihe0" ---
    # create an object to store info about Routine trial_feihe0
    trial_feihe0 = data.Routine(
        name='trial_feihe0',
        components=[text_feihe0, sound_feihe0, text_127, text_128, key_resp_feihe0],
    )
    trial_feihe0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_feihe0.setSound('audio/feihe0.wav', secs=3, hamming=True)
    sound_feihe0.setVolume(1.0, log=False)
    sound_feihe0.seek(0)
    # create starting attributes for key_resp_feihe0
    key_resp_feihe0.keys = []
    key_resp_feihe0.rt = []
    _key_resp_feihe0_allKeys = []
    # store start times for trial_feihe0
    trial_feihe0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_feihe0.tStart = globalClock.getTime(format='float')
    trial_feihe0.status = STARTED
    thisExp.addData('trial_feihe0.started', trial_feihe0.tStart)
    trial_feihe0.maxDuration = None
    # keep track of which components have finished
    trial_feihe0Components = trial_feihe0.components
    for thisComponent in trial_feihe0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_feihe0" ---
    trial_feihe0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_feihe0* updates
        
        # if text_feihe0 is starting this frame...
        if text_feihe0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_feihe0.frameNStart = frameN  # exact frame index
            text_feihe0.tStart = t  # local t and not account for scr refresh
            text_feihe0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_feihe0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_feihe0.started')
            # update status
            text_feihe0.status = STARTED
            text_feihe0.setAutoDraw(True)
        
        # if text_feihe0 is active this frame...
        if text_feihe0.status == STARTED:
            # update params
            pass
        
        # if text_feihe0 is stopping this frame...
        if text_feihe0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_feihe0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_feihe0.tStop = t  # not accounting for scr refresh
                text_feihe0.tStopRefresh = tThisFlipGlobal  # on global time
                text_feihe0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_feihe0.stopped')
                # update status
                text_feihe0.status = FINISHED
                text_feihe0.setAutoDraw(False)
        
        # *sound_feihe0* updates
        
        # if sound_feihe0 is starting this frame...
        if sound_feihe0.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_feihe0.frameNStart = frameN  # exact frame index
            sound_feihe0.tStart = t  # local t and not account for scr refresh
            sound_feihe0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_feihe0.started', tThisFlipGlobal)
            # update status
            sound_feihe0.status = STARTED
            sound_feihe0.play(when=win)  # sync with win flip
        
        # if sound_feihe0 is stopping this frame...
        if sound_feihe0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_feihe0.tStartRefresh + 3-frameTolerance or sound_feihe0.isFinished:
                # keep track of stop time/frame for later
                sound_feihe0.tStop = t  # not accounting for scr refresh
                sound_feihe0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_feihe0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_feihe0.stopped')
                # update status
                sound_feihe0.status = FINISHED
                sound_feihe0.stop()
        
        # *text_127* updates
        
        # if text_127 is starting this frame...
        if text_127.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_127.frameNStart = frameN  # exact frame index
            text_127.tStart = t  # local t and not account for scr refresh
            text_127.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_127, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_127.started')
            # update status
            text_127.status = STARTED
            text_127.setAutoDraw(True)
        
        # if text_127 is active this frame...
        if text_127.status == STARTED:
            # update params
            pass
        
        # if text_127 is stopping this frame...
        if text_127.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_127.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_127.tStop = t  # not accounting for scr refresh
                text_127.tStopRefresh = tThisFlipGlobal  # on global time
                text_127.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_127.stopped')
                # update status
                text_127.status = FINISHED
                text_127.setAutoDraw(False)
        
        # *text_128* updates
        
        # if text_128 is starting this frame...
        if text_128.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_128.frameNStart = frameN  # exact frame index
            text_128.tStart = t  # local t and not account for scr refresh
            text_128.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_128, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_128.started')
            # update status
            text_128.status = STARTED
            text_128.setAutoDraw(True)
        
        # if text_128 is active this frame...
        if text_128.status == STARTED:
            # update params
            pass
        
        # if text_128 is stopping this frame...
        if text_128.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_128.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_128.tStop = t  # not accounting for scr refresh
                text_128.tStopRefresh = tThisFlipGlobal  # on global time
                text_128.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_128.stopped')
                # update status
                text_128.status = FINISHED
                text_128.setAutoDraw(False)
        
        # *key_resp_feihe0* updates
        waitOnFlip = False
        
        # if key_resp_feihe0 is starting this frame...
        if key_resp_feihe0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_feihe0.frameNStart = frameN  # exact frame index
            key_resp_feihe0.tStart = t  # local t and not account for scr refresh
            key_resp_feihe0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_feihe0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_feihe0.started')
            # update status
            key_resp_feihe0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_feihe0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_feihe0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_feihe0 is stopping this frame...
        if key_resp_feihe0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_feihe0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_feihe0.tStop = t  # not accounting for scr refresh
                key_resp_feihe0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_feihe0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_feihe0.stopped')
                # update status
                key_resp_feihe0.status = FINISHED
                key_resp_feihe0.status = FINISHED
        if key_resp_feihe0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_feihe0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_feihe0_allKeys.extend(theseKeys)
            if len(_key_resp_feihe0_allKeys):
                key_resp_feihe0.keys = _key_resp_feihe0_allKeys[0].name  # just the first key pressed
                key_resp_feihe0.rt = _key_resp_feihe0_allKeys[0].rt
                key_resp_feihe0.duration = _key_resp_feihe0_allKeys[0].duration
                # was this correct?
                if (key_resp_feihe0.keys == str("'left'")) or (key_resp_feihe0.keys == "'left'"):
                    key_resp_feihe0.corr = 1
                else:
                    key_resp_feihe0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_feihe0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_feihe0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_feihe0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_feihe0" ---
    for thisComponent in trial_feihe0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_feihe0
    trial_feihe0.tStop = globalClock.getTime(format='float')
    trial_feihe0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_feihe0.stopped', trial_feihe0.tStop)
    sound_feihe0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_feihe0.keys in ['', [], None]:  # No response was made
        key_resp_feihe0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_feihe0.corr = 1;  # correct non-response
        else:
           key_resp_feihe0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_feihe0.keys',key_resp_feihe0.keys)
    thisExp.addData('key_resp_feihe0.corr', key_resp_feihe0.corr)
    if key_resp_feihe0.keys != None:  # we had a response
        thisExp.addData('key_resp_feihe0.rt', key_resp_feihe0.rt)
        thisExp.addData('key_resp_feihe0.duration', key_resp_feihe0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_feihe0.maxDurationReached:
        routineTimer.addTime(-trial_feihe0.maxDuration)
    elif trial_feihe0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shenhai1" ---
    # create an object to store info about Routine trial_shenhai1
    trial_shenhai1 = data.Routine(
        name='trial_shenhai1',
        components=[text_shenhai1, sound_shenhai1, text_129, text_130, key_resp_shenhai1],
    )
    trial_shenhai1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shenhai1.setSound('audio/shenhai1.wav', secs=3.0, hamming=True)
    sound_shenhai1.setVolume(1.0, log=False)
    sound_shenhai1.seek(0)
    # create starting attributes for key_resp_shenhai1
    key_resp_shenhai1.keys = []
    key_resp_shenhai1.rt = []
    _key_resp_shenhai1_allKeys = []
    # store start times for trial_shenhai1
    trial_shenhai1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shenhai1.tStart = globalClock.getTime(format='float')
    trial_shenhai1.status = STARTED
    thisExp.addData('trial_shenhai1.started', trial_shenhai1.tStart)
    trial_shenhai1.maxDuration = None
    # keep track of which components have finished
    trial_shenhai1Components = trial_shenhai1.components
    for thisComponent in trial_shenhai1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shenhai1" ---
    trial_shenhai1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_shenhai1* updates
        
        # if text_shenhai1 is starting this frame...
        if text_shenhai1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_shenhai1.frameNStart = frameN  # exact frame index
            text_shenhai1.tStart = t  # local t and not account for scr refresh
            text_shenhai1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_shenhai1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_shenhai1.started')
            # update status
            text_shenhai1.status = STARTED
            text_shenhai1.setAutoDraw(True)
        
        # if text_shenhai1 is active this frame...
        if text_shenhai1.status == STARTED:
            # update params
            pass
        
        # if text_shenhai1 is stopping this frame...
        if text_shenhai1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_shenhai1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_shenhai1.tStop = t  # not accounting for scr refresh
                text_shenhai1.tStopRefresh = tThisFlipGlobal  # on global time
                text_shenhai1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_shenhai1.stopped')
                # update status
                text_shenhai1.status = FINISHED
                text_shenhai1.setAutoDraw(False)
        
        # *sound_shenhai1* updates
        
        # if sound_shenhai1 is starting this frame...
        if sound_shenhai1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_shenhai1.frameNStart = frameN  # exact frame index
            sound_shenhai1.tStart = t  # local t and not account for scr refresh
            sound_shenhai1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shenhai1.started', tThisFlipGlobal)
            # update status
            sound_shenhai1.status = STARTED
            sound_shenhai1.play(when=win)  # sync with win flip
        
        # if sound_shenhai1 is stopping this frame...
        if sound_shenhai1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shenhai1.tStartRefresh + 3.0-frameTolerance or sound_shenhai1.isFinished:
                # keep track of stop time/frame for later
                sound_shenhai1.tStop = t  # not accounting for scr refresh
                sound_shenhai1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shenhai1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shenhai1.stopped')
                # update status
                sound_shenhai1.status = FINISHED
                sound_shenhai1.stop()
        
        # *text_129* updates
        
        # if text_129 is starting this frame...
        if text_129.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_129.frameNStart = frameN  # exact frame index
            text_129.tStart = t  # local t and not account for scr refresh
            text_129.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_129, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_129.started')
            # update status
            text_129.status = STARTED
            text_129.setAutoDraw(True)
        
        # if text_129 is active this frame...
        if text_129.status == STARTED:
            # update params
            pass
        
        # if text_129 is stopping this frame...
        if text_129.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_129.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_129.tStop = t  # not accounting for scr refresh
                text_129.tStopRefresh = tThisFlipGlobal  # on global time
                text_129.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_129.stopped')
                # update status
                text_129.status = FINISHED
                text_129.setAutoDraw(False)
        
        # *text_130* updates
        
        # if text_130 is starting this frame...
        if text_130.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_130.frameNStart = frameN  # exact frame index
            text_130.tStart = t  # local t and not account for scr refresh
            text_130.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_130, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_130.started')
            # update status
            text_130.status = STARTED
            text_130.setAutoDraw(True)
        
        # if text_130 is active this frame...
        if text_130.status == STARTED:
            # update params
            pass
        
        # if text_130 is stopping this frame...
        if text_130.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_130.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_130.tStop = t  # not accounting for scr refresh
                text_130.tStopRefresh = tThisFlipGlobal  # on global time
                text_130.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_130.stopped')
                # update status
                text_130.status = FINISHED
                text_130.setAutoDraw(False)
        
        # *key_resp_shenhai1* updates
        waitOnFlip = False
        
        # if key_resp_shenhai1 is starting this frame...
        if key_resp_shenhai1.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shenhai1.frameNStart = frameN  # exact frame index
            key_resp_shenhai1.tStart = t  # local t and not account for scr refresh
            key_resp_shenhai1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shenhai1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shenhai1.started')
            # update status
            key_resp_shenhai1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shenhai1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shenhai1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shenhai1 is stopping this frame...
        if key_resp_shenhai1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shenhai1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shenhai1.tStop = t  # not accounting for scr refresh
                key_resp_shenhai1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shenhai1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shenhai1.stopped')
                # update status
                key_resp_shenhai1.status = FINISHED
                key_resp_shenhai1.status = FINISHED
        if key_resp_shenhai1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shenhai1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shenhai1_allKeys.extend(theseKeys)
            if len(_key_resp_shenhai1_allKeys):
                key_resp_shenhai1.keys = _key_resp_shenhai1_allKeys[0].name  # just the first key pressed
                key_resp_shenhai1.rt = _key_resp_shenhai1_allKeys[0].rt
                key_resp_shenhai1.duration = _key_resp_shenhai1_allKeys[0].duration
                # was this correct?
                if (key_resp_shenhai1.keys == str("'right'")) or (key_resp_shenhai1.keys == "'right'"):
                    key_resp_shenhai1.corr = 1
                else:
                    key_resp_shenhai1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shenhai1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shenhai1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shenhai1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shenhai1" ---
    for thisComponent in trial_shenhai1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shenhai1
    trial_shenhai1.tStop = globalClock.getTime(format='float')
    trial_shenhai1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shenhai1.stopped', trial_shenhai1.tStop)
    sound_shenhai1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shenhai1.keys in ['', [], None]:  # No response was made
        key_resp_shenhai1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_shenhai1.corr = 1;  # correct non-response
        else:
           key_resp_shenhai1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shenhai1.keys',key_resp_shenhai1.keys)
    thisExp.addData('key_resp_shenhai1.corr', key_resp_shenhai1.corr)
    if key_resp_shenhai1.keys != None:  # we had a response
        thisExp.addData('key_resp_shenhai1.rt', key_resp_shenhai1.rt)
        thisExp.addData('key_resp_shenhai1.duration', key_resp_shenhai1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shenhai1.maxDurationReached:
        routineTimer.addTime(-trial_shenhai1.maxDuration)
    elif trial_shenhai1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_shouji" ---
    # create an object to store info about Routine trial_shouji
    trial_shouji = data.Routine(
        name='trial_shouji',
        components=[text_shouji, sound_shouji, text_165, text_166, key_resp_shouji],
    )
    trial_shouji.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_shouji.setSound('audio/shouji.wav', secs=3, hamming=True)
    sound_shouji.setVolume(1.0, log=False)
    sound_shouji.seek(0)
    # create starting attributes for key_resp_shouji
    key_resp_shouji.keys = []
    key_resp_shouji.rt = []
    _key_resp_shouji_allKeys = []
    # store start times for trial_shouji
    trial_shouji.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_shouji.tStart = globalClock.getTime(format='float')
    trial_shouji.status = STARTED
    thisExp.addData('trial_shouji.started', trial_shouji.tStart)
    trial_shouji.maxDuration = None
    # keep track of which components have finished
    trial_shoujiComponents = trial_shouji.components
    for thisComponent in trial_shouji.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_shouji" ---
    trial_shouji.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_shouji* updates
        
        # if text_shouji is starting this frame...
        if text_shouji.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_shouji.frameNStart = frameN  # exact frame index
            text_shouji.tStart = t  # local t and not account for scr refresh
            text_shouji.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_shouji, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_shouji.started')
            # update status
            text_shouji.status = STARTED
            text_shouji.setAutoDraw(True)
        
        # if text_shouji is active this frame...
        if text_shouji.status == STARTED:
            # update params
            pass
        
        # if text_shouji is stopping this frame...
        if text_shouji.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_shouji.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_shouji.tStop = t  # not accounting for scr refresh
                text_shouji.tStopRefresh = tThisFlipGlobal  # on global time
                text_shouji.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_shouji.stopped')
                # update status
                text_shouji.status = FINISHED
                text_shouji.setAutoDraw(False)
        
        # *sound_shouji* updates
        
        # if sound_shouji is starting this frame...
        if sound_shouji.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_shouji.frameNStart = frameN  # exact frame index
            sound_shouji.tStart = t  # local t and not account for scr refresh
            sound_shouji.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_shouji.started', tThisFlipGlobal)
            # update status
            sound_shouji.status = STARTED
            sound_shouji.play(when=win)  # sync with win flip
        
        # if sound_shouji is stopping this frame...
        if sound_shouji.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_shouji.tStartRefresh + 3-frameTolerance or sound_shouji.isFinished:
                # keep track of stop time/frame for later
                sound_shouji.tStop = t  # not accounting for scr refresh
                sound_shouji.tStopRefresh = tThisFlipGlobal  # on global time
                sound_shouji.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_shouji.stopped')
                # update status
                sound_shouji.status = FINISHED
                sound_shouji.stop()
        
        # *text_165* updates
        
        # if text_165 is starting this frame...
        if text_165.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_165.frameNStart = frameN  # exact frame index
            text_165.tStart = t  # local t and not account for scr refresh
            text_165.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_165, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_165.started')
            # update status
            text_165.status = STARTED
            text_165.setAutoDraw(True)
        
        # if text_165 is active this frame...
        if text_165.status == STARTED:
            # update params
            pass
        
        # if text_165 is stopping this frame...
        if text_165.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_165.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_165.tStop = t  # not accounting for scr refresh
                text_165.tStopRefresh = tThisFlipGlobal  # on global time
                text_165.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_165.stopped')
                # update status
                text_165.status = FINISHED
                text_165.setAutoDraw(False)
        
        # *text_166* updates
        
        # if text_166 is starting this frame...
        if text_166.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_166.frameNStart = frameN  # exact frame index
            text_166.tStart = t  # local t and not account for scr refresh
            text_166.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_166, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_166.started')
            # update status
            text_166.status = STARTED
            text_166.setAutoDraw(True)
        
        # if text_166 is active this frame...
        if text_166.status == STARTED:
            # update params
            pass
        
        # if text_166 is stopping this frame...
        if text_166.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_166.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_166.tStop = t  # not accounting for scr refresh
                text_166.tStopRefresh = tThisFlipGlobal  # on global time
                text_166.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_166.stopped')
                # update status
                text_166.status = FINISHED
                text_166.setAutoDraw(False)
        
        # *key_resp_shouji* updates
        waitOnFlip = False
        
        # if key_resp_shouji is starting this frame...
        if key_resp_shouji.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_shouji.frameNStart = frameN  # exact frame index
            key_resp_shouji.tStart = t  # local t and not account for scr refresh
            key_resp_shouji.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_shouji, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_shouji.started')
            # update status
            key_resp_shouji.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_shouji.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_shouji.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_shouji is stopping this frame...
        if key_resp_shouji.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_shouji.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_shouji.tStop = t  # not accounting for scr refresh
                key_resp_shouji.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_shouji.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_shouji.stopped')
                # update status
                key_resp_shouji.status = FINISHED
                key_resp_shouji.status = FINISHED
        if key_resp_shouji.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_shouji.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_shouji_allKeys.extend(theseKeys)
            if len(_key_resp_shouji_allKeys):
                key_resp_shouji.keys = _key_resp_shouji_allKeys[0].name  # just the first key pressed
                key_resp_shouji.rt = _key_resp_shouji_allKeys[0].rt
                key_resp_shouji.duration = _key_resp_shouji_allKeys[0].duration
                # was this correct?
                if (key_resp_shouji.keys == str("'left'")) or (key_resp_shouji.keys == "'left'"):
                    key_resp_shouji.corr = 1
                else:
                    key_resp_shouji.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_shouji]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_shouji.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_shouji.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_shouji" ---
    for thisComponent in trial_shouji.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_shouji
    trial_shouji.tStop = globalClock.getTime(format='float')
    trial_shouji.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_shouji.stopped', trial_shouji.tStop)
    sound_shouji.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_shouji.keys in ['', [], None]:  # No response was made
        key_resp_shouji.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_shouji.corr = 1;  # correct non-response
        else:
           key_resp_shouji.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_shouji.keys',key_resp_shouji.keys)
    thisExp.addData('key_resp_shouji.corr', key_resp_shouji.corr)
    if key_resp_shouji.keys != None:  # we had a response
        thisExp.addData('key_resp_shouji.rt', key_resp_shouji.rt)
        thisExp.addData('key_resp_shouji.duration', key_resp_shouji.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_shouji.maxDurationReached:
        routineTimer.addTime(-trial_shouji.maxDuration)
    elif trial_shouji.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_hongniu1" ---
    # create an object to store info about Routine trial_hongniu1
    trial_hongniu1 = data.Routine(
        name='trial_hongniu1',
        components=[text_hongniu1, sound_hongniu1, text_131, text_132, key_resp_hongniu1],
    )
    trial_hongniu1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_hongniu1.setSound('audio/hongniu1.wav', secs=3.0, hamming=True)
    sound_hongniu1.setVolume(1.0, log=False)
    sound_hongniu1.seek(0)
    # create starting attributes for key_resp_hongniu1
    key_resp_hongniu1.keys = []
    key_resp_hongniu1.rt = []
    _key_resp_hongniu1_allKeys = []
    # store start times for trial_hongniu1
    trial_hongniu1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_hongniu1.tStart = globalClock.getTime(format='float')
    trial_hongniu1.status = STARTED
    thisExp.addData('trial_hongniu1.started', trial_hongniu1.tStart)
    trial_hongniu1.maxDuration = None
    # keep track of which components have finished
    trial_hongniu1Components = trial_hongniu1.components
    for thisComponent in trial_hongniu1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_hongniu1" ---
    trial_hongniu1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_hongniu1* updates
        
        # if text_hongniu1 is starting this frame...
        if text_hongniu1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_hongniu1.frameNStart = frameN  # exact frame index
            text_hongniu1.tStart = t  # local t and not account for scr refresh
            text_hongniu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_hongniu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_hongniu1.started')
            # update status
            text_hongniu1.status = STARTED
            text_hongniu1.setAutoDraw(True)
        
        # if text_hongniu1 is active this frame...
        if text_hongniu1.status == STARTED:
            # update params
            pass
        
        # if text_hongniu1 is stopping this frame...
        if text_hongniu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_hongniu1.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_hongniu1.tStop = t  # not accounting for scr refresh
                text_hongniu1.tStopRefresh = tThisFlipGlobal  # on global time
                text_hongniu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_hongniu1.stopped')
                # update status
                text_hongniu1.status = FINISHED
                text_hongniu1.setAutoDraw(False)
        
        # *sound_hongniu1* updates
        
        # if sound_hongniu1 is starting this frame...
        if sound_hongniu1.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_hongniu1.frameNStart = frameN  # exact frame index
            sound_hongniu1.tStart = t  # local t and not account for scr refresh
            sound_hongniu1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_hongniu1.started', tThisFlipGlobal)
            # update status
            sound_hongniu1.status = STARTED
            sound_hongniu1.play(when=win)  # sync with win flip
        
        # if sound_hongniu1 is stopping this frame...
        if sound_hongniu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_hongniu1.tStartRefresh + 3.0-frameTolerance or sound_hongniu1.isFinished:
                # keep track of stop time/frame for later
                sound_hongniu1.tStop = t  # not accounting for scr refresh
                sound_hongniu1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_hongniu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_hongniu1.stopped')
                # update status
                sound_hongniu1.status = FINISHED
                sound_hongniu1.stop()
        
        # *text_131* updates
        
        # if text_131 is starting this frame...
        if text_131.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_131.frameNStart = frameN  # exact frame index
            text_131.tStart = t  # local t and not account for scr refresh
            text_131.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_131, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_131.started')
            # update status
            text_131.status = STARTED
            text_131.setAutoDraw(True)
        
        # if text_131 is active this frame...
        if text_131.status == STARTED:
            # update params
            pass
        
        # if text_131 is stopping this frame...
        if text_131.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_131.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_131.tStop = t  # not accounting for scr refresh
                text_131.tStopRefresh = tThisFlipGlobal  # on global time
                text_131.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_131.stopped')
                # update status
                text_131.status = FINISHED
                text_131.setAutoDraw(False)
        
        # *text_132* updates
        
        # if text_132 is starting this frame...
        if text_132.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_132.frameNStart = frameN  # exact frame index
            text_132.tStart = t  # local t and not account for scr refresh
            text_132.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_132, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_132.started')
            # update status
            text_132.status = STARTED
            text_132.setAutoDraw(True)
        
        # if text_132 is active this frame...
        if text_132.status == STARTED:
            # update params
            pass
        
        # if text_132 is stopping this frame...
        if text_132.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_132.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_132.tStop = t  # not accounting for scr refresh
                text_132.tStopRefresh = tThisFlipGlobal  # on global time
                text_132.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_132.stopped')
                # update status
                text_132.status = FINISHED
                text_132.setAutoDraw(False)
        
        # *key_resp_hongniu1* updates
        waitOnFlip = False
        
        # if key_resp_hongniu1 is starting this frame...
        if key_resp_hongniu1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_hongniu1.frameNStart = frameN  # exact frame index
            key_resp_hongniu1.tStart = t  # local t and not account for scr refresh
            key_resp_hongniu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_hongniu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_hongniu1.started')
            # update status
            key_resp_hongniu1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_hongniu1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_hongniu1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_hongniu1 is stopping this frame...
        if key_resp_hongniu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_hongniu1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_hongniu1.tStop = t  # not accounting for scr refresh
                key_resp_hongniu1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_hongniu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_hongniu1.stopped')
                # update status
                key_resp_hongniu1.status = FINISHED
                key_resp_hongniu1.status = FINISHED
        if key_resp_hongniu1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_hongniu1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_hongniu1_allKeys.extend(theseKeys)
            if len(_key_resp_hongniu1_allKeys):
                key_resp_hongniu1.keys = _key_resp_hongniu1_allKeys[0].name  # just the first key pressed
                key_resp_hongniu1.rt = _key_resp_hongniu1_allKeys[0].rt
                key_resp_hongniu1.duration = _key_resp_hongniu1_allKeys[0].duration
                # was this correct?
                if (key_resp_hongniu1.keys == str("'right'")) or (key_resp_hongniu1.keys == "'right'"):
                    key_resp_hongniu1.corr = 1
                else:
                    key_resp_hongniu1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_hongniu1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_hongniu1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_hongniu1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_hongniu1" ---
    for thisComponent in trial_hongniu1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_hongniu1
    trial_hongniu1.tStop = globalClock.getTime(format='float')
    trial_hongniu1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_hongniu1.stopped', trial_hongniu1.tStop)
    sound_hongniu1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_hongniu1.keys in ['', [], None]:  # No response was made
        key_resp_hongniu1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_hongniu1.corr = 1;  # correct non-response
        else:
           key_resp_hongniu1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_hongniu1.keys',key_resp_hongniu1.keys)
    thisExp.addData('key_resp_hongniu1.corr', key_resp_hongniu1.corr)
    if key_resp_hongniu1.keys != None:  # we had a response
        thisExp.addData('key_resp_hongniu1.rt', key_resp_hongniu1.rt)
        thisExp.addData('key_resp_hongniu1.duration', key_resp_hongniu1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_hongniu1.maxDurationReached:
        routineTimer.addTime(-trial_hongniu1.maxDuration)
    elif trial_hongniu1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_guangming0" ---
    # create an object to store info about Routine trial_guangming0
    trial_guangming0 = data.Routine(
        name='trial_guangming0',
        components=[text_guangming0, sound_guangming0, text_133, text_134, key_resp_guangming0],
    )
    trial_guangming0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_guangming0.setSound('audio/guangming0.wav', secs=3.0, hamming=True)
    sound_guangming0.setVolume(1.0, log=False)
    sound_guangming0.seek(0)
    # create starting attributes for key_resp_guangming0
    key_resp_guangming0.keys = []
    key_resp_guangming0.rt = []
    _key_resp_guangming0_allKeys = []
    # store start times for trial_guangming0
    trial_guangming0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_guangming0.tStart = globalClock.getTime(format='float')
    trial_guangming0.status = STARTED
    thisExp.addData('trial_guangming0.started', trial_guangming0.tStart)
    trial_guangming0.maxDuration = None
    # keep track of which components have finished
    trial_guangming0Components = trial_guangming0.components
    for thisComponent in trial_guangming0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_guangming0" ---
    trial_guangming0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_guangming0* updates
        
        # if text_guangming0 is starting this frame...
        if text_guangming0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_guangming0.frameNStart = frameN  # exact frame index
            text_guangming0.tStart = t  # local t and not account for scr refresh
            text_guangming0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_guangming0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_guangming0.started')
            # update status
            text_guangming0.status = STARTED
            text_guangming0.setAutoDraw(True)
        
        # if text_guangming0 is active this frame...
        if text_guangming0.status == STARTED:
            # update params
            pass
        
        # if text_guangming0 is stopping this frame...
        if text_guangming0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_guangming0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_guangming0.tStop = t  # not accounting for scr refresh
                text_guangming0.tStopRefresh = tThisFlipGlobal  # on global time
                text_guangming0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_guangming0.stopped')
                # update status
                text_guangming0.status = FINISHED
                text_guangming0.setAutoDraw(False)
        
        # *sound_guangming0* updates
        
        # if sound_guangming0 is starting this frame...
        if sound_guangming0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_guangming0.frameNStart = frameN  # exact frame index
            sound_guangming0.tStart = t  # local t and not account for scr refresh
            sound_guangming0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_guangming0.started', tThisFlipGlobal)
            # update status
            sound_guangming0.status = STARTED
            sound_guangming0.play(when=win)  # sync with win flip
        
        # if sound_guangming0 is stopping this frame...
        if sound_guangming0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_guangming0.tStartRefresh + 3.0-frameTolerance or sound_guangming0.isFinished:
                # keep track of stop time/frame for later
                sound_guangming0.tStop = t  # not accounting for scr refresh
                sound_guangming0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_guangming0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_guangming0.stopped')
                # update status
                sound_guangming0.status = FINISHED
                sound_guangming0.stop()
        
        # *text_133* updates
        
        # if text_133 is starting this frame...
        if text_133.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_133.frameNStart = frameN  # exact frame index
            text_133.tStart = t  # local t and not account for scr refresh
            text_133.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_133, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_133.started')
            # update status
            text_133.status = STARTED
            text_133.setAutoDraw(True)
        
        # if text_133 is active this frame...
        if text_133.status == STARTED:
            # update params
            pass
        
        # if text_133 is stopping this frame...
        if text_133.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_133.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_133.tStop = t  # not accounting for scr refresh
                text_133.tStopRefresh = tThisFlipGlobal  # on global time
                text_133.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_133.stopped')
                # update status
                text_133.status = FINISHED
                text_133.setAutoDraw(False)
        
        # *text_134* updates
        
        # if text_134 is starting this frame...
        if text_134.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_134.frameNStart = frameN  # exact frame index
            text_134.tStart = t  # local t and not account for scr refresh
            text_134.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_134, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_134.started')
            # update status
            text_134.status = STARTED
            text_134.setAutoDraw(True)
        
        # if text_134 is active this frame...
        if text_134.status == STARTED:
            # update params
            pass
        
        # if text_134 is stopping this frame...
        if text_134.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_134.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_134.tStop = t  # not accounting for scr refresh
                text_134.tStopRefresh = tThisFlipGlobal  # on global time
                text_134.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_134.stopped')
                # update status
                text_134.status = FINISHED
                text_134.setAutoDraw(False)
        
        # *key_resp_guangming0* updates
        waitOnFlip = False
        
        # if key_resp_guangming0 is starting this frame...
        if key_resp_guangming0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_guangming0.frameNStart = frameN  # exact frame index
            key_resp_guangming0.tStart = t  # local t and not account for scr refresh
            key_resp_guangming0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_guangming0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_guangming0.started')
            # update status
            key_resp_guangming0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_guangming0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_guangming0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_guangming0 is stopping this frame...
        if key_resp_guangming0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_guangming0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_guangming0.tStop = t  # not accounting for scr refresh
                key_resp_guangming0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_guangming0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_guangming0.stopped')
                # update status
                key_resp_guangming0.status = FINISHED
                key_resp_guangming0.status = FINISHED
        if key_resp_guangming0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_guangming0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_guangming0_allKeys.extend(theseKeys)
            if len(_key_resp_guangming0_allKeys):
                key_resp_guangming0.keys = _key_resp_guangming0_allKeys[0].name  # just the first key pressed
                key_resp_guangming0.rt = _key_resp_guangming0_allKeys[0].rt
                key_resp_guangming0.duration = _key_resp_guangming0_allKeys[0].duration
                # was this correct?
                if (key_resp_guangming0.keys == str("'left'")) or (key_resp_guangming0.keys == "'left'"):
                    key_resp_guangming0.corr = 1
                else:
                    key_resp_guangming0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_guangming0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_guangming0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_guangming0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_guangming0" ---
    for thisComponent in trial_guangming0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_guangming0
    trial_guangming0.tStop = globalClock.getTime(format='float')
    trial_guangming0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_guangming0.stopped', trial_guangming0.tStop)
    sound_guangming0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_guangming0.keys in ['', [], None]:  # No response was made
        key_resp_guangming0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_guangming0.corr = 1;  # correct non-response
        else:
           key_resp_guangming0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_guangming0.keys',key_resp_guangming0.keys)
    thisExp.addData('key_resp_guangming0.corr', key_resp_guangming0.corr)
    if key_resp_guangming0.keys != None:  # we had a response
        thisExp.addData('key_resp_guangming0.rt', key_resp_guangming0.rt)
        thisExp.addData('key_resp_guangming0.duration', key_resp_guangming0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_guangming0.maxDurationReached:
        routineTimer.addTime(-trial_guangming0.maxDuration)
    elif trial_guangming0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_qiche" ---
    # create an object to store info about Routine trial_qiche
    trial_qiche = data.Routine(
        name='trial_qiche',
        components=[text_qiche, sound_qiche, text_135, text_136, key_resp_qiche],
    )
    trial_qiche.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_qiche.setSound('audio/qiche.wav', secs=3.0, hamming=True)
    sound_qiche.setVolume(1.0, log=False)
    sound_qiche.seek(0)
    # create starting attributes for key_resp_qiche
    key_resp_qiche.keys = []
    key_resp_qiche.rt = []
    _key_resp_qiche_allKeys = []
    # store start times for trial_qiche
    trial_qiche.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_qiche.tStart = globalClock.getTime(format='float')
    trial_qiche.status = STARTED
    thisExp.addData('trial_qiche.started', trial_qiche.tStart)
    trial_qiche.maxDuration = None
    # keep track of which components have finished
    trial_qicheComponents = trial_qiche.components
    for thisComponent in trial_qiche.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_qiche" ---
    trial_qiche.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_qiche* updates
        
        # if text_qiche is starting this frame...
        if text_qiche.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_qiche.frameNStart = frameN  # exact frame index
            text_qiche.tStart = t  # local t and not account for scr refresh
            text_qiche.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_qiche, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_qiche.started')
            # update status
            text_qiche.status = STARTED
            text_qiche.setAutoDraw(True)
        
        # if text_qiche is active this frame...
        if text_qiche.status == STARTED:
            # update params
            pass
        
        # if text_qiche is stopping this frame...
        if text_qiche.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_qiche.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_qiche.tStop = t  # not accounting for scr refresh
                text_qiche.tStopRefresh = tThisFlipGlobal  # on global time
                text_qiche.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_qiche.stopped')
                # update status
                text_qiche.status = FINISHED
                text_qiche.setAutoDraw(False)
        
        # *sound_qiche* updates
        
        # if sound_qiche is starting this frame...
        if sound_qiche.status == NOT_STARTED and t >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_qiche.frameNStart = frameN  # exact frame index
            sound_qiche.tStart = t  # local t and not account for scr refresh
            sound_qiche.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_qiche.started', t)
            # update status
            sound_qiche.status = STARTED
            sound_qiche.play()  # start the sound (it finishes automatically)
        
        # if sound_qiche is stopping this frame...
        if sound_qiche.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_qiche.tStartRefresh + 3.0-frameTolerance or sound_qiche.isFinished:
                # keep track of stop time/frame for later
                sound_qiche.tStop = t  # not accounting for scr refresh
                sound_qiche.tStopRefresh = tThisFlipGlobal  # on global time
                sound_qiche.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.addData('sound_qiche.stopped', t)
                # update status
                sound_qiche.status = FINISHED
                sound_qiche.stop()
        
        # *text_135* updates
        
        # if text_135 is starting this frame...
        if text_135.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_135.frameNStart = frameN  # exact frame index
            text_135.tStart = t  # local t and not account for scr refresh
            text_135.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_135, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_135.started')
            # update status
            text_135.status = STARTED
            text_135.setAutoDraw(True)
        
        # if text_135 is active this frame...
        if text_135.status == STARTED:
            # update params
            pass
        
        # if text_135 is stopping this frame...
        if text_135.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_135.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_135.tStop = t  # not accounting for scr refresh
                text_135.tStopRefresh = tThisFlipGlobal  # on global time
                text_135.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_135.stopped')
                # update status
                text_135.status = FINISHED
                text_135.setAutoDraw(False)
        
        # *text_136* updates
        
        # if text_136 is starting this frame...
        if text_136.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_136.frameNStart = frameN  # exact frame index
            text_136.tStart = t  # local t and not account for scr refresh
            text_136.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_136, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_136.started')
            # update status
            text_136.status = STARTED
            text_136.setAutoDraw(True)
        
        # if text_136 is active this frame...
        if text_136.status == STARTED:
            # update params
            pass
        
        # if text_136 is stopping this frame...
        if text_136.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_136.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_136.tStop = t  # not accounting for scr refresh
                text_136.tStopRefresh = tThisFlipGlobal  # on global time
                text_136.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_136.stopped')
                # update status
                text_136.status = FINISHED
                text_136.setAutoDraw(False)
        
        # *key_resp_qiche* updates
        waitOnFlip = False
        
        # if key_resp_qiche is starting this frame...
        if key_resp_qiche.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_qiche.frameNStart = frameN  # exact frame index
            key_resp_qiche.tStart = t  # local t and not account for scr refresh
            key_resp_qiche.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_qiche, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_qiche.started')
            # update status
            key_resp_qiche.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_qiche.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_qiche.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_qiche is stopping this frame...
        if key_resp_qiche.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_qiche.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_qiche.tStop = t  # not accounting for scr refresh
                key_resp_qiche.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_qiche.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_qiche.stopped')
                # update status
                key_resp_qiche.status = FINISHED
                key_resp_qiche.status = FINISHED
        if key_resp_qiche.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_qiche.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_qiche_allKeys.extend(theseKeys)
            if len(_key_resp_qiche_allKeys):
                key_resp_qiche.keys = _key_resp_qiche_allKeys[-1].name  # just the last key pressed
                key_resp_qiche.rt = _key_resp_qiche_allKeys[-1].rt
                key_resp_qiche.duration = _key_resp_qiche_allKeys[-1].duration
                # was this correct?
                if (key_resp_qiche.keys == str("'left'")) or (key_resp_qiche.keys == "'left'"):
                    key_resp_qiche.corr = 1
                else:
                    key_resp_qiche.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_qiche]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_qiche.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_qiche.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_qiche" ---
    for thisComponent in trial_qiche.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_qiche
    trial_qiche.tStop = globalClock.getTime(format='float')
    trial_qiche.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_qiche.stopped', trial_qiche.tStop)
    sound_qiche.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_qiche.keys in ['', [], None]:  # No response was made
        key_resp_qiche.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_qiche.corr = 1;  # correct non-response
        else:
           key_resp_qiche.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_qiche.keys',key_resp_qiche.keys)
    thisExp.addData('key_resp_qiche.corr', key_resp_qiche.corr)
    if key_resp_qiche.keys != None:  # we had a response
        thisExp.addData('key_resp_qiche.rt', key_resp_qiche.rt)
        thisExp.addData('key_resp_qiche.duration', key_resp_qiche.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_qiche.maxDurationReached:
        routineTimer.addTime(-trial_qiche.maxDuration)
    elif trial_qiche.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_gongfu0" ---
    # create an object to store info about Routine trial_gongfu0
    trial_gongfu0 = data.Routine(
        name='trial_gongfu0',
        components=[text_gongfu0, sound_gongfu0, text_137, text_138, key_resp_gongfu0],
    )
    trial_gongfu0.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_gongfu0.setSound('audio/gongfu0.wav', secs=3.0, hamming=True)
    sound_gongfu0.setVolume(1.0, log=False)
    sound_gongfu0.seek(0)
    # create starting attributes for key_resp_gongfu0
    key_resp_gongfu0.keys = []
    key_resp_gongfu0.rt = []
    _key_resp_gongfu0_allKeys = []
    # store start times for trial_gongfu0
    trial_gongfu0.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_gongfu0.tStart = globalClock.getTime(format='float')
    trial_gongfu0.status = STARTED
    thisExp.addData('trial_gongfu0.started', trial_gongfu0.tStart)
    trial_gongfu0.maxDuration = None
    # keep track of which components have finished
    trial_gongfu0Components = trial_gongfu0.components
    for thisComponent in trial_gongfu0.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_gongfu0" ---
    trial_gongfu0.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_gongfu0* updates
        
        # if text_gongfu0 is starting this frame...
        if text_gongfu0.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_gongfu0.frameNStart = frameN  # exact frame index
            text_gongfu0.tStart = t  # local t and not account for scr refresh
            text_gongfu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_gongfu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_gongfu0.started')
            # update status
            text_gongfu0.status = STARTED
            text_gongfu0.setAutoDraw(True)
        
        # if text_gongfu0 is active this frame...
        if text_gongfu0.status == STARTED:
            # update params
            pass
        
        # if text_gongfu0 is stopping this frame...
        if text_gongfu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_gongfu0.tStartRefresh + 3.0-frameTolerance:
                # keep track of stop time/frame for later
                text_gongfu0.tStop = t  # not accounting for scr refresh
                text_gongfu0.tStopRefresh = tThisFlipGlobal  # on global time
                text_gongfu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_gongfu0.stopped')
                # update status
                text_gongfu0.status = FINISHED
                text_gongfu0.setAutoDraw(False)
        
        # *sound_gongfu0* updates
        
        # if sound_gongfu0 is starting this frame...
        if sound_gongfu0.status == NOT_STARTED and tThisFlip >= 4.0-frameTolerance:
            # keep track of start time/frame for later
            sound_gongfu0.frameNStart = frameN  # exact frame index
            sound_gongfu0.tStart = t  # local t and not account for scr refresh
            sound_gongfu0.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_gongfu0.started', tThisFlipGlobal)
            # update status
            sound_gongfu0.status = STARTED
            sound_gongfu0.play(when=win)  # sync with win flip
        
        # if sound_gongfu0 is stopping this frame...
        if sound_gongfu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_gongfu0.tStartRefresh + 3.0-frameTolerance or sound_gongfu0.isFinished:
                # keep track of stop time/frame for later
                sound_gongfu0.tStop = t  # not accounting for scr refresh
                sound_gongfu0.tStopRefresh = tThisFlipGlobal  # on global time
                sound_gongfu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_gongfu0.stopped')
                # update status
                sound_gongfu0.status = FINISHED
                sound_gongfu0.stop()
        
        # *text_137* updates
        
        # if text_137 is starting this frame...
        if text_137.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_137.frameNStart = frameN  # exact frame index
            text_137.tStart = t  # local t and not account for scr refresh
            text_137.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_137, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_137.started')
            # update status
            text_137.status = STARTED
            text_137.setAutoDraw(True)
        
        # if text_137 is active this frame...
        if text_137.status == STARTED:
            # update params
            pass
        
        # if text_137 is stopping this frame...
        if text_137.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_137.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_137.tStop = t  # not accounting for scr refresh
                text_137.tStopRefresh = tThisFlipGlobal  # on global time
                text_137.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_137.stopped')
                # update status
                text_137.status = FINISHED
                text_137.setAutoDraw(False)
        
        # *text_138* updates
        
        # if text_138 is starting this frame...
        if text_138.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_138.frameNStart = frameN  # exact frame index
            text_138.tStart = t  # local t and not account for scr refresh
            text_138.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_138, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_138.started')
            # update status
            text_138.status = STARTED
            text_138.setAutoDraw(True)
        
        # if text_138 is active this frame...
        if text_138.status == STARTED:
            # update params
            pass
        
        # if text_138 is stopping this frame...
        if text_138.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_138.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_138.tStop = t  # not accounting for scr refresh
                text_138.tStopRefresh = tThisFlipGlobal  # on global time
                text_138.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_138.stopped')
                # update status
                text_138.status = FINISHED
                text_138.setAutoDraw(False)
        
        # *key_resp_gongfu0* updates
        waitOnFlip = False
        
        # if key_resp_gongfu0 is starting this frame...
        if key_resp_gongfu0.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_resp_gongfu0.frameNStart = frameN  # exact frame index
            key_resp_gongfu0.tStart = t  # local t and not account for scr refresh
            key_resp_gongfu0.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_gongfu0, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_gongfu0.started')
            # update status
            key_resp_gongfu0.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_gongfu0.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_gongfu0.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_gongfu0 is stopping this frame...
        if key_resp_gongfu0.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_gongfu0.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_gongfu0.tStop = t  # not accounting for scr refresh
                key_resp_gongfu0.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_gongfu0.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_gongfu0.stopped')
                # update status
                key_resp_gongfu0.status = FINISHED
                key_resp_gongfu0.status = FINISHED
        if key_resp_gongfu0.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_gongfu0.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_gongfu0_allKeys.extend(theseKeys)
            if len(_key_resp_gongfu0_allKeys):
                key_resp_gongfu0.keys = _key_resp_gongfu0_allKeys[0].name  # just the first key pressed
                key_resp_gongfu0.rt = _key_resp_gongfu0_allKeys[0].rt
                key_resp_gongfu0.duration = _key_resp_gongfu0_allKeys[0].duration
                # was this correct?
                if (key_resp_gongfu0.keys == str("'left'")) or (key_resp_gongfu0.keys == "'left'"):
                    key_resp_gongfu0.corr = 1
                else:
                    key_resp_gongfu0.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_gongfu0]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_gongfu0.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_gongfu0.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_gongfu0" ---
    for thisComponent in trial_gongfu0.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_gongfu0
    trial_gongfu0.tStop = globalClock.getTime(format='float')
    trial_gongfu0.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_gongfu0.stopped', trial_gongfu0.tStop)
    sound_gongfu0.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_gongfu0.keys in ['', [], None]:  # No response was made
        key_resp_gongfu0.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_gongfu0.corr = 1;  # correct non-response
        else:
           key_resp_gongfu0.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_gongfu0.keys',key_resp_gongfu0.keys)
    thisExp.addData('key_resp_gongfu0.corr', key_resp_gongfu0.corr)
    if key_resp_gongfu0.keys != None:  # we had a response
        thisExp.addData('key_resp_gongfu0.rt', key_resp_gongfu0.rt)
        thisExp.addData('key_resp_gongfu0.duration', key_resp_gongfu0.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_gongfu0.maxDurationReached:
        routineTimer.addTime(-trial_gongfu0.maxDuration)
    elif trial_gongfu0.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_yusan" ---
    # create an object to store info about Routine trial_yusan
    trial_yusan = data.Routine(
        name='trial_yusan',
        components=[textyusan, soundyusan, text_157, text_158, key_respyusan],
    )
    trial_yusan.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    soundyusan.setSound('audio/yusan.wav', secs=3, hamming=True)
    soundyusan.setVolume(1.0, log=False)
    soundyusan.seek(0)
    # create starting attributes for key_respyusan
    key_respyusan.keys = []
    key_respyusan.rt = []
    _key_respyusan_allKeys = []
    # store start times for trial_yusan
    trial_yusan.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_yusan.tStart = globalClock.getTime(format='float')
    trial_yusan.status = STARTED
    thisExp.addData('trial_yusan.started', trial_yusan.tStart)
    trial_yusan.maxDuration = None
    # keep track of which components have finished
    trial_yusanComponents = trial_yusan.components
    for thisComponent in trial_yusan.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_yusan" ---
    trial_yusan.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *textyusan* updates
        
        # if textyusan is starting this frame...
        if textyusan.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            textyusan.frameNStart = frameN  # exact frame index
            textyusan.tStart = t  # local t and not account for scr refresh
            textyusan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(textyusan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'textyusan.started')
            # update status
            textyusan.status = STARTED
            textyusan.setAutoDraw(True)
        
        # if textyusan is active this frame...
        if textyusan.status == STARTED:
            # update params
            pass
        
        # if textyusan is stopping this frame...
        if textyusan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > textyusan.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                textyusan.tStop = t  # not accounting for scr refresh
                textyusan.tStopRefresh = tThisFlipGlobal  # on global time
                textyusan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'textyusan.stopped')
                # update status
                textyusan.status = FINISHED
                textyusan.setAutoDraw(False)
        
        # *soundyusan* updates
        
        # if soundyusan is starting this frame...
        if soundyusan.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            soundyusan.frameNStart = frameN  # exact frame index
            soundyusan.tStart = t  # local t and not account for scr refresh
            soundyusan.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('soundyusan.started', tThisFlipGlobal)
            # update status
            soundyusan.status = STARTED
            soundyusan.play(when=win)  # sync with win flip
        
        # if soundyusan is stopping this frame...
        if soundyusan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > soundyusan.tStartRefresh + 3-frameTolerance or soundyusan.isFinished:
                # keep track of stop time/frame for later
                soundyusan.tStop = t  # not accounting for scr refresh
                soundyusan.tStopRefresh = tThisFlipGlobal  # on global time
                soundyusan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'soundyusan.stopped')
                # update status
                soundyusan.status = FINISHED
                soundyusan.stop()
        
        # *text_157* updates
        
        # if text_157 is starting this frame...
        if text_157.status == NOT_STARTED and tThisFlip >= 3.0-frameTolerance:
            # keep track of start time/frame for later
            text_157.frameNStart = frameN  # exact frame index
            text_157.tStart = t  # local t and not account for scr refresh
            text_157.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_157, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_157.started')
            # update status
            text_157.status = STARTED
            text_157.setAutoDraw(True)
        
        # if text_157 is active this frame...
        if text_157.status == STARTED:
            # update params
            pass
        
        # if text_157 is stopping this frame...
        if text_157.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_157.tStartRefresh + 4.0-frameTolerance:
                # keep track of stop time/frame for later
                text_157.tStop = t  # not accounting for scr refresh
                text_157.tStopRefresh = tThisFlipGlobal  # on global time
                text_157.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_157.stopped')
                # update status
                text_157.status = FINISHED
                text_157.setAutoDraw(False)
        
        # *text_158* updates
        
        # if text_158 is starting this frame...
        if text_158.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            text_158.frameNStart = frameN  # exact frame index
            text_158.tStart = t  # local t and not account for scr refresh
            text_158.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_158, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_158.started')
            # update status
            text_158.status = STARTED
            text_158.setAutoDraw(True)
        
        # if text_158 is active this frame...
        if text_158.status == STARTED:
            # update params
            pass
        
        # if text_158 is stopping this frame...
        if text_158.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_158.tStartRefresh + 5.0-frameTolerance:
                # keep track of stop time/frame for later
                text_158.tStop = t  # not accounting for scr refresh
                text_158.tStopRefresh = tThisFlipGlobal  # on global time
                text_158.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_158.stopped')
                # update status
                text_158.status = FINISHED
                text_158.setAutoDraw(False)
        
        # *key_respyusan* updates
        waitOnFlip = False
        
        # if key_respyusan is starting this frame...
        if key_respyusan.status == NOT_STARTED and tThisFlip >= 7.0-frameTolerance:
            # keep track of start time/frame for later
            key_respyusan.frameNStart = frameN  # exact frame index
            key_respyusan.tStart = t  # local t and not account for scr refresh
            key_respyusan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_respyusan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_respyusan.started')
            # update status
            key_respyusan.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_respyusan.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_respyusan.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_respyusan is stopping this frame...
        if key_respyusan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_respyusan.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_respyusan.tStop = t  # not accounting for scr refresh
                key_respyusan.tStopRefresh = tThisFlipGlobal  # on global time
                key_respyusan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_respyusan.stopped')
                # update status
                key_respyusan.status = FINISHED
                key_respyusan.status = FINISHED
        if key_respyusan.status == STARTED and not waitOnFlip:
            theseKeys = key_respyusan.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_respyusan_allKeys.extend(theseKeys)
            if len(_key_respyusan_allKeys):
                key_respyusan.keys = _key_respyusan_allKeys[0].name  # just the first key pressed
                key_respyusan.rt = _key_respyusan_allKeys[0].rt
                key_respyusan.duration = _key_respyusan_allKeys[0].duration
                # was this correct?
                if (key_respyusan.keys == str("'left'")) or (key_respyusan.keys == "'left'"):
                    key_respyusan.corr = 1
                else:
                    key_respyusan.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[soundyusan]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_yusan.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_yusan.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_yusan" ---
    for thisComponent in trial_yusan.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_yusan
    trial_yusan.tStop = globalClock.getTime(format='float')
    trial_yusan.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_yusan.stopped', trial_yusan.tStop)
    soundyusan.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_respyusan.keys in ['', [], None]:  # No response was made
        key_respyusan.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_respyusan.corr = 1;  # correct non-response
        else:
           key_respyusan.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_respyusan.keys',key_respyusan.keys)
    thisExp.addData('key_respyusan.corr', key_respyusan.corr)
    if key_respyusan.keys != None:  # we had a response
        thisExp.addData('key_respyusan.rt', key_respyusan.rt)
        thisExp.addData('key_respyusan.duration', key_respyusan.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_yusan.maxDurationReached:
        routineTimer.addTime(-trial_yusan.maxDuration)
    elif trial_yusan.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_jiaofu1" ---
    # create an object to store info about Routine trial_jiaofu1
    trial_jiaofu1 = data.Routine(
        name='trial_jiaofu1',
        components=[text_jiaofu1, sound_jiaofu1, text_141, text_142, key_resp_jiaofu1],
    )
    trial_jiaofu1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_jiaofu1.setSound('audio/jiaofu1.wav', secs=3, hamming=True)
    sound_jiaofu1.setVolume(1.0, log=False)
    sound_jiaofu1.seek(0)
    # create starting attributes for key_resp_jiaofu1
    key_resp_jiaofu1.keys = []
    key_resp_jiaofu1.rt = []
    _key_resp_jiaofu1_allKeys = []
    # store start times for trial_jiaofu1
    trial_jiaofu1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_jiaofu1.tStart = globalClock.getTime(format='float')
    trial_jiaofu1.status = STARTED
    thisExp.addData('trial_jiaofu1.started', trial_jiaofu1.tStart)
    trial_jiaofu1.maxDuration = None
    # keep track of which components have finished
    trial_jiaofu1Components = trial_jiaofu1.components
    for thisComponent in trial_jiaofu1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_jiaofu1" ---
    trial_jiaofu1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_jiaofu1* updates
        
        # if text_jiaofu1 is starting this frame...
        if text_jiaofu1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_jiaofu1.frameNStart = frameN  # exact frame index
            text_jiaofu1.tStart = t  # local t and not account for scr refresh
            text_jiaofu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_jiaofu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_jiaofu1.started')
            # update status
            text_jiaofu1.status = STARTED
            text_jiaofu1.setAutoDraw(True)
        
        # if text_jiaofu1 is active this frame...
        if text_jiaofu1.status == STARTED:
            # update params
            pass
        
        # if text_jiaofu1 is stopping this frame...
        if text_jiaofu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_jiaofu1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_jiaofu1.tStop = t  # not accounting for scr refresh
                text_jiaofu1.tStopRefresh = tThisFlipGlobal  # on global time
                text_jiaofu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_jiaofu1.stopped')
                # update status
                text_jiaofu1.status = FINISHED
                text_jiaofu1.setAutoDraw(False)
        
        # *sound_jiaofu1* updates
        
        # if sound_jiaofu1 is starting this frame...
        if sound_jiaofu1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_jiaofu1.frameNStart = frameN  # exact frame index
            sound_jiaofu1.tStart = t  # local t and not account for scr refresh
            sound_jiaofu1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_jiaofu1.started', tThisFlipGlobal)
            # update status
            sound_jiaofu1.status = STARTED
            sound_jiaofu1.play(when=win)  # sync with win flip
        
        # if sound_jiaofu1 is stopping this frame...
        if sound_jiaofu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_jiaofu1.tStartRefresh + 3-frameTolerance or sound_jiaofu1.isFinished:
                # keep track of stop time/frame for later
                sound_jiaofu1.tStop = t  # not accounting for scr refresh
                sound_jiaofu1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_jiaofu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_jiaofu1.stopped')
                # update status
                sound_jiaofu1.status = FINISHED
                sound_jiaofu1.stop()
        
        # *text_141* updates
        
        # if text_141 is starting this frame...
        if text_141.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_141.frameNStart = frameN  # exact frame index
            text_141.tStart = t  # local t and not account for scr refresh
            text_141.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_141, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_141.started')
            # update status
            text_141.status = STARTED
            text_141.setAutoDraw(True)
        
        # if text_141 is active this frame...
        if text_141.status == STARTED:
            # update params
            pass
        
        # if text_141 is stopping this frame...
        if text_141.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_141.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_141.tStop = t  # not accounting for scr refresh
                text_141.tStopRefresh = tThisFlipGlobal  # on global time
                text_141.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_141.stopped')
                # update status
                text_141.status = FINISHED
                text_141.setAutoDraw(False)
        
        # *text_142* updates
        
        # if text_142 is starting this frame...
        if text_142.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_142.frameNStart = frameN  # exact frame index
            text_142.tStart = t  # local t and not account for scr refresh
            text_142.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_142, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_142.started')
            # update status
            text_142.status = STARTED
            text_142.setAutoDraw(True)
        
        # if text_142 is active this frame...
        if text_142.status == STARTED:
            # update params
            pass
        
        # if text_142 is stopping this frame...
        if text_142.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_142.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_142.tStop = t  # not accounting for scr refresh
                text_142.tStopRefresh = tThisFlipGlobal  # on global time
                text_142.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_142.stopped')
                # update status
                text_142.status = FINISHED
                text_142.setAutoDraw(False)
        
        # *key_resp_jiaofu1* updates
        waitOnFlip = False
        
        # if key_resp_jiaofu1 is starting this frame...
        if key_resp_jiaofu1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_jiaofu1.frameNStart = frameN  # exact frame index
            key_resp_jiaofu1.tStart = t  # local t and not account for scr refresh
            key_resp_jiaofu1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_jiaofu1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_jiaofu1.started')
            # update status
            key_resp_jiaofu1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_jiaofu1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_jiaofu1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_jiaofu1 is stopping this frame...
        if key_resp_jiaofu1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_jiaofu1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_jiaofu1.tStop = t  # not accounting for scr refresh
                key_resp_jiaofu1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_jiaofu1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_jiaofu1.stopped')
                # update status
                key_resp_jiaofu1.status = FINISHED
                key_resp_jiaofu1.status = FINISHED
        if key_resp_jiaofu1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_jiaofu1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_jiaofu1_allKeys.extend(theseKeys)
            if len(_key_resp_jiaofu1_allKeys):
                key_resp_jiaofu1.keys = _key_resp_jiaofu1_allKeys[0].name  # just the first key pressed
                key_resp_jiaofu1.rt = _key_resp_jiaofu1_allKeys[0].rt
                key_resp_jiaofu1.duration = _key_resp_jiaofu1_allKeys[0].duration
                # was this correct?
                if (key_resp_jiaofu1.keys == str("'right'")) or (key_resp_jiaofu1.keys == "'right'"):
                    key_resp_jiaofu1.corr = 1
                else:
                    key_resp_jiaofu1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_jiaofu1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_jiaofu1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_jiaofu1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_jiaofu1" ---
    for thisComponent in trial_jiaofu1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_jiaofu1
    trial_jiaofu1.tStop = globalClock.getTime(format='float')
    trial_jiaofu1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_jiaofu1.stopped', trial_jiaofu1.tStop)
    sound_jiaofu1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_jiaofu1.keys in ['', [], None]:  # No response was made
        key_resp_jiaofu1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_jiaofu1.corr = 1;  # correct non-response
        else:
           key_resp_jiaofu1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_jiaofu1.keys',key_resp_jiaofu1.keys)
    thisExp.addData('key_resp_jiaofu1.corr', key_resp_jiaofu1.corr)
    if key_resp_jiaofu1.keys != None:  # we had a response
        thisExp.addData('key_resp_jiaofu1.rt', key_resp_jiaofu1.rt)
        thisExp.addData('key_resp_jiaofu1.duration', key_resp_jiaofu1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_jiaofu1.maxDurationReached:
        routineTimer.addTime(-trial_jiaofu1.maxDuration)
    elif trial_jiaofu1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_baixiang1" ---
    # create an object to store info about Routine trial_baixiang1
    trial_baixiang1 = data.Routine(
        name='trial_baixiang1',
        components=[text_baixiang_1, sound_baixiang_1, text_159, text_160, key_resp_baixiang_1],
    )
    trial_baixiang1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_baixiang_1.setSound('audio/baixiang1.wav', secs=3, hamming=True)
    sound_baixiang_1.setVolume(1.0, log=False)
    sound_baixiang_1.seek(0)
    # create starting attributes for key_resp_baixiang_1
    key_resp_baixiang_1.keys = []
    key_resp_baixiang_1.rt = []
    _key_resp_baixiang_1_allKeys = []
    # store start times for trial_baixiang1
    trial_baixiang1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_baixiang1.tStart = globalClock.getTime(format='float')
    trial_baixiang1.status = STARTED
    thisExp.addData('trial_baixiang1.started', trial_baixiang1.tStart)
    trial_baixiang1.maxDuration = None
    # keep track of which components have finished
    trial_baixiang1Components = trial_baixiang1.components
    for thisComponent in trial_baixiang1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_baixiang1" ---
    trial_baixiang1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_baixiang_1* updates
        
        # if text_baixiang_1 is starting this frame...
        if text_baixiang_1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_baixiang_1.frameNStart = frameN  # exact frame index
            text_baixiang_1.tStart = t  # local t and not account for scr refresh
            text_baixiang_1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_baixiang_1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_baixiang_1.started')
            # update status
            text_baixiang_1.status = STARTED
            text_baixiang_1.setAutoDraw(True)
        
        # if text_baixiang_1 is active this frame...
        if text_baixiang_1.status == STARTED:
            # update params
            pass
        
        # if text_baixiang_1 is stopping this frame...
        if text_baixiang_1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_baixiang_1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_baixiang_1.tStop = t  # not accounting for scr refresh
                text_baixiang_1.tStopRefresh = tThisFlipGlobal  # on global time
                text_baixiang_1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_baixiang_1.stopped')
                # update status
                text_baixiang_1.status = FINISHED
                text_baixiang_1.setAutoDraw(False)
        
        # *sound_baixiang_1* updates
        
        # if sound_baixiang_1 is starting this frame...
        if sound_baixiang_1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_baixiang_1.frameNStart = frameN  # exact frame index
            sound_baixiang_1.tStart = t  # local t and not account for scr refresh
            sound_baixiang_1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_baixiang_1.started', tThisFlipGlobal)
            # update status
            sound_baixiang_1.status = STARTED
            sound_baixiang_1.play(when=win)  # sync with win flip
        
        # if sound_baixiang_1 is stopping this frame...
        if sound_baixiang_1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_baixiang_1.tStartRefresh + 3-frameTolerance or sound_baixiang_1.isFinished:
                # keep track of stop time/frame for later
                sound_baixiang_1.tStop = t  # not accounting for scr refresh
                sound_baixiang_1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_baixiang_1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_baixiang_1.stopped')
                # update status
                sound_baixiang_1.status = FINISHED
                sound_baixiang_1.stop()
        
        # *text_159* updates
        
        # if text_159 is starting this frame...
        if text_159.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_159.frameNStart = frameN  # exact frame index
            text_159.tStart = t  # local t and not account for scr refresh
            text_159.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_159, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_159.started')
            # update status
            text_159.status = STARTED
            text_159.setAutoDraw(True)
        
        # if text_159 is active this frame...
        if text_159.status == STARTED:
            # update params
            pass
        
        # if text_159 is stopping this frame...
        if text_159.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_159.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_159.tStop = t  # not accounting for scr refresh
                text_159.tStopRefresh = tThisFlipGlobal  # on global time
                text_159.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_159.stopped')
                # update status
                text_159.status = FINISHED
                text_159.setAutoDraw(False)
        
        # *text_160* updates
        
        # if text_160 is starting this frame...
        if text_160.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_160.frameNStart = frameN  # exact frame index
            text_160.tStart = t  # local t and not account for scr refresh
            text_160.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_160, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_160.started')
            # update status
            text_160.status = STARTED
            text_160.setAutoDraw(True)
        
        # if text_160 is active this frame...
        if text_160.status == STARTED:
            # update params
            pass
        
        # if text_160 is stopping this frame...
        if text_160.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_160.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_160.tStop = t  # not accounting for scr refresh
                text_160.tStopRefresh = tThisFlipGlobal  # on global time
                text_160.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_160.stopped')
                # update status
                text_160.status = FINISHED
                text_160.setAutoDraw(False)
        
        # *key_resp_baixiang_1* updates
        waitOnFlip = False
        
        # if key_resp_baixiang_1 is starting this frame...
        if key_resp_baixiang_1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_baixiang_1.frameNStart = frameN  # exact frame index
            key_resp_baixiang_1.tStart = t  # local t and not account for scr refresh
            key_resp_baixiang_1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_baixiang_1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_baixiang_1.started')
            # update status
            key_resp_baixiang_1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_baixiang_1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_baixiang_1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_baixiang_1 is stopping this frame...
        if key_resp_baixiang_1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_baixiang_1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_baixiang_1.tStop = t  # not accounting for scr refresh
                key_resp_baixiang_1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_baixiang_1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_baixiang_1.stopped')
                # update status
                key_resp_baixiang_1.status = FINISHED
                key_resp_baixiang_1.status = FINISHED
        if key_resp_baixiang_1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_baixiang_1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_baixiang_1_allKeys.extend(theseKeys)
            if len(_key_resp_baixiang_1_allKeys):
                key_resp_baixiang_1.keys = _key_resp_baixiang_1_allKeys[0].name  # just the first key pressed
                key_resp_baixiang_1.rt = _key_resp_baixiang_1_allKeys[0].rt
                key_resp_baixiang_1.duration = _key_resp_baixiang_1_allKeys[0].duration
                # was this correct?
                if (key_resp_baixiang_1.keys == str("'right'")) or (key_resp_baixiang_1.keys == "'right'"):
                    key_resp_baixiang_1.corr = 1
                else:
                    key_resp_baixiang_1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_baixiang_1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_baixiang1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_baixiang1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_baixiang1" ---
    for thisComponent in trial_baixiang1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_baixiang1
    trial_baixiang1.tStop = globalClock.getTime(format='float')
    trial_baixiang1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_baixiang1.stopped', trial_baixiang1.tStop)
    sound_baixiang_1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_baixiang_1.keys in ['', [], None]:  # No response was made
        key_resp_baixiang_1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_baixiang_1.corr = 1;  # correct non-response
        else:
           key_resp_baixiang_1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_baixiang_1.keys',key_resp_baixiang_1.keys)
    thisExp.addData('key_resp_baixiang_1.corr', key_resp_baixiang_1.corr)
    if key_resp_baixiang_1.keys != None:  # we had a response
        thisExp.addData('key_resp_baixiang_1.rt', key_resp_baixiang_1.rt)
        thisExp.addData('key_resp_baixiang_1.duration', key_resp_baixiang_1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_baixiang1.maxDurationReached:
        routineTimer.addTime(-trial_baixiang1.maxDuration)
    elif trial_baixiang1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_canguan" ---
    # create an object to store info about Routine trial_canguan
    trial_canguan = data.Routine(
        name='trial_canguan',
        components=[text_canguan, sound_canguan, text_143, text_144, key_resp_canguan],
    )
    trial_canguan.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_canguan.setSound('audio/canguan.wav', secs=3, hamming=True)
    sound_canguan.setVolume(1.0, log=False)
    sound_canguan.seek(0)
    # create starting attributes for key_resp_canguan
    key_resp_canguan.keys = []
    key_resp_canguan.rt = []
    _key_resp_canguan_allKeys = []
    # store start times for trial_canguan
    trial_canguan.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_canguan.tStart = globalClock.getTime(format='float')
    trial_canguan.status = STARTED
    thisExp.addData('trial_canguan.started', trial_canguan.tStart)
    trial_canguan.maxDuration = None
    # keep track of which components have finished
    trial_canguanComponents = trial_canguan.components
    for thisComponent in trial_canguan.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_canguan" ---
    trial_canguan.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_canguan* updates
        
        # if text_canguan is starting this frame...
        if text_canguan.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_canguan.frameNStart = frameN  # exact frame index
            text_canguan.tStart = t  # local t and not account for scr refresh
            text_canguan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_canguan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_canguan.started')
            # update status
            text_canguan.status = STARTED
            text_canguan.setAutoDraw(True)
        
        # if text_canguan is active this frame...
        if text_canguan.status == STARTED:
            # update params
            pass
        
        # if text_canguan is stopping this frame...
        if text_canguan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_canguan.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_canguan.tStop = t  # not accounting for scr refresh
                text_canguan.tStopRefresh = tThisFlipGlobal  # on global time
                text_canguan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_canguan.stopped')
                # update status
                text_canguan.status = FINISHED
                text_canguan.setAutoDraw(False)
        
        # *sound_canguan* updates
        
        # if sound_canguan is starting this frame...
        if sound_canguan.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_canguan.frameNStart = frameN  # exact frame index
            sound_canguan.tStart = t  # local t and not account for scr refresh
            sound_canguan.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_canguan.started', tThisFlipGlobal)
            # update status
            sound_canguan.status = STARTED
            sound_canguan.play(when=win)  # sync with win flip
        
        # if sound_canguan is stopping this frame...
        if sound_canguan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_canguan.tStartRefresh + 3-frameTolerance or sound_canguan.isFinished:
                # keep track of stop time/frame for later
                sound_canguan.tStop = t  # not accounting for scr refresh
                sound_canguan.tStopRefresh = tThisFlipGlobal  # on global time
                sound_canguan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_canguan.stopped')
                # update status
                sound_canguan.status = FINISHED
                sound_canguan.stop()
        
        # *text_143* updates
        
        # if text_143 is starting this frame...
        if text_143.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_143.frameNStart = frameN  # exact frame index
            text_143.tStart = t  # local t and not account for scr refresh
            text_143.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_143, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_143.started')
            # update status
            text_143.status = STARTED
            text_143.setAutoDraw(True)
        
        # if text_143 is active this frame...
        if text_143.status == STARTED:
            # update params
            pass
        
        # if text_143 is stopping this frame...
        if text_143.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_143.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_143.tStop = t  # not accounting for scr refresh
                text_143.tStopRefresh = tThisFlipGlobal  # on global time
                text_143.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_143.stopped')
                # update status
                text_143.status = FINISHED
                text_143.setAutoDraw(False)
        
        # *text_144* updates
        
        # if text_144 is starting this frame...
        if text_144.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_144.frameNStart = frameN  # exact frame index
            text_144.tStart = t  # local t and not account for scr refresh
            text_144.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_144, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_144.started')
            # update status
            text_144.status = STARTED
            text_144.setAutoDraw(True)
        
        # if text_144 is active this frame...
        if text_144.status == STARTED:
            # update params
            pass
        
        # if text_144 is stopping this frame...
        if text_144.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_144.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_144.tStop = t  # not accounting for scr refresh
                text_144.tStopRefresh = tThisFlipGlobal  # on global time
                text_144.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_144.stopped')
                # update status
                text_144.status = FINISHED
                text_144.setAutoDraw(False)
        
        # *key_resp_canguan* updates
        waitOnFlip = False
        
        # if key_resp_canguan is starting this frame...
        if key_resp_canguan.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_canguan.frameNStart = frameN  # exact frame index
            key_resp_canguan.tStart = t  # local t and not account for scr refresh
            key_resp_canguan.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_canguan, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_canguan.started')
            # update status
            key_resp_canguan.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_canguan.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_canguan.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_canguan is stopping this frame...
        if key_resp_canguan.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_canguan.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_canguan.tStop = t  # not accounting for scr refresh
                key_resp_canguan.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_canguan.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_canguan.stopped')
                # update status
                key_resp_canguan.status = FINISHED
                key_resp_canguan.status = FINISHED
        if key_resp_canguan.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_canguan.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_canguan_allKeys.extend(theseKeys)
            if len(_key_resp_canguan_allKeys):
                key_resp_canguan.keys = _key_resp_canguan_allKeys[0].name  # just the first key pressed
                key_resp_canguan.rt = _key_resp_canguan_allKeys[0].rt
                key_resp_canguan.duration = _key_resp_canguan_allKeys[0].duration
                # was this correct?
                if (key_resp_canguan.keys == str("'left'")) or (key_resp_canguan.keys == "'left'"):
                    key_resp_canguan.corr = 1
                else:
                    key_resp_canguan.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_canguan]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_canguan.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_canguan.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_canguan" ---
    for thisComponent in trial_canguan.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_canguan
    trial_canguan.tStop = globalClock.getTime(format='float')
    trial_canguan.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_canguan.stopped', trial_canguan.tStop)
    sound_canguan.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_canguan.keys in ['', [], None]:  # No response was made
        key_resp_canguan.keys = None
        # was no response the correct answer?!
        if str("'left'").lower() == 'none':
           key_resp_canguan.corr = 1;  # correct non-response
        else:
           key_resp_canguan.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_canguan.keys',key_resp_canguan.keys)
    thisExp.addData('key_resp_canguan.corr', key_resp_canguan.corr)
    if key_resp_canguan.keys != None:  # we had a response
        thisExp.addData('key_resp_canguan.rt', key_resp_canguan.rt)
        thisExp.addData('key_resp_canguan.duration', key_resp_canguan.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_canguan.maxDurationReached:
        routineTimer.addTime(-trial_canguan.maxDuration)
    elif trial_canguan.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # --- Prepare to start Routine "trial_feihe1" ---
    # create an object to store info about Routine trial_feihe1
    trial_feihe1 = data.Routine(
        name='trial_feihe1',
        components=[text_feihe1, sound_feihe1, text_147, text_148, key_resp_feihe1],
    )
    trial_feihe1.status = NOT_STARTED
    continueRoutine = True
    # update component parameters for each repeat
    sound_feihe1.setSound('audio/feihe1.wav', secs=3, hamming=True)
    sound_feihe1.setVolume(1.0, log=False)
    sound_feihe1.seek(0)
    # create starting attributes for key_resp_feihe1
    key_resp_feihe1.keys = []
    key_resp_feihe1.rt = []
    _key_resp_feihe1_allKeys = []
    # store start times for trial_feihe1
    trial_feihe1.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
    trial_feihe1.tStart = globalClock.getTime(format='float')
    trial_feihe1.status = STARTED
    thisExp.addData('trial_feihe1.started', trial_feihe1.tStart)
    trial_feihe1.maxDuration = None
    # keep track of which components have finished
    trial_feihe1Components = trial_feihe1.components
    for thisComponent in trial_feihe1.components:
        thisComponent.tStart = None
        thisComponent.tStop = None
        thisComponent.tStartRefresh = None
        thisComponent.tStopRefresh = None
        if hasattr(thisComponent, 'status'):
            thisComponent.status = NOT_STARTED
    # reset timers
    t = 0
    _timeToFirstFrame = win.getFutureFlipTime(clock="now")
    frameN = -1
    
    # --- Run Routine "trial_feihe1" ---
    trial_feihe1.forceEnded = routineForceEnded = not continueRoutine
    while continueRoutine and routineTimer.getTime() < 12.0:
        # get current time
        t = routineTimer.getTime()
        tThisFlip = win.getFutureFlipTime(clock=routineTimer)
        tThisFlipGlobal = win.getFutureFlipTime(clock=None)
        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
        # update/draw components on each frame
        
        # *text_feihe1* updates
        
        # if text_feihe1 is starting this frame...
        if text_feihe1.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
            # keep track of start time/frame for later
            text_feihe1.frameNStart = frameN  # exact frame index
            text_feihe1.tStart = t  # local t and not account for scr refresh
            text_feihe1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_feihe1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_feihe1.started')
            # update status
            text_feihe1.status = STARTED
            text_feihe1.setAutoDraw(True)
        
        # if text_feihe1 is active this frame...
        if text_feihe1.status == STARTED:
            # update params
            pass
        
        # if text_feihe1 is stopping this frame...
        if text_feihe1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_feihe1.tStartRefresh + 3-frameTolerance:
                # keep track of stop time/frame for later
                text_feihe1.tStop = t  # not accounting for scr refresh
                text_feihe1.tStopRefresh = tThisFlipGlobal  # on global time
                text_feihe1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_feihe1.stopped')
                # update status
                text_feihe1.status = FINISHED
                text_feihe1.setAutoDraw(False)
        
        # *sound_feihe1* updates
        
        # if sound_feihe1 is starting this frame...
        if sound_feihe1.status == NOT_STARTED and tThisFlip >= 4-frameTolerance:
            # keep track of start time/frame for later
            sound_feihe1.frameNStart = frameN  # exact frame index
            sound_feihe1.tStart = t  # local t and not account for scr refresh
            sound_feihe1.tStartRefresh = tThisFlipGlobal  # on global time
            # add timestamp to datafile
            thisExp.addData('sound_feihe1.started', tThisFlipGlobal)
            # update status
            sound_feihe1.status = STARTED
            sound_feihe1.play(when=win)  # sync with win flip
        
        # if sound_feihe1 is stopping this frame...
        if sound_feihe1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > sound_feihe1.tStartRefresh + 3-frameTolerance or sound_feihe1.isFinished:
                # keep track of stop time/frame for later
                sound_feihe1.tStop = t  # not accounting for scr refresh
                sound_feihe1.tStopRefresh = tThisFlipGlobal  # on global time
                sound_feihe1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'sound_feihe1.stopped')
                # update status
                sound_feihe1.status = FINISHED
                sound_feihe1.stop()
        
        # *text_147* updates
        
        # if text_147 is starting this frame...
        if text_147.status == NOT_STARTED and tThisFlip >= 3-frameTolerance:
            # keep track of start time/frame for later
            text_147.frameNStart = frameN  # exact frame index
            text_147.tStart = t  # local t and not account for scr refresh
            text_147.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_147, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_147.started')
            # update status
            text_147.status = STARTED
            text_147.setAutoDraw(True)
        
        # if text_147 is active this frame...
        if text_147.status == STARTED:
            # update params
            pass
        
        # if text_147 is stopping this frame...
        if text_147.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_147.tStartRefresh + 4-frameTolerance:
                # keep track of stop time/frame for later
                text_147.tStop = t  # not accounting for scr refresh
                text_147.tStopRefresh = tThisFlipGlobal  # on global time
                text_147.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_147.stopped')
                # update status
                text_147.status = FINISHED
                text_147.setAutoDraw(False)
        
        # *text_148* updates
        
        # if text_148 is starting this frame...
        if text_148.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            text_148.frameNStart = frameN  # exact frame index
            text_148.tStart = t  # local t and not account for scr refresh
            text_148.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(text_148, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'text_148.started')
            # update status
            text_148.status = STARTED
            text_148.setAutoDraw(True)
        
        # if text_148 is active this frame...
        if text_148.status == STARTED:
            # update params
            pass
        
        # if text_148 is stopping this frame...
        if text_148.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > text_148.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                text_148.tStop = t  # not accounting for scr refresh
                text_148.tStopRefresh = tThisFlipGlobal  # on global time
                text_148.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'text_148.stopped')
                # update status
                text_148.status = FINISHED
                text_148.setAutoDraw(False)
        
        # *key_resp_feihe1* updates
        waitOnFlip = False
        
        # if key_resp_feihe1 is starting this frame...
        if key_resp_feihe1.status == NOT_STARTED and tThisFlip >= 7-frameTolerance:
            # keep track of start time/frame for later
            key_resp_feihe1.frameNStart = frameN  # exact frame index
            key_resp_feihe1.tStart = t  # local t and not account for scr refresh
            key_resp_feihe1.tStartRefresh = tThisFlipGlobal  # on global time
            win.timeOnFlip(key_resp_feihe1, 'tStartRefresh')  # time at next scr refresh
            # add timestamp to datafile
            thisExp.timestampOnFlip(win, 'key_resp_feihe1.started')
            # update status
            key_resp_feihe1.status = STARTED
            # keyboard checking is just starting
            waitOnFlip = True
            win.callOnFlip(key_resp_feihe1.clock.reset)  # t=0 on next screen flip
            win.callOnFlip(key_resp_feihe1.clearEvents, eventType='keyboard')  # clear events on next screen flip
        
        # if key_resp_feihe1 is stopping this frame...
        if key_resp_feihe1.status == STARTED:
            # is it time to stop? (based on global clock, using actual start)
            if tThisFlipGlobal > key_resp_feihe1.tStartRefresh + 5-frameTolerance:
                # keep track of stop time/frame for later
                key_resp_feihe1.tStop = t  # not accounting for scr refresh
                key_resp_feihe1.tStopRefresh = tThisFlipGlobal  # on global time
                key_resp_feihe1.frameNStop = frameN  # exact frame index
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_resp_feihe1.stopped')
                # update status
                key_resp_feihe1.status = FINISHED
                key_resp_feihe1.status = FINISHED
        if key_resp_feihe1.status == STARTED and not waitOnFlip:
            theseKeys = key_resp_feihe1.getKeys(keyList=['left','right'], ignoreKeys=["escape"], waitRelease=False)
            _key_resp_feihe1_allKeys.extend(theseKeys)
            if len(_key_resp_feihe1_allKeys):
                key_resp_feihe1.keys = _key_resp_feihe1_allKeys[0].name  # just the first key pressed
                key_resp_feihe1.rt = _key_resp_feihe1_allKeys[0].rt
                key_resp_feihe1.duration = _key_resp_feihe1_allKeys[0].duration
                # was this correct?
                if (key_resp_feihe1.keys == str("'right'")) or (key_resp_feihe1.keys == "'right'"):
                    key_resp_feihe1.corr = 1
                else:
                    key_resp_feihe1.corr = 0
                # a response ends the routine
                continueRoutine = False
        
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=["escape"]):
            thisExp.status = FINISHED
        if thisExp.status == FINISHED or endExpNow:
            endExperiment(thisExp, win=win)
            return
        # pause experiment here if requested
        if thisExp.status == PAUSED:
            pauseExperiment(
                thisExp=thisExp, 
                win=win, 
                timers=[routineTimer], 
                playbackComponents=[sound_feihe1]
            )
            # skip the frame we paused on
            continue
        
        # check if all components have finished
        if not continueRoutine:  # a component has requested a forced-end of Routine
            trial_feihe1.forceEnded = routineForceEnded = True
            break
        continueRoutine = False  # will revert to True if at least one component still running
        for thisComponent in trial_feihe1.components:
            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                continueRoutine = True
                break  # at least one component has not yet finished
        
        # refresh the screen
        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
            win.flip()
    
    # --- Ending Routine "trial_feihe1" ---
    for thisComponent in trial_feihe1.components:
        if hasattr(thisComponent, "setAutoDraw"):
            thisComponent.setAutoDraw(False)
    # store stop times for trial_feihe1
    trial_feihe1.tStop = globalClock.getTime(format='float')
    trial_feihe1.tStopRefresh = tThisFlipGlobal
    thisExp.addData('trial_feihe1.stopped', trial_feihe1.tStop)
    sound_feihe1.pause()  # ensure sound has stopped at end of Routine
    # check responses
    if key_resp_feihe1.keys in ['', [], None]:  # No response was made
        key_resp_feihe1.keys = None
        # was no response the correct answer?!
        if str("'right'").lower() == 'none':
           key_resp_feihe1.corr = 1;  # correct non-response
        else:
           key_resp_feihe1.corr = 0;  # failed to respond (incorrectly)
    # store data for thisExp (ExperimentHandler)
    thisExp.addData('key_resp_feihe1.keys',key_resp_feihe1.keys)
    thisExp.addData('key_resp_feihe1.corr', key_resp_feihe1.corr)
    if key_resp_feihe1.keys != None:  # we had a response
        thisExp.addData('key_resp_feihe1.rt', key_resp_feihe1.rt)
        thisExp.addData('key_resp_feihe1.duration', key_resp_feihe1.duration)
    # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
    if trial_feihe1.maxDurationReached:
        routineTimer.addTime(-trial_feihe1.maxDuration)
    elif trial_feihe1.forceEnded:
        routineTimer.reset()
    else:
        routineTimer.addTime(-12.000000)
    thisExp.nextEntry()
    
    # mark experiment as finished
    endExperiment(thisExp, win=win)


def saveData(thisExp):
    """
    Save data from this experiment
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    """
    filename = thisExp.dataFileName
    # these shouldn't be strictly necessary (should auto-save)
    thisExp.saveAsWideText(filename + '.csv', delim='auto')
    thisExp.saveAsPickle(filename)


def endExperiment(thisExp, win=None):
    """
    End this experiment, performing final shut down operations.
    
    This function does NOT close the window or end the Python process - use `quit` for this.
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window for this experiment.
    """
    if win is not None:
        # remove autodraw from all current components
        win.clearAutoDraw()
        # Flip one final time so any remaining win.callOnFlip() 
        # and win.timeOnFlip() tasks get executed
        win.flip()
    # return console logger level to WARNING
    logging.console.setLevel(logging.WARNING)
    # mark experiment handler as finished
    thisExp.status = FINISHED
    logging.flush()


def quit(thisExp, win=None, thisSession=None):
    """
    Fully quit, closing the window and ending the Python process.
    
    Parameters
    ==========
    win : psychopy.visual.Window
        Window to close.
    thisSession : psychopy.session.Session or None
        Handle of the Session object this experiment is being run from, if any.
    """
    thisExp.abort()  # or data files will save again on exit
    # make sure everything is closed down
    if win is not None:
        # Flip one final time so any remaining win.callOnFlip() 
        # and win.timeOnFlip() tasks get executed before quitting
        win.flip()
        win.close()
    logging.flush()
    if thisSession is not None:
        thisSession.stop()
    # terminate Python process
    core.quit()


# if running this experiment as a script...
if __name__ == '__main__':
    # call all functions in order
    expInfo = showExpInfoDlg(expInfo=expInfo)
    thisExp = setupData(expInfo=expInfo)
    logFile = setupLogging(filename=thisExp.dataFileName)
    win = setupWindow(expInfo=expInfo)
    setupDevices(expInfo=expInfo, thisExp=thisExp, win=win)
    run(
        expInfo=expInfo, 
        thisExp=thisExp, 
        win=win,
        globalClock='float'
    )
    saveData(thisExp=thisExp)
    quit(thisExp=thisExp, win=win)
